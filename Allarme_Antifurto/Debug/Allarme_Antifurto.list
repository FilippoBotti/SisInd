
Allarme_Antifurto.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000039bc  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08003b50  08003b50  00013b50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c00  08003c00  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08003c00  08003c00  00013c00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003c08  08003c08  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c08  08003c08  00013c08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003c0c  08003c0c  00013c0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08003c10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d0  20000014  08003c24  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000e4  08003c24  000200e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000de18  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002037  00000000  00000000  0002de5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c70  00000000  00000000  0002fe98  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b58  00000000  00000000  00030b08  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000171ef  00000000  00000000  00031660  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a749  00000000  00000000  0004884f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008aeca  00000000  00000000  00052f98  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000dde62  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000032d0  00000000  00000000  000ddee0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000014 	.word	0x20000014
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08003b38 	.word	0x08003b38

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000018 	.word	0x20000018
 80001d0:	08003b38 	.word	0x08003b38

080001d4 <strcmp>:
 80001d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001dc:	2a01      	cmp	r2, #1
 80001de:	bf28      	it	cs
 80001e0:	429a      	cmpcs	r2, r3
 80001e2:	d0f7      	beq.n	80001d4 <strcmp>
 80001e4:	1ad0      	subs	r0, r2, r3
 80001e6:	4770      	bx	lr

080001e8 <strlen>:
 80001e8:	4603      	mov	r3, r0
 80001ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ee:	2a00      	cmp	r2, #0
 80001f0:	d1fb      	bne.n	80001ea <strlen+0x2>
 80001f2:	1a18      	subs	r0, r3, r0
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr

080001f8 <__aeabi_uldivmod>:
 80001f8:	b953      	cbnz	r3, 8000210 <__aeabi_uldivmod+0x18>
 80001fa:	b94a      	cbnz	r2, 8000210 <__aeabi_uldivmod+0x18>
 80001fc:	2900      	cmp	r1, #0
 80001fe:	bf08      	it	eq
 8000200:	2800      	cmpeq	r0, #0
 8000202:	bf1c      	itt	ne
 8000204:	f04f 31ff 	movne.w	r1, #4294967295
 8000208:	f04f 30ff 	movne.w	r0, #4294967295
 800020c:	f000 b972 	b.w	80004f4 <__aeabi_idiv0>
 8000210:	f1ad 0c08 	sub.w	ip, sp, #8
 8000214:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000218:	f000 f806 	bl	8000228 <__udivmoddi4>
 800021c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000220:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000224:	b004      	add	sp, #16
 8000226:	4770      	bx	lr

08000228 <__udivmoddi4>:
 8000228:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800022c:	9e08      	ldr	r6, [sp, #32]
 800022e:	4604      	mov	r4, r0
 8000230:	4688      	mov	r8, r1
 8000232:	2b00      	cmp	r3, #0
 8000234:	d14b      	bne.n	80002ce <__udivmoddi4+0xa6>
 8000236:	428a      	cmp	r2, r1
 8000238:	4615      	mov	r5, r2
 800023a:	d967      	bls.n	800030c <__udivmoddi4+0xe4>
 800023c:	fab2 f282 	clz	r2, r2
 8000240:	b14a      	cbz	r2, 8000256 <__udivmoddi4+0x2e>
 8000242:	f1c2 0720 	rsb	r7, r2, #32
 8000246:	fa01 f302 	lsl.w	r3, r1, r2
 800024a:	fa20 f707 	lsr.w	r7, r0, r7
 800024e:	4095      	lsls	r5, r2
 8000250:	ea47 0803 	orr.w	r8, r7, r3
 8000254:	4094      	lsls	r4, r2
 8000256:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800025a:	0c23      	lsrs	r3, r4, #16
 800025c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000260:	fa1f fc85 	uxth.w	ip, r5
 8000264:	fb0e 8817 	mls	r8, lr, r7, r8
 8000268:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800026c:	fb07 f10c 	mul.w	r1, r7, ip
 8000270:	4299      	cmp	r1, r3
 8000272:	d909      	bls.n	8000288 <__udivmoddi4+0x60>
 8000274:	18eb      	adds	r3, r5, r3
 8000276:	f107 30ff 	add.w	r0, r7, #4294967295
 800027a:	f080 811b 	bcs.w	80004b4 <__udivmoddi4+0x28c>
 800027e:	4299      	cmp	r1, r3
 8000280:	f240 8118 	bls.w	80004b4 <__udivmoddi4+0x28c>
 8000284:	3f02      	subs	r7, #2
 8000286:	442b      	add	r3, r5
 8000288:	1a5b      	subs	r3, r3, r1
 800028a:	b2a4      	uxth	r4, r4
 800028c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000290:	fb0e 3310 	mls	r3, lr, r0, r3
 8000294:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000298:	fb00 fc0c 	mul.w	ip, r0, ip
 800029c:	45a4      	cmp	ip, r4
 800029e:	d909      	bls.n	80002b4 <__udivmoddi4+0x8c>
 80002a0:	192c      	adds	r4, r5, r4
 80002a2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a6:	f080 8107 	bcs.w	80004b8 <__udivmoddi4+0x290>
 80002aa:	45a4      	cmp	ip, r4
 80002ac:	f240 8104 	bls.w	80004b8 <__udivmoddi4+0x290>
 80002b0:	3802      	subs	r0, #2
 80002b2:	442c      	add	r4, r5
 80002b4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002b8:	eba4 040c 	sub.w	r4, r4, ip
 80002bc:	2700      	movs	r7, #0
 80002be:	b11e      	cbz	r6, 80002c8 <__udivmoddi4+0xa0>
 80002c0:	40d4      	lsrs	r4, r2
 80002c2:	2300      	movs	r3, #0
 80002c4:	e9c6 4300 	strd	r4, r3, [r6]
 80002c8:	4639      	mov	r1, r7
 80002ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d909      	bls.n	80002e6 <__udivmoddi4+0xbe>
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	f000 80eb 	beq.w	80004ae <__udivmoddi4+0x286>
 80002d8:	2700      	movs	r7, #0
 80002da:	e9c6 0100 	strd	r0, r1, [r6]
 80002de:	4638      	mov	r0, r7
 80002e0:	4639      	mov	r1, r7
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	fab3 f783 	clz	r7, r3
 80002ea:	2f00      	cmp	r7, #0
 80002ec:	d147      	bne.n	800037e <__udivmoddi4+0x156>
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d302      	bcc.n	80002f8 <__udivmoddi4+0xd0>
 80002f2:	4282      	cmp	r2, r0
 80002f4:	f200 80fa 	bhi.w	80004ec <__udivmoddi4+0x2c4>
 80002f8:	1a84      	subs	r4, r0, r2
 80002fa:	eb61 0303 	sbc.w	r3, r1, r3
 80002fe:	2001      	movs	r0, #1
 8000300:	4698      	mov	r8, r3
 8000302:	2e00      	cmp	r6, #0
 8000304:	d0e0      	beq.n	80002c8 <__udivmoddi4+0xa0>
 8000306:	e9c6 4800 	strd	r4, r8, [r6]
 800030a:	e7dd      	b.n	80002c8 <__udivmoddi4+0xa0>
 800030c:	b902      	cbnz	r2, 8000310 <__udivmoddi4+0xe8>
 800030e:	deff      	udf	#255	; 0xff
 8000310:	fab2 f282 	clz	r2, r2
 8000314:	2a00      	cmp	r2, #0
 8000316:	f040 808f 	bne.w	8000438 <__udivmoddi4+0x210>
 800031a:	1b49      	subs	r1, r1, r5
 800031c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000320:	fa1f f885 	uxth.w	r8, r5
 8000324:	2701      	movs	r7, #1
 8000326:	fbb1 fcfe 	udiv	ip, r1, lr
 800032a:	0c23      	lsrs	r3, r4, #16
 800032c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000330:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000334:	fb08 f10c 	mul.w	r1, r8, ip
 8000338:	4299      	cmp	r1, r3
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x124>
 800033c:	18eb      	adds	r3, r5, r3
 800033e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x122>
 8000344:	4299      	cmp	r1, r3
 8000346:	f200 80cd 	bhi.w	80004e4 <__udivmoddi4+0x2bc>
 800034a:	4684      	mov	ip, r0
 800034c:	1a59      	subs	r1, r3, r1
 800034e:	b2a3      	uxth	r3, r4
 8000350:	fbb1 f0fe 	udiv	r0, r1, lr
 8000354:	fb0e 1410 	mls	r4, lr, r0, r1
 8000358:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800035c:	fb08 f800 	mul.w	r8, r8, r0
 8000360:	45a0      	cmp	r8, r4
 8000362:	d907      	bls.n	8000374 <__udivmoddi4+0x14c>
 8000364:	192c      	adds	r4, r5, r4
 8000366:	f100 33ff 	add.w	r3, r0, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x14a>
 800036c:	45a0      	cmp	r8, r4
 800036e:	f200 80b6 	bhi.w	80004de <__udivmoddi4+0x2b6>
 8000372:	4618      	mov	r0, r3
 8000374:	eba4 0408 	sub.w	r4, r4, r8
 8000378:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800037c:	e79f      	b.n	80002be <__udivmoddi4+0x96>
 800037e:	f1c7 0c20 	rsb	ip, r7, #32
 8000382:	40bb      	lsls	r3, r7
 8000384:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000388:	ea4e 0e03 	orr.w	lr, lr, r3
 800038c:	fa01 f407 	lsl.w	r4, r1, r7
 8000390:	fa20 f50c 	lsr.w	r5, r0, ip
 8000394:	fa21 f30c 	lsr.w	r3, r1, ip
 8000398:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800039c:	4325      	orrs	r5, r4
 800039e:	fbb3 f9f8 	udiv	r9, r3, r8
 80003a2:	0c2c      	lsrs	r4, r5, #16
 80003a4:	fb08 3319 	mls	r3, r8, r9, r3
 80003a8:	fa1f fa8e 	uxth.w	sl, lr
 80003ac:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003b0:	fb09 f40a 	mul.w	r4, r9, sl
 80003b4:	429c      	cmp	r4, r3
 80003b6:	fa02 f207 	lsl.w	r2, r2, r7
 80003ba:	fa00 f107 	lsl.w	r1, r0, r7
 80003be:	d90b      	bls.n	80003d8 <__udivmoddi4+0x1b0>
 80003c0:	eb1e 0303 	adds.w	r3, lr, r3
 80003c4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003c8:	f080 8087 	bcs.w	80004da <__udivmoddi4+0x2b2>
 80003cc:	429c      	cmp	r4, r3
 80003ce:	f240 8084 	bls.w	80004da <__udivmoddi4+0x2b2>
 80003d2:	f1a9 0902 	sub.w	r9, r9, #2
 80003d6:	4473      	add	r3, lr
 80003d8:	1b1b      	subs	r3, r3, r4
 80003da:	b2ad      	uxth	r5, r5
 80003dc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003e0:	fb08 3310 	mls	r3, r8, r0, r3
 80003e4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003e8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003ec:	45a2      	cmp	sl, r4
 80003ee:	d908      	bls.n	8000402 <__udivmoddi4+0x1da>
 80003f0:	eb1e 0404 	adds.w	r4, lr, r4
 80003f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f8:	d26b      	bcs.n	80004d2 <__udivmoddi4+0x2aa>
 80003fa:	45a2      	cmp	sl, r4
 80003fc:	d969      	bls.n	80004d2 <__udivmoddi4+0x2aa>
 80003fe:	3802      	subs	r0, #2
 8000400:	4474      	add	r4, lr
 8000402:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000406:	fba0 8902 	umull	r8, r9, r0, r2
 800040a:	eba4 040a 	sub.w	r4, r4, sl
 800040e:	454c      	cmp	r4, r9
 8000410:	46c2      	mov	sl, r8
 8000412:	464b      	mov	r3, r9
 8000414:	d354      	bcc.n	80004c0 <__udivmoddi4+0x298>
 8000416:	d051      	beq.n	80004bc <__udivmoddi4+0x294>
 8000418:	2e00      	cmp	r6, #0
 800041a:	d069      	beq.n	80004f0 <__udivmoddi4+0x2c8>
 800041c:	ebb1 050a 	subs.w	r5, r1, sl
 8000420:	eb64 0403 	sbc.w	r4, r4, r3
 8000424:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000428:	40fd      	lsrs	r5, r7
 800042a:	40fc      	lsrs	r4, r7
 800042c:	ea4c 0505 	orr.w	r5, ip, r5
 8000430:	e9c6 5400 	strd	r5, r4, [r6]
 8000434:	2700      	movs	r7, #0
 8000436:	e747      	b.n	80002c8 <__udivmoddi4+0xa0>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f703 	lsr.w	r7, r0, r3
 8000440:	4095      	lsls	r5, r2
 8000442:	fa01 f002 	lsl.w	r0, r1, r2
 8000446:	fa21 f303 	lsr.w	r3, r1, r3
 800044a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800044e:	4338      	orrs	r0, r7
 8000450:	0c01      	lsrs	r1, r0, #16
 8000452:	fbb3 f7fe 	udiv	r7, r3, lr
 8000456:	fa1f f885 	uxth.w	r8, r5
 800045a:	fb0e 3317 	mls	r3, lr, r7, r3
 800045e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000462:	fb07 f308 	mul.w	r3, r7, r8
 8000466:	428b      	cmp	r3, r1
 8000468:	fa04 f402 	lsl.w	r4, r4, r2
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x256>
 800046e:	1869      	adds	r1, r5, r1
 8000470:	f107 3cff 	add.w	ip, r7, #4294967295
 8000474:	d22f      	bcs.n	80004d6 <__udivmoddi4+0x2ae>
 8000476:	428b      	cmp	r3, r1
 8000478:	d92d      	bls.n	80004d6 <__udivmoddi4+0x2ae>
 800047a:	3f02      	subs	r7, #2
 800047c:	4429      	add	r1, r5
 800047e:	1acb      	subs	r3, r1, r3
 8000480:	b281      	uxth	r1, r0
 8000482:	fbb3 f0fe 	udiv	r0, r3, lr
 8000486:	fb0e 3310 	mls	r3, lr, r0, r3
 800048a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048e:	fb00 f308 	mul.w	r3, r0, r8
 8000492:	428b      	cmp	r3, r1
 8000494:	d907      	bls.n	80004a6 <__udivmoddi4+0x27e>
 8000496:	1869      	adds	r1, r5, r1
 8000498:	f100 3cff 	add.w	ip, r0, #4294967295
 800049c:	d217      	bcs.n	80004ce <__udivmoddi4+0x2a6>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d915      	bls.n	80004ce <__udivmoddi4+0x2a6>
 80004a2:	3802      	subs	r0, #2
 80004a4:	4429      	add	r1, r5
 80004a6:	1ac9      	subs	r1, r1, r3
 80004a8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004ac:	e73b      	b.n	8000326 <__udivmoddi4+0xfe>
 80004ae:	4637      	mov	r7, r6
 80004b0:	4630      	mov	r0, r6
 80004b2:	e709      	b.n	80002c8 <__udivmoddi4+0xa0>
 80004b4:	4607      	mov	r7, r0
 80004b6:	e6e7      	b.n	8000288 <__udivmoddi4+0x60>
 80004b8:	4618      	mov	r0, r3
 80004ba:	e6fb      	b.n	80002b4 <__udivmoddi4+0x8c>
 80004bc:	4541      	cmp	r1, r8
 80004be:	d2ab      	bcs.n	8000418 <__udivmoddi4+0x1f0>
 80004c0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004c4:	eb69 020e 	sbc.w	r2, r9, lr
 80004c8:	3801      	subs	r0, #1
 80004ca:	4613      	mov	r3, r2
 80004cc:	e7a4      	b.n	8000418 <__udivmoddi4+0x1f0>
 80004ce:	4660      	mov	r0, ip
 80004d0:	e7e9      	b.n	80004a6 <__udivmoddi4+0x27e>
 80004d2:	4618      	mov	r0, r3
 80004d4:	e795      	b.n	8000402 <__udivmoddi4+0x1da>
 80004d6:	4667      	mov	r7, ip
 80004d8:	e7d1      	b.n	800047e <__udivmoddi4+0x256>
 80004da:	4681      	mov	r9, r0
 80004dc:	e77c      	b.n	80003d8 <__udivmoddi4+0x1b0>
 80004de:	3802      	subs	r0, #2
 80004e0:	442c      	add	r4, r5
 80004e2:	e747      	b.n	8000374 <__udivmoddi4+0x14c>
 80004e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e8:	442b      	add	r3, r5
 80004ea:	e72f      	b.n	800034c <__udivmoddi4+0x124>
 80004ec:	4638      	mov	r0, r7
 80004ee:	e708      	b.n	8000302 <__udivmoddi4+0xda>
 80004f0:	4637      	mov	r7, r6
 80004f2:	e6e9      	b.n	80002c8 <__udivmoddi4+0xa0>

080004f4 <__aeabi_idiv0>:
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop

080004f8 <InitAlarm>:
int intrusion = 0;
extern uint32_t TempoAR_Pir;
extern char password[6];
extern int tentativi;

void InitAlarm(void){
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b082      	sub	sp, #8
 80004fc:	af00      	add	r7, sp, #0
	for(int i=0; i<15; i++){
 80004fe:	2300      	movs	r3, #0
 8000500:	607b      	str	r3, [r7, #4]
 8000502:	e02b      	b.n	800055c <InitAlarm+0x64>
		if(i%3==0){
 8000504:	6879      	ldr	r1, [r7, #4]
 8000506:	4b1c      	ldr	r3, [pc, #112]	; (8000578 <InitAlarm+0x80>)
 8000508:	fb83 3201 	smull	r3, r2, r3, r1
 800050c:	17cb      	asrs	r3, r1, #31
 800050e:	1ad2      	subs	r2, r2, r3
 8000510:	4613      	mov	r3, r2
 8000512:	005b      	lsls	r3, r3, #1
 8000514:	4413      	add	r3, r2
 8000516:	1aca      	subs	r2, r1, r3
 8000518:	2a00      	cmp	r2, #0
 800051a:	d101      	bne.n	8000520 <InitAlarm+0x28>
			PulisciSchermo();
 800051c:	f000 faec 	bl	8000af8 <PulisciSchermo>
		}

		StampaStringaSuLCD(0, 0, "Initializing");
 8000520:	4a16      	ldr	r2, [pc, #88]	; (800057c <InitAlarm+0x84>)
 8000522:	2100      	movs	r1, #0
 8000524:	2000      	movs	r0, #0
 8000526:	f000 fb2e 	bl	8000b86 <StampaStringaSuLCD>
		StampaStringaSuLCD(i%3+12, 0, ".");
 800052a:	687a      	ldr	r2, [r7, #4]
 800052c:	4b12      	ldr	r3, [pc, #72]	; (8000578 <InitAlarm+0x80>)
 800052e:	fb83 3102 	smull	r3, r1, r3, r2
 8000532:	17d3      	asrs	r3, r2, #31
 8000534:	1ac9      	subs	r1, r1, r3
 8000536:	460b      	mov	r3, r1
 8000538:	005b      	lsls	r3, r3, #1
 800053a:	440b      	add	r3, r1
 800053c:	1ad1      	subs	r1, r2, r3
 800053e:	b2cb      	uxtb	r3, r1
 8000540:	330c      	adds	r3, #12
 8000542:	b2db      	uxtb	r3, r3
 8000544:	4a0e      	ldr	r2, [pc, #56]	; (8000580 <InitAlarm+0x88>)
 8000546:	2100      	movs	r1, #0
 8000548:	4618      	mov	r0, r3
 800054a:	f000 fb1c 	bl	8000b86 <StampaStringaSuLCD>

		HAL_Delay(1000);
 800054e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000552:	f001 f97b 	bl	800184c <HAL_Delay>
	for(int i=0; i<15; i++){
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	3301      	adds	r3, #1
 800055a:	607b      	str	r3, [r7, #4]
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	2b0e      	cmp	r3, #14
 8000560:	ddd0      	ble.n	8000504 <InitAlarm+0xc>
	}
	PulisciSchermo();
 8000562:	f000 fac9 	bl	8000af8 <PulisciSchermo>
	StampaStringaSuLCD(0, 0, "Ready");
 8000566:	4a07      	ldr	r2, [pc, #28]	; (8000584 <InitAlarm+0x8c>)
 8000568:	2100      	movs	r1, #0
 800056a:	2000      	movs	r0, #0
 800056c:	f000 fb0b 	bl	8000b86 <StampaStringaSuLCD>
}
 8000570:	bf00      	nop
 8000572:	3708      	adds	r7, #8
 8000574:	46bd      	mov	sp, r7
 8000576:	bd80      	pop	{r7, pc}
 8000578:	55555556 	.word	0x55555556
 800057c:	08003b50 	.word	0x08003b50
 8000580:	08003b60 	.word	0x08003b60
 8000584:	08003b64 	.word	0x08003b64

08000588 <CheckPassword>:


void CheckPassword(void){
 8000588:	b580      	push	{r7, lr}
 800058a:	af00      	add	r7, sp, #0
	if(strcmp(lettera,"123456")==0){
 800058c:	492e      	ldr	r1, [pc, #184]	; (8000648 <CheckPassword+0xc0>)
 800058e:	482f      	ldr	r0, [pc, #188]	; (800064c <CheckPassword+0xc4>)
 8000590:	f7ff fe20 	bl	80001d4 <strcmp>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d122      	bne.n	80005e0 <CheckPassword+0x58>
		memset(lettera,0,strlen(lettera));
 800059a:	482c      	ldr	r0, [pc, #176]	; (800064c <CheckPassword+0xc4>)
 800059c:	f7ff fe24 	bl	80001e8 <strlen>
 80005a0:	4603      	mov	r3, r0
 80005a2:	461a      	mov	r2, r3
 80005a4:	2100      	movs	r1, #0
 80005a6:	4829      	ldr	r0, [pc, #164]	; (800064c <CheckPassword+0xc4>)
 80005a8:	f003 fa80 	bl	8003aac <memset>
		memset(password,0,strlen(password));
 80005ac:	4828      	ldr	r0, [pc, #160]	; (8000650 <CheckPassword+0xc8>)
 80005ae:	f7ff fe1b 	bl	80001e8 <strlen>
 80005b2:	4603      	mov	r3, r0
 80005b4:	461a      	mov	r2, r3
 80005b6:	2100      	movs	r1, #0
 80005b8:	4825      	ldr	r0, [pc, #148]	; (8000650 <CheckPassword+0xc8>)
 80005ba:	f003 fa77 	bl	8003aac <memset>
		cursore=-1;
 80005be:	4b25      	ldr	r3, [pc, #148]	; (8000654 <CheckPassword+0xcc>)
 80005c0:	f04f 32ff 	mov.w	r2, #4294967295
 80005c4:	601a      	str	r2, [r3, #0]
		tentativi=0;
 80005c6:	4b24      	ldr	r3, [pc, #144]	; (8000658 <CheckPassword+0xd0>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	601a      	str	r2, [r3, #0]
		if(allarme==0){
 80005cc:	4b23      	ldr	r3, [pc, #140]	; (800065c <CheckPassword+0xd4>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d102      	bne.n	80005da <CheckPassword+0x52>
			AllarmeAttivo();
 80005d4:	f000 f848 	bl	8000668 <AllarmeAttivo>
		memset(lettera,0,strlen(lettera));
		memset(password,0,strlen(password));
		cursore=-1;
	}

}
 80005d8:	e034      	b.n	8000644 <CheckPassword+0xbc>
			AllarmeDisattivato();
 80005da:	f000 f85b 	bl	8000694 <AllarmeDisattivato>
}
 80005de:	e031      	b.n	8000644 <CheckPassword+0xbc>
		PulisciSchermo();
 80005e0:	f000 fa8a 	bl	8000af8 <PulisciSchermo>
		StampaStringaSuLCD(0, 1, "Wrong code");
 80005e4:	4a1e      	ldr	r2, [pc, #120]	; (8000660 <CheckPassword+0xd8>)
 80005e6:	2101      	movs	r1, #1
 80005e8:	2000      	movs	r0, #0
 80005ea:	f000 facc 	bl	8000b86 <StampaStringaSuLCD>
		tentativi++;
 80005ee:	4b1a      	ldr	r3, [pc, #104]	; (8000658 <CheckPassword+0xd0>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	3301      	adds	r3, #1
 80005f4:	4a18      	ldr	r2, [pc, #96]	; (8000658 <CheckPassword+0xd0>)
 80005f6:	6013      	str	r3, [r2, #0]
		if(tentativi==3 && !intrusion){
 80005f8:	4b17      	ldr	r3, [pc, #92]	; (8000658 <CheckPassword+0xd0>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	2b03      	cmp	r3, #3
 80005fe:	d10b      	bne.n	8000618 <CheckPassword+0x90>
 8000600:	4b18      	ldr	r3, [pc, #96]	; (8000664 <CheckPassword+0xdc>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	2b00      	cmp	r3, #0
 8000606:	d107      	bne.n	8000618 <CheckPassword+0x90>
			allarme=1;
 8000608:	4b14      	ldr	r3, [pc, #80]	; (800065c <CheckPassword+0xd4>)
 800060a:	2201      	movs	r2, #1
 800060c:	601a      	str	r2, [r3, #0]
			CheckIntrusion();
 800060e:	f000 f8a1 	bl	8000754 <CheckIntrusion>
			tentativi=0;
 8000612:	4b11      	ldr	r3, [pc, #68]	; (8000658 <CheckPassword+0xd0>)
 8000614:	2200      	movs	r2, #0
 8000616:	601a      	str	r2, [r3, #0]
		memset(lettera,0,strlen(lettera));
 8000618:	480c      	ldr	r0, [pc, #48]	; (800064c <CheckPassword+0xc4>)
 800061a:	f7ff fde5 	bl	80001e8 <strlen>
 800061e:	4603      	mov	r3, r0
 8000620:	461a      	mov	r2, r3
 8000622:	2100      	movs	r1, #0
 8000624:	4809      	ldr	r0, [pc, #36]	; (800064c <CheckPassword+0xc4>)
 8000626:	f003 fa41 	bl	8003aac <memset>
		memset(password,0,strlen(password));
 800062a:	4809      	ldr	r0, [pc, #36]	; (8000650 <CheckPassword+0xc8>)
 800062c:	f7ff fddc 	bl	80001e8 <strlen>
 8000630:	4603      	mov	r3, r0
 8000632:	461a      	mov	r2, r3
 8000634:	2100      	movs	r1, #0
 8000636:	4806      	ldr	r0, [pc, #24]	; (8000650 <CheckPassword+0xc8>)
 8000638:	f003 fa38 	bl	8003aac <memset>
		cursore=-1;
 800063c:	4b05      	ldr	r3, [pc, #20]	; (8000654 <CheckPassword+0xcc>)
 800063e:	f04f 32ff 	mov.w	r2, #4294967295
 8000642:	601a      	str	r2, [r3, #0]
}
 8000644:	bf00      	nop
 8000646:	bd80      	pop	{r7, pc}
 8000648:	08003b6c 	.word	0x08003b6c
 800064c:	20000058 	.word	0x20000058
 8000650:	2000004c 	.word	0x2000004c
 8000654:	20000000 	.word	0x20000000
 8000658:	20000040 	.word	0x20000040
 800065c:	2000003c 	.word	0x2000003c
 8000660:	08003b74 	.word	0x08003b74
 8000664:	20000030 	.word	0x20000030

08000668 <AllarmeAttivo>:

void AllarmeAttivo(void){
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
	allarme=1;
 800066c:	4b07      	ldr	r3, [pc, #28]	; (800068c <AllarmeAttivo+0x24>)
 800066e:	2201      	movs	r2, #1
 8000670:	601a      	str	r2, [r3, #0]
	HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000672:	2009      	movs	r0, #9
 8000674:	f001 fa25 	bl	8001ac2 <HAL_NVIC_EnableIRQ>
	PulisciSchermo();
 8000678:	f000 fa3e 	bl	8000af8 <PulisciSchermo>
	StampaStringaSuLCD(0, 0, "Alarm on");
 800067c:	4a04      	ldr	r2, [pc, #16]	; (8000690 <AllarmeAttivo+0x28>)
 800067e:	2100      	movs	r1, #0
 8000680:	2000      	movs	r0, #0
 8000682:	f000 fa80 	bl	8000b86 <StampaStringaSuLCD>
}
 8000686:	bf00      	nop
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	2000003c 	.word	0x2000003c
 8000690:	08003b80 	.word	0x08003b80

08000694 <AllarmeDisattivato>:

void AllarmeDisattivato(void){
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
	allarme=0;
 8000698:	4b0f      	ldr	r3, [pc, #60]	; (80006d8 <AllarmeDisattivato+0x44>)
 800069a:	2200      	movs	r2, #0
 800069c:	601a      	str	r2, [r3, #0]
	intrusion=0;
 800069e:	4b0f      	ldr	r3, [pc, #60]	; (80006dc <AllarmeDisattivato+0x48>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	601a      	str	r2, [r3, #0]
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 80006a4:	2100      	movs	r1, #0
 80006a6:	480e      	ldr	r0, [pc, #56]	; (80006e0 <AllarmeDisattivato+0x4c>)
 80006a8:	f002 f8f4 	bl	8002894 <HAL_TIM_PWM_Stop>
	HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, 0);
 80006ac:	2200      	movs	r2, #0
 80006ae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006b2:	480c      	ldr	r0, [pc, #48]	; (80006e4 <AllarmeDisattivato+0x50>)
 80006b4:	f001 fbc8 	bl	8001e48 <HAL_GPIO_WritePin>
	PulisciSchermo();
 80006b8:	f000 fa1e 	bl	8000af8 <PulisciSchermo>
	StampaStringaSuLCD(0, 0, "Alarm off");
 80006bc:	4a0a      	ldr	r2, [pc, #40]	; (80006e8 <AllarmeDisattivato+0x54>)
 80006be:	2100      	movs	r1, #0
 80006c0:	2000      	movs	r0, #0
 80006c2:	f000 fa60 	bl	8000b86 <StampaStringaSuLCD>
	strobeBuffer=0;
 80006c6:	4b09      	ldr	r3, [pc, #36]	; (80006ec <AllarmeDisattivato+0x58>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	601a      	str	r2, [r3, #0]
	strobe = 1;
 80006cc:	4b08      	ldr	r3, [pc, #32]	; (80006f0 <AllarmeDisattivato+0x5c>)
 80006ce:	2201      	movs	r2, #1
 80006d0:	601a      	str	r2, [r3, #0]
}
 80006d2:	bf00      	nop
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	2000003c 	.word	0x2000003c
 80006dc:	20000030 	.word	0x20000030
 80006e0:	20000060 	.word	0x20000060
 80006e4:	40020400 	.word	0x40020400
 80006e8:	08003b8c 	.word	0x08003b8c
 80006ec:	20000054 	.word	0x20000054
 80006f0:	20000004 	.word	0x20000004

080006f4 <Sound>:

void Sound(int strobe){
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
	if(allarme&&intrusion){
 80006fc:	4b11      	ldr	r3, [pc, #68]	; (8000744 <Sound+0x50>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	2b00      	cmp	r3, #0
 8000702:	d01b      	beq.n	800073c <Sound+0x48>
 8000704:	4b10      	ldr	r3, [pc, #64]	; (8000748 <Sound+0x54>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	2b00      	cmp	r3, #0
 800070a:	d017      	beq.n	800073c <Sound+0x48>
		if(strobe)
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	2b00      	cmp	r3, #0
 8000710:	d00a      	beq.n	8000728 <Sound+0x34>
		{
			HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000712:	2100      	movs	r1, #0
 8000714:	480d      	ldr	r0, [pc, #52]	; (800074c <Sound+0x58>)
 8000716:	f002 f88b 	bl	8002830 <HAL_TIM_PWM_Start>
			HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, 1);
 800071a:	2201      	movs	r2, #1
 800071c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000720:	480b      	ldr	r0, [pc, #44]	; (8000750 <Sound+0x5c>)
 8000722:	f001 fb91 	bl	8001e48 <HAL_GPIO_WritePin>
			HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
			HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, 0);

		}
	}
}
 8000726:	e009      	b.n	800073c <Sound+0x48>
			HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 8000728:	2100      	movs	r1, #0
 800072a:	4808      	ldr	r0, [pc, #32]	; (800074c <Sound+0x58>)
 800072c:	f002 f8b2 	bl	8002894 <HAL_TIM_PWM_Stop>
			HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, 0);
 8000730:	2200      	movs	r2, #0
 8000732:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000736:	4806      	ldr	r0, [pc, #24]	; (8000750 <Sound+0x5c>)
 8000738:	f001 fb86 	bl	8001e48 <HAL_GPIO_WritePin>
}
 800073c:	bf00      	nop
 800073e:	3708      	adds	r7, #8
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	2000003c 	.word	0x2000003c
 8000748:	20000030 	.word	0x20000030
 800074c:	20000060 	.word	0x20000060
 8000750:	40020400 	.word	0x40020400

08000754 <CheckIntrusion>:

void CheckIntrusion(void){
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
	HAL_NVIC_DisableIRQ(EXTI3_IRQn);
 8000758:	2009      	movs	r0, #9
 800075a:	f001 f9c0 	bl	8001ade <HAL_NVIC_DisableIRQ>
	strobeBuffer = TEMPO_STROBE;
 800075e:	4b07      	ldr	r3, [pc, #28]	; (800077c <CheckIntrusion+0x28>)
 8000760:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000764:	601a      	str	r2, [r3, #0]
	intrusion=1;
 8000766:	4b06      	ldr	r3, [pc, #24]	; (8000780 <CheckIntrusion+0x2c>)
 8000768:	2201      	movs	r2, #1
 800076a:	601a      	str	r2, [r3, #0]
	Sound(strobe);
 800076c:	4b05      	ldr	r3, [pc, #20]	; (8000784 <CheckIntrusion+0x30>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	4618      	mov	r0, r3
 8000772:	f7ff ffbf 	bl	80006f4 <Sound>
}
 8000776:	bf00      	nop
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	20000054 	.word	0x20000054
 8000780:	20000030 	.word	0x20000030
 8000784:	20000004 	.word	0x20000004

08000788 <LedAlarm>:

void LedAlarm(void){
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
	if(intrusion)
 800078c:	4b27      	ldr	r3, [pc, #156]	; (800082c <LedAlarm+0xa4>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	2b00      	cmp	r3, #0
 8000792:	d005      	beq.n	80007a0 <LedAlarm+0x18>
		HAL_GPIO_WritePin(WHITE_LED_GPIO_Port, WHITE_LED_Pin, 1);
 8000794:	2201      	movs	r2, #1
 8000796:	2140      	movs	r1, #64	; 0x40
 8000798:	4825      	ldr	r0, [pc, #148]	; (8000830 <LedAlarm+0xa8>)
 800079a:	f001 fb55 	bl	8001e48 <HAL_GPIO_WritePin>
 800079e:	e004      	b.n	80007aa <LedAlarm+0x22>
	else
	    HAL_GPIO_WritePin(WHITE_LED_GPIO_Port, WHITE_LED_Pin, 0);
 80007a0:	2200      	movs	r2, #0
 80007a2:	2140      	movs	r1, #64	; 0x40
 80007a4:	4822      	ldr	r0, [pc, #136]	; (8000830 <LedAlarm+0xa8>)
 80007a6:	f001 fb4f 	bl	8001e48 <HAL_GPIO_WritePin>
	if(!allarme && !intrusion)
 80007aa:	4b22      	ldr	r3, [pc, #136]	; (8000834 <LedAlarm+0xac>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d110      	bne.n	80007d4 <LedAlarm+0x4c>
 80007b2:	4b1e      	ldr	r3, [pc, #120]	; (800082c <LedAlarm+0xa4>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d10c      	bne.n	80007d4 <LedAlarm+0x4c>
	{
    	HAL_GPIO_WritePin(YELLOW_LED_GPIO_Port, YELLOW_LED_Pin, 1);
 80007ba:	2201      	movs	r2, #1
 80007bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007c0:	481d      	ldr	r0, [pc, #116]	; (8000838 <LedAlarm+0xb0>)
 80007c2:	f001 fb41 	bl	8001e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, 0);
 80007c6:	2200      	movs	r2, #0
 80007c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007cc:	481a      	ldr	r0, [pc, #104]	; (8000838 <LedAlarm+0xb0>)
 80007ce:	f001 fb3b 	bl	8001e48 <HAL_GPIO_WritePin>
 80007d2:	e029      	b.n	8000828 <LedAlarm+0xa0>
	}
	else if(allarme && !intrusion)
 80007d4:	4b17      	ldr	r3, [pc, #92]	; (8000834 <LedAlarm+0xac>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d010      	beq.n	80007fe <LedAlarm+0x76>
 80007dc:	4b13      	ldr	r3, [pc, #76]	; (800082c <LedAlarm+0xa4>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d10c      	bne.n	80007fe <LedAlarm+0x76>
	{
		HAL_GPIO_WritePin(YELLOW_LED_GPIO_Port, YELLOW_LED_Pin, 0);
 80007e4:	2200      	movs	r2, #0
 80007e6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007ea:	4813      	ldr	r0, [pc, #76]	; (8000838 <LedAlarm+0xb0>)
 80007ec:	f001 fb2c 	bl	8001e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, 1);
 80007f0:	2201      	movs	r2, #1
 80007f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007f6:	4810      	ldr	r0, [pc, #64]	; (8000838 <LedAlarm+0xb0>)
 80007f8:	f001 fb26 	bl	8001e48 <HAL_GPIO_WritePin>
 80007fc:	e014      	b.n	8000828 <LedAlarm+0xa0>
	}
	else if(allarme && intrusion)
 80007fe:	4b0d      	ldr	r3, [pc, #52]	; (8000834 <LedAlarm+0xac>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	2b00      	cmp	r3, #0
 8000804:	d010      	beq.n	8000828 <LedAlarm+0xa0>
 8000806:	4b09      	ldr	r3, [pc, #36]	; (800082c <LedAlarm+0xa4>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	2b00      	cmp	r3, #0
 800080c:	d00c      	beq.n	8000828 <LedAlarm+0xa0>
	{
		HAL_GPIO_WritePin(YELLOW_LED_GPIO_Port, YELLOW_LED_Pin, 0);
 800080e:	2200      	movs	r2, #0
 8000810:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000814:	4808      	ldr	r0, [pc, #32]	; (8000838 <LedAlarm+0xb0>)
 8000816:	f001 fb17 	bl	8001e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, 0);
 800081a:	2200      	movs	r2, #0
 800081c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000820:	4805      	ldr	r0, [pc, #20]	; (8000838 <LedAlarm+0xb0>)
 8000822:	f001 fb11 	bl	8001e48 <HAL_GPIO_WritePin>
	}
}
 8000826:	e7ff      	b.n	8000828 <LedAlarm+0xa0>
 8000828:	bf00      	nop
 800082a:	bd80      	pop	{r7, pc}
 800082c:	20000030 	.word	0x20000030
 8000830:	40020000 	.word	0x40020000
 8000834:	2000003c 	.word	0x2000003c
 8000838:	40020400 	.word	0x40020400

0800083c <init_LCD>:
#include "Display_LCD.h"
#include "main.h"


void init_LCD(void)
	{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
	init_modo_4bit();//lavorer� con solo 4 bit dati
 8000840:	f000 f808 	bl	8000854 <init_modo_4bit>
	SetLCD ();       // pulizia iniziale
 8000844:	f000 f84a 	bl	80008dc <SetLCD>
	go_xy(0,0) ;
 8000848:	2100      	movs	r1, #0
 800084a:	2000      	movs	r0, #0
 800084c:	f000 f976 	bl	8000b3c <go_xy>
	}
 8000850:	bf00      	nop
 8000852:	bd80      	pop	{r7, pc}

08000854 <init_modo_4bit>:
 * 2 di controllo RS e EN   con clock
 * 4 di dati D4,D5,D6,D7
 *
 */
void init_modo_4bit(void)
	{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
	HAL_Delay(50);
 8000858:	2032      	movs	r0, #50	; 0x32
 800085a:	f000 fff7 	bl	800184c <HAL_Delay>
    //0011xxxx
	HAL_GPIO_WritePin(PIN_D7_GPIO_Port,PIN_D7_Pin,GPIO_PIN_RESET);
 800085e:	2200      	movs	r2, #0
 8000860:	2120      	movs	r1, #32
 8000862:	481b      	ldr	r0, [pc, #108]	; (80008d0 <init_modo_4bit+0x7c>)
 8000864:	f001 faf0 	bl	8001e48 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PIN_D6_GPIO_Port,PIN_D6_Pin,GPIO_PIN_RESET);
 8000868:	2200      	movs	r2, #0
 800086a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800086e:	4819      	ldr	r0, [pc, #100]	; (80008d4 <init_modo_4bit+0x80>)
 8000870:	f001 faea 	bl	8001e48 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PIN_D5_GPIO_Port,PIN_D5_Pin,GPIO_PIN_SET);
 8000874:	2201      	movs	r2, #1
 8000876:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800087a:	4816      	ldr	r0, [pc, #88]	; (80008d4 <init_modo_4bit+0x80>)
 800087c:	f001 fae4 	bl	8001e48 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PIN_D4_GPIO_Port,PIN_D4_Pin,GPIO_PIN_SET);
 8000880:	2201      	movs	r2, #1
 8000882:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000886:	4814      	ldr	r0, [pc, #80]	; (80008d8 <init_modo_4bit+0x84>)
 8000888:	f001 fade 	bl	8001e48 <HAL_GPIO_WritePin>
    //spedizione del dato 0x33 attraveso 2 nibble 0x03 e 0x03
	LcdStrobe();
 800088c:	f000 f852 	bl	8000934 <LcdStrobe>
	HAL_Delay(10);          //questi ritardi possono diminuire
 8000890:	200a      	movs	r0, #10
 8000892:	f000 ffdb 	bl	800184c <HAL_Delay>
	LcdStrobe();
 8000896:	f000 f84d 	bl	8000934 <LcdStrobe>
	HAL_Delay(10);
 800089a:	200a      	movs	r0, #10
 800089c:	f000 ffd6 	bl	800184c <HAL_Delay>
	//spedizione del dato 0x32 attraveso 2 nibble 0x03 e 0x02
	LcdStrobe();
 80008a0:	f000 f848 	bl	8000934 <LcdStrobe>
	HAL_Delay(10);
 80008a4:	200a      	movs	r0, #10
 80008a6:	f000 ffd1 	bl	800184c <HAL_Delay>
    //0010xxxx
	HAL_GPIO_WritePin(PIN_D4_GPIO_Port,PIN_D4_Pin,GPIO_PIN_RESET);
 80008aa:	2200      	movs	r2, #0
 80008ac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008b0:	4809      	ldr	r0, [pc, #36]	; (80008d8 <init_modo_4bit+0x84>)
 80008b2:	f001 fac9 	bl	8001e48 <HAL_GPIO_WritePin>
	LcdStrobe();
 80008b6:	f000 f83d 	bl	8000934 <LcdStrobe>
	HAL_Delay(10);
 80008ba:	200a      	movs	r0, #10
 80008bc:	f000 ffc6 	bl	800184c <HAL_Delay>
	HAL_GPIO_WritePin(PIN_D5_GPIO_Port,PIN_D5_Pin,GPIO_PIN_RESET);
 80008c0:	2200      	movs	r2, #0
 80008c2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008c6:	4803      	ldr	r0, [pc, #12]	; (80008d4 <init_modo_4bit+0x80>)
 80008c8:	f001 fabe 	bl	8001e48 <HAL_GPIO_WritePin>
	//il display ha acquisito la modalit� 4 bit;
	}
 80008cc:	bf00      	nop
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	40020800 	.word	0x40020800
 80008d4:	40020000 	.word	0x40020000
 80008d8:	40020400 	.word	0x40020400

080008dc <SetLCD>:

void SetLCD (void)
 	 {
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
	//Initializza LCD  vedi DisplayTech 204_a_serie.pdf pag 5
	HAL_Delay(10);
 80008e0:	200a      	movs	r0, #10
 80008e2:	f000 ffb3 	bl	800184c <HAL_Delay>
	lcd_cmd(0x28); //0010 1000 Function Set:  4 bit, 2 linee, 5x7
 80008e6:	2028      	movs	r0, #40	; 0x28
 80008e8:	f000 f840 	bl	800096c <lcd_cmd>

	HAL_Delay(10);
 80008ec:	200a      	movs	r0, #10
 80008ee:	f000 ffad 	bl	800184c <HAL_Delay>
	lcd_cmd(0xC);  //0000 1100  Display On, Cursor Off, No Cursor Blink
 80008f2:	200c      	movs	r0, #12
 80008f4:	f000 f83a 	bl	800096c <lcd_cmd>

	HAL_Delay(10);
 80008f8:	200a      	movs	r0, #10
 80008fa:	f000 ffa7 	bl	800184c <HAL_Delay>
	lcd_cmd(0x6);  //0000 0110 Entry Mode  cursore avanti
 80008fe:	2006      	movs	r0, #6
 8000900:	f000 f834 	bl	800096c <lcd_cmd>

	HAL_Delay(10);
 8000904:	200a      	movs	r0, #10
 8000906:	f000 ffa1 	bl	800184c <HAL_Delay>
	lcd_cmd(0x80); //Initialize DDRAM address to zero
 800090a:	2080      	movs	r0, #128	; 0x80
 800090c:	f000 f82e 	bl	800096c <lcd_cmd>

	HAL_Delay(10);
 8000910:	200a      	movs	r0, #10
 8000912:	f000 ff9b 	bl	800184c <HAL_Delay>
	lcd_cmd(0x1);  //0000 0001 Display Clear
 8000916:	2001      	movs	r0, #1
 8000918:	f000 f828 	bl	800096c <lcd_cmd>

	HAL_Delay(10);
 800091c:	200a      	movs	r0, #10
 800091e:	f000 ff95 	bl	800184c <HAL_Delay>
	lcd_cmd(0x2);  //0000 0010 prima posizione
 8000922:	2002      	movs	r0, #2
 8000924:	f000 f822 	bl	800096c <lcd_cmd>

	HAL_Delay(20); //perchè sia chiaro che sto partendo/ripartendo
 8000928:	2014      	movs	r0, #20
 800092a:	f000 ff8f 	bl	800184c <HAL_Delay>
 }
 800092e:	bf00      	nop
 8000930:	bd80      	pop	{r7, pc}
	...

08000934 <LcdStrobe>:




void LcdStrobe(void)
	{
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
	uint8_t i;
	HAL_GPIO_WritePin(PIN_EN_GPIO_Port,PIN_EN_Pin,GPIO_PIN_SET);
 800093a:	2201      	movs	r2, #1
 800093c:	2140      	movs	r1, #64	; 0x40
 800093e:	480a      	ldr	r0, [pc, #40]	; (8000968 <LcdStrobe+0x34>)
 8000940:	f001 fa82 	bl	8001e48 <HAL_GPIO_WritePin>
	for (i=0;i < CICLI_ATTESA_PER_LCD;i++);
 8000944:	2300      	movs	r3, #0
 8000946:	71fb      	strb	r3, [r7, #7]
 8000948:	e002      	b.n	8000950 <LcdStrobe+0x1c>
 800094a:	79fb      	ldrb	r3, [r7, #7]
 800094c:	3301      	adds	r3, #1
 800094e:	71fb      	strb	r3, [r7, #7]
 8000950:	79fb      	ldrb	r3, [r7, #7]
 8000952:	2b09      	cmp	r3, #9
 8000954:	d9f9      	bls.n	800094a <LcdStrobe+0x16>
	HAL_GPIO_WritePin(PIN_EN_GPIO_Port,PIN_EN_Pin,GPIO_PIN_RESET);
 8000956:	2200      	movs	r2, #0
 8000958:	2140      	movs	r1, #64	; 0x40
 800095a:	4803      	ldr	r0, [pc, #12]	; (8000968 <LcdStrobe+0x34>)
 800095c:	f001 fa74 	bl	8001e48 <HAL_GPIO_WritePin>
	}
 8000960:	bf00      	nop
 8000962:	3708      	adds	r7, #8
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	40020800 	.word	0x40020800

0800096c <lcd_cmd>:

void lcd_cmd(uint8_t c)
	{
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
 8000972:	4603      	mov	r3, r0
 8000974:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(2);
 8000976:	2002      	movs	r0, #2
 8000978:	f000 ff68 	bl	800184c <HAL_Delay>
	//HAL_Delay(0);
	HAL_GPIO_WritePin(PIN_RS_GPIO_Port,PIN_RS_Pin,GPIO_PIN_RESET);
 800097c:	2200      	movs	r2, #0
 800097e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000982:	4805      	ldr	r0, [pc, #20]	; (8000998 <lcd_cmd+0x2c>)
 8000984:	f001 fa60 	bl	8001e48 <HAL_GPIO_WritePin>
	CodeOut(c);
 8000988:	79fb      	ldrb	r3, [r7, #7]
 800098a:	4618      	mov	r0, r3
 800098c:	f000 f806 	bl	800099c <CodeOut>
	}
 8000990:	bf00      	nop
 8000992:	3708      	adds	r7, #8
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	40020800 	.word	0x40020800

0800099c <CodeOut>:

void CodeOut(uint8_t c)
	{
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	4603      	mov	r3, r0
 80009a4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(PIN_D7_GPIO_Port,PIN_D7_Pin,GPIO_PIN_RESET);
 80009a6:	2200      	movs	r2, #0
 80009a8:	2120      	movs	r1, #32
 80009aa:	4850      	ldr	r0, [pc, #320]	; (8000aec <CodeOut+0x150>)
 80009ac:	f001 fa4c 	bl	8001e48 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PIN_D6_GPIO_Port,PIN_D6_Pin,GPIO_PIN_RESET);
 80009b0:	2200      	movs	r2, #0
 80009b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009b6:	484e      	ldr	r0, [pc, #312]	; (8000af0 <CodeOut+0x154>)
 80009b8:	f001 fa46 	bl	8001e48 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PIN_D5_GPIO_Port,PIN_D5_Pin,GPIO_PIN_RESET);
 80009bc:	2200      	movs	r2, #0
 80009be:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009c2:	484b      	ldr	r0, [pc, #300]	; (8000af0 <CodeOut+0x154>)
 80009c4:	f001 fa40 	bl	8001e48 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PIN_D4_GPIO_Port,PIN_D4_Pin,GPIO_PIN_RESET);
 80009c8:	2200      	movs	r2, #0
 80009ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009ce:	4849      	ldr	r0, [pc, #292]	; (8000af4 <CodeOut+0x158>)
 80009d0:	f001 fa3a 	bl	8001e48 <HAL_GPIO_WritePin>

	if(c&0x80)
 80009d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009d8:	2b00      	cmp	r3, #0
 80009da:	da04      	bge.n	80009e6 <CodeOut+0x4a>
		HAL_GPIO_WritePin(PIN_D7_GPIO_Port,PIN_D7_Pin,GPIO_PIN_SET);
 80009dc:	2201      	movs	r2, #1
 80009de:	2120      	movs	r1, #32
 80009e0:	4842      	ldr	r0, [pc, #264]	; (8000aec <CodeOut+0x150>)
 80009e2:	f001 fa31 	bl	8001e48 <HAL_GPIO_WritePin>
	if(c&0x40)
 80009e6:	79fb      	ldrb	r3, [r7, #7]
 80009e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d005      	beq.n	80009fc <CodeOut+0x60>
		HAL_GPIO_WritePin(PIN_D6_GPIO_Port,PIN_D6_Pin,GPIO_PIN_SET);
 80009f0:	2201      	movs	r2, #1
 80009f2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009f6:	483e      	ldr	r0, [pc, #248]	; (8000af0 <CodeOut+0x154>)
 80009f8:	f001 fa26 	bl	8001e48 <HAL_GPIO_WritePin>
	if(c&0x20)
 80009fc:	79fb      	ldrb	r3, [r7, #7]
 80009fe:	f003 0320 	and.w	r3, r3, #32
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d005      	beq.n	8000a12 <CodeOut+0x76>
		HAL_GPIO_WritePin(PIN_D5_GPIO_Port,PIN_D5_Pin,GPIO_PIN_SET);
 8000a06:	2201      	movs	r2, #1
 8000a08:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a0c:	4838      	ldr	r0, [pc, #224]	; (8000af0 <CodeOut+0x154>)
 8000a0e:	f001 fa1b 	bl	8001e48 <HAL_GPIO_WritePin>
	if(c&0x10)
 8000a12:	79fb      	ldrb	r3, [r7, #7]
 8000a14:	f003 0310 	and.w	r3, r3, #16
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d005      	beq.n	8000a28 <CodeOut+0x8c>
		HAL_GPIO_WritePin(PIN_D4_GPIO_Port,PIN_D4_Pin,GPIO_PIN_SET);
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a22:	4834      	ldr	r0, [pc, #208]	; (8000af4 <CodeOut+0x158>)
 8000a24:	f001 fa10 	bl	8001e48 <HAL_GPIO_WritePin>
	LcdStrobe();
 8000a28:	f7ff ff84 	bl	8000934 <LcdStrobe>

	HAL_GPIO_WritePin(PIN_D7_GPIO_Port,PIN_D7_Pin,GPIO_PIN_RESET);
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	2120      	movs	r1, #32
 8000a30:	482e      	ldr	r0, [pc, #184]	; (8000aec <CodeOut+0x150>)
 8000a32:	f001 fa09 	bl	8001e48 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PIN_D6_GPIO_Port,PIN_D6_Pin,GPIO_PIN_RESET);
 8000a36:	2200      	movs	r2, #0
 8000a38:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a3c:	482c      	ldr	r0, [pc, #176]	; (8000af0 <CodeOut+0x154>)
 8000a3e:	f001 fa03 	bl	8001e48 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PIN_D5_GPIO_Port,PIN_D5_Pin,GPIO_PIN_RESET);
 8000a42:	2200      	movs	r2, #0
 8000a44:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a48:	4829      	ldr	r0, [pc, #164]	; (8000af0 <CodeOut+0x154>)
 8000a4a:	f001 f9fd 	bl	8001e48 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PIN_D4_GPIO_Port,PIN_D4_Pin,GPIO_PIN_RESET);
 8000a4e:	2200      	movs	r2, #0
 8000a50:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a54:	4827      	ldr	r0, [pc, #156]	; (8000af4 <CodeOut+0x158>)
 8000a56:	f001 f9f7 	bl	8001e48 <HAL_GPIO_WritePin>

	if(c&0x8)
 8000a5a:	79fb      	ldrb	r3, [r7, #7]
 8000a5c:	f003 0308 	and.w	r3, r3, #8
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d004      	beq.n	8000a6e <CodeOut+0xd2>
		HAL_GPIO_WritePin(PIN_D7_GPIO_Port,PIN_D7_Pin,GPIO_PIN_SET);
 8000a64:	2201      	movs	r2, #1
 8000a66:	2120      	movs	r1, #32
 8000a68:	4820      	ldr	r0, [pc, #128]	; (8000aec <CodeOut+0x150>)
 8000a6a:	f001 f9ed 	bl	8001e48 <HAL_GPIO_WritePin>
	if(c&0x4)
 8000a6e:	79fb      	ldrb	r3, [r7, #7]
 8000a70:	f003 0304 	and.w	r3, r3, #4
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d005      	beq.n	8000a84 <CodeOut+0xe8>
		HAL_GPIO_WritePin(PIN_D6_GPIO_Port,PIN_D6_Pin,GPIO_PIN_SET);
 8000a78:	2201      	movs	r2, #1
 8000a7a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a7e:	481c      	ldr	r0, [pc, #112]	; (8000af0 <CodeOut+0x154>)
 8000a80:	f001 f9e2 	bl	8001e48 <HAL_GPIO_WritePin>
	if(c&0x2)
 8000a84:	79fb      	ldrb	r3, [r7, #7]
 8000a86:	f003 0302 	and.w	r3, r3, #2
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d005      	beq.n	8000a9a <CodeOut+0xfe>
		HAL_GPIO_WritePin(PIN_D5_GPIO_Port,PIN_D5_Pin,GPIO_PIN_SET);
 8000a8e:	2201      	movs	r2, #1
 8000a90:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a94:	4816      	ldr	r0, [pc, #88]	; (8000af0 <CodeOut+0x154>)
 8000a96:	f001 f9d7 	bl	8001e48 <HAL_GPIO_WritePin>
	if(c&0x1)
 8000a9a:	79fb      	ldrb	r3, [r7, #7]
 8000a9c:	f003 0301 	and.w	r3, r3, #1
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d005      	beq.n	8000ab0 <CodeOut+0x114>
		HAL_GPIO_WritePin(PIN_D4_GPIO_Port,PIN_D4_Pin,GPIO_PIN_SET);
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000aaa:	4812      	ldr	r0, [pc, #72]	; (8000af4 <CodeOut+0x158>)
 8000aac:	f001 f9cc 	bl	8001e48 <HAL_GPIO_WritePin>
	LcdStrobe();
 8000ab0:	f7ff ff40 	bl	8000934 <LcdStrobe>

	HAL_GPIO_WritePin(PIN_D7_GPIO_Port,PIN_D7_Pin,GPIO_PIN_RESET);
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	2120      	movs	r1, #32
 8000ab8:	480c      	ldr	r0, [pc, #48]	; (8000aec <CodeOut+0x150>)
 8000aba:	f001 f9c5 	bl	8001e48 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PIN_D6_GPIO_Port,PIN_D6_Pin,GPIO_PIN_RESET);
 8000abe:	2200      	movs	r2, #0
 8000ac0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ac4:	480a      	ldr	r0, [pc, #40]	; (8000af0 <CodeOut+0x154>)
 8000ac6:	f001 f9bf 	bl	8001e48 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PIN_D5_GPIO_Port,PIN_D5_Pin,GPIO_PIN_RESET);
 8000aca:	2200      	movs	r2, #0
 8000acc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ad0:	4807      	ldr	r0, [pc, #28]	; (8000af0 <CodeOut+0x154>)
 8000ad2:	f001 f9b9 	bl	8001e48 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PIN_D4_GPIO_Port,PIN_D4_Pin,GPIO_PIN_RESET);
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000adc:	4805      	ldr	r0, [pc, #20]	; (8000af4 <CodeOut+0x158>)
 8000ade:	f001 f9b3 	bl	8001e48 <HAL_GPIO_WritePin>
	}
 8000ae2:	bf00      	nop
 8000ae4:	3708      	adds	r7, #8
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	40020800 	.word	0x40020800
 8000af0:	40020000 	.word	0x40020000
 8000af4:	40020400 	.word	0x40020400

08000af8 <PulisciSchermo>:


void PulisciSchermo(void)   //testata
  	{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
   	lcd_cmd(0x1);
 8000afc:	2001      	movs	r0, #1
 8000afe:	f7ff ff35 	bl	800096c <lcd_cmd>
  	}
 8000b02:	bf00      	nop
 8000b04:	bd80      	pop	{r7, pc}

08000b06 <StampaInteroSuLCD>:

/*
 Stampa un intero nella posizione Colonna Riga
 */
void StampaInteroSuLCD(unsigned char Colonna,unsigned char Riga,uint16_t valore)
	{
 8000b06:	b580      	push	{r7, lr}
 8000b08:	b086      	sub	sp, #24
 8000b0a:	af00      	add	r7, sp, #0
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	71fb      	strb	r3, [r7, #7]
 8000b10:	460b      	mov	r3, r1
 8000b12:	71bb      	strb	r3, [r7, #6]
 8000b14:	4613      	mov	r3, r2
 8000b16:	80bb      	strh	r3, [r7, #4]
	char str[10];
	itoa(valore,str,10);
 8000b18:	88bb      	ldrh	r3, [r7, #4]
 8000b1a:	f107 010c 	add.w	r1, r7, #12
 8000b1e:	220a      	movs	r2, #10
 8000b20:	4618      	mov	r0, r3
 8000b22:	f002 ffc1 	bl	8003aa8 <itoa>
	StampaStringaSuLCD(Colonna,Riga,str);
 8000b26:	f107 020c 	add.w	r2, r7, #12
 8000b2a:	79b9      	ldrb	r1, [r7, #6]
 8000b2c:	79fb      	ldrb	r3, [r7, #7]
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f000 f829 	bl	8000b86 <StampaStringaSuLCD>
	}
 8000b34:	bf00      	nop
 8000b36:	3718      	adds	r7, #24
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}

08000b3c <go_xy>:

/*sposta il cursore su x=colonna, y=riga */
void go_xy(char x,char y)
	{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b084      	sub	sp, #16
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	4603      	mov	r3, r0
 8000b44:	460a      	mov	r2, r1
 8000b46:	71fb      	strb	r3, [r7, #7]
 8000b48:	4613      	mov	r3, r2
 8000b4a:	71bb      	strb	r3, [r7, #6]
	unsigned char base=0;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	73fb      	strb	r3, [r7, #15]
	switch(y)
 8000b50:	79bb      	ldrb	r3, [r7, #6]
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d002      	beq.n	8000b5c <go_xy+0x20>
 8000b56:	2b01      	cmp	r3, #1
 8000b58:	d003      	beq.n	8000b62 <go_xy+0x26>
 8000b5a:	e005      	b.n	8000b68 <go_xy+0x2c>
    	{
    	case 0:
    		base=MIN_PRIMA_RIGA;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	73fb      	strb	r3, [r7, #15]
    	break;
 8000b60:	e002      	b.n	8000b68 <go_xy+0x2c>
    	case 1:
    		base=MIN_SECONDA_RIGA;
 8000b62:	2340      	movs	r3, #64	; 0x40
 8000b64:	73fb      	strb	r3, [r7, #15]
    	break;
 8000b66:	bf00      	nop
    	}
    x+=base;
 8000b68:	79fa      	ldrb	r2, [r7, #7]
 8000b6a:	7bfb      	ldrb	r3, [r7, #15]
 8000b6c:	4413      	add	r3, r2
 8000b6e:	71fb      	strb	r3, [r7, #7]
    lcd_cmd(x|0X80);
 8000b70:	79fb      	ldrb	r3, [r7, #7]
 8000b72:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000b76:	b2db      	uxtb	r3, r3
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f7ff fef7 	bl	800096c <lcd_cmd>
    }
 8000b7e:	bf00      	nop
 8000b80:	3710      	adds	r7, #16
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}

08000b86 <StampaStringaSuLCD>:
 * Stampa una stringa nella posizione colonna, riga (la stringa non deve oltrepassare
 * il bordo
 *
 */
void StampaStringaSuLCD(uint8_t colonna,uint8_t riga, char *p)   //riga e colonna poi stringa
  	{
 8000b86:	b580      	push	{r7, lr}
 8000b88:	b082      	sub	sp, #8
 8000b8a:	af00      	add	r7, sp, #0
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	603a      	str	r2, [r7, #0]
 8000b90:	71fb      	strb	r3, [r7, #7]
 8000b92:	460b      	mov	r3, r1
 8000b94:	71bb      	strb	r3, [r7, #6]
   	go_xy(colonna,riga) ;
 8000b96:	79ba      	ldrb	r2, [r7, #6]
 8000b98:	79fb      	ldrb	r3, [r7, #7]
 8000b9a:	4611      	mov	r1, r2
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f7ff ffcd 	bl	8000b3c <go_xy>
   	lcd_puts(p);
 8000ba2:	6838      	ldr	r0, [r7, #0]
 8000ba4:	f000 f804 	bl	8000bb0 <lcd_puts>
  	}
 8000ba8:	bf00      	nop
 8000baa:	3708      	adds	r7, #8
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}

08000bb0 <lcd_puts>:
	lcd_data(c);
	}

/* stampa il carattere *s*/
void lcd_puts(char * s)
	{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
	while(*s)
 8000bb8:	e006      	b.n	8000bc8 <lcd_puts+0x18>
		lcd_data(*s++);
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	1c5a      	adds	r2, r3, #1
 8000bbe:	607a      	str	r2, [r7, #4]
 8000bc0:	781b      	ldrb	r3, [r3, #0]
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f000 f808 	bl	8000bd8 <lcd_data>
	while(*s)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d1f4      	bne.n	8000bba <lcd_puts+0xa>
	}
 8000bd0:	bf00      	nop
 8000bd2:	3708      	adds	r7, #8
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}

08000bd8 <lcd_data>:

/* Invia un carattere all'LCD */
void lcd_data(unsigned char c)
	{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	4603      	mov	r3, r0
 8000be0:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(0);
 8000be2:	2000      	movs	r0, #0
 8000be4:	f000 fe32 	bl	800184c <HAL_Delay>
	HAL_GPIO_WritePin(PIN_RS_GPIO_Port,PIN_RS_Pin,GPIO_PIN_SET);
 8000be8:	2201      	movs	r2, #1
 8000bea:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bee:	4808      	ldr	r0, [pc, #32]	; (8000c10 <lcd_data+0x38>)
 8000bf0:	f001 f92a 	bl	8001e48 <HAL_GPIO_WritePin>
	CodeOut(c);
 8000bf4:	79fb      	ldrb	r3, [r7, #7]
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f7ff fed0 	bl	800099c <CodeOut>
	HAL_GPIO_WritePin(PIN_RS_GPIO_Port,PIN_RS_Pin,GPIO_PIN_RESET);
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c02:	4803      	ldr	r0, [pc, #12]	; (8000c10 <lcd_data+0x38>)
 8000c04:	f001 f920 	bl	8001e48 <HAL_GPIO_WritePin>
	}
 8000c08:	bf00      	nop
 8000c0a:	3708      	adds	r7, #8
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	40020800 	.word	0x40020800

08000c14 <AttivaPinKeyb4x4>:


unsigned char  TastoPremuto=0;

void AttivaPinKeyb4x4(uint8_t index)
	{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	71fb      	strb	r3, [r7, #7]
	/* provoco la rotazione del bit '0'*/

	HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin,GPIO_PIN_SET);
 8000c1e:	2201      	movs	r2, #1
 8000c20:	2101      	movs	r1, #1
 8000c22:	481e      	ldr	r0, [pc, #120]	; (8000c9c <AttivaPinKeyb4x4+0x88>)
 8000c24:	f001 f910 	bl	8001e48 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin,GPIO_PIN_SET);
 8000c28:	2201      	movs	r2, #1
 8000c2a:	2102      	movs	r1, #2
 8000c2c:	481b      	ldr	r0, [pc, #108]	; (8000c9c <AttivaPinKeyb4x4+0x88>)
 8000c2e:	f001 f90b 	bl	8001e48 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R3_GPIO_Port, R3_Pin,GPIO_PIN_SET);
 8000c32:	2201      	movs	r2, #1
 8000c34:	2101      	movs	r1, #1
 8000c36:	481a      	ldr	r0, [pc, #104]	; (8000ca0 <AttivaPinKeyb4x4+0x8c>)
 8000c38:	f001 f906 	bl	8001e48 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R4_GPIO_Port, R4_Pin,GPIO_PIN_SET);
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	2110      	movs	r1, #16
 8000c40:	4818      	ldr	r0, [pc, #96]	; (8000ca4 <AttivaPinKeyb4x4+0x90>)
 8000c42:	f001 f901 	bl	8001e48 <HAL_GPIO_WritePin>
	switch(index)
 8000c46:	79fb      	ldrb	r3, [r7, #7]
 8000c48:	2b03      	cmp	r3, #3
 8000c4a:	d823      	bhi.n	8000c94 <AttivaPinKeyb4x4+0x80>
 8000c4c:	a201      	add	r2, pc, #4	; (adr r2, 8000c54 <AttivaPinKeyb4x4+0x40>)
 8000c4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c52:	bf00      	nop
 8000c54:	08000c65 	.word	0x08000c65
 8000c58:	08000c71 	.word	0x08000c71
 8000c5c:	08000c7d 	.word	0x08000c7d
 8000c60:	08000c89 	.word	0x08000c89
		{
		case 0:
			HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin,GPIO_PIN_RESET);
 8000c64:	2200      	movs	r2, #0
 8000c66:	2101      	movs	r1, #1
 8000c68:	480c      	ldr	r0, [pc, #48]	; (8000c9c <AttivaPinKeyb4x4+0x88>)
 8000c6a:	f001 f8ed 	bl	8001e48 <HAL_GPIO_WritePin>
		break;
 8000c6e:	e011      	b.n	8000c94 <AttivaPinKeyb4x4+0x80>
		case 1:
			HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin,GPIO_PIN_RESET);
 8000c70:	2200      	movs	r2, #0
 8000c72:	2102      	movs	r1, #2
 8000c74:	4809      	ldr	r0, [pc, #36]	; (8000c9c <AttivaPinKeyb4x4+0x88>)
 8000c76:	f001 f8e7 	bl	8001e48 <HAL_GPIO_WritePin>
		break;
 8000c7a:	e00b      	b.n	8000c94 <AttivaPinKeyb4x4+0x80>
		case 2:
			HAL_GPIO_WritePin(R3_GPIO_Port, R3_Pin,GPIO_PIN_RESET);
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	2101      	movs	r1, #1
 8000c80:	4807      	ldr	r0, [pc, #28]	; (8000ca0 <AttivaPinKeyb4x4+0x8c>)
 8000c82:	f001 f8e1 	bl	8001e48 <HAL_GPIO_WritePin>
		break;
 8000c86:	e005      	b.n	8000c94 <AttivaPinKeyb4x4+0x80>
		case 3:
			HAL_GPIO_WritePin(R4_GPIO_Port, R4_Pin,GPIO_PIN_RESET);
 8000c88:	2200      	movs	r2, #0
 8000c8a:	2110      	movs	r1, #16
 8000c8c:	4805      	ldr	r0, [pc, #20]	; (8000ca4 <AttivaPinKeyb4x4+0x90>)
 8000c8e:	f001 f8db 	bl	8001e48 <HAL_GPIO_WritePin>
		break;
 8000c92:	bf00      	nop
		}

	}
 8000c94:	bf00      	nop
 8000c96:	3708      	adds	r7, #8
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	40020800 	.word	0x40020800
 8000ca0:	40020400 	.word	0x40020400
 8000ca4:	40020000 	.word	0x40020000

08000ca8 <StartKeyb4x4>:

void StartKeyb4x4(void)
	{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
    CicloKeyb4x4Attivo=1;
 8000cac:	4b06      	ldr	r3, [pc, #24]	; (8000cc8 <StartKeyb4x4+0x20>)
 8000cae:	2201      	movs	r2, #1
 8000cb0:	701a      	strb	r2, [r3, #0]
    DurataValoreBasso=DURATA_VALORE_BASSO;
 8000cb2:	4b06      	ldr	r3, [pc, #24]	; (8000ccc <StartKeyb4x4+0x24>)
 8000cb4:	220a      	movs	r2, #10
 8000cb6:	801a      	strh	r2, [r3, #0]
    AttivaPinKeyb4x4(IndiceCicloKeyb4x4);
 8000cb8:	4b05      	ldr	r3, [pc, #20]	; (8000cd0 <StartKeyb4x4+0x28>)
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f7ff ffa9 	bl	8000c14 <AttivaPinKeyb4x4>
	}
 8000cc2:	bf00      	nop
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	20000035 	.word	0x20000035
 8000ccc:	20000046 	.word	0x20000046
 8000cd0:	20000034 	.word	0x20000034

08000cd4 <GestioneRigheMatriceKeyb4x4>:

/*
 * funzione utilizzata per i tempi di antirimbalzo e per la rotazione dello '0' sulle varie righe
 */
void GestioneRigheMatriceKeyb4x4(void)
	{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0

	if(TempoAR_Keyb4x4)   //se è attivo un tempo antirimbalzo
 8000cd8:	4b1c      	ldr	r3, [pc, #112]	; (8000d4c <GestioneRigheMatriceKeyb4x4+0x78>)
 8000cda:	881b      	ldrh	r3, [r3, #0]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d00f      	beq.n	8000d00 <GestioneRigheMatriceKeyb4x4+0x2c>
		{
		TempoAR_Keyb4x4--;
 8000ce0:	4b1a      	ldr	r3, [pc, #104]	; (8000d4c <GestioneRigheMatriceKeyb4x4+0x78>)
 8000ce2:	881b      	ldrh	r3, [r3, #0]
 8000ce4:	3b01      	subs	r3, #1
 8000ce6:	b29a      	uxth	r2, r3
 8000ce8:	4b18      	ldr	r3, [pc, #96]	; (8000d4c <GestioneRigheMatriceKeyb4x4+0x78>)
 8000cea:	801a      	strh	r2, [r3, #0]
		if(!TempoAR_Keyb4x4)
 8000cec:	4b17      	ldr	r3, [pc, #92]	; (8000d4c <GestioneRigheMatriceKeyb4x4+0x78>)
 8000cee:	881b      	ldrh	r3, [r3, #0]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d105      	bne.n	8000d00 <GestioneRigheMatriceKeyb4x4+0x2c>
			{
			RiconosciTastoAttivato();
 8000cf4:	f000 f832 	bl	8000d5c <RiconosciTastoAttivato>
			HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000cf8:	2017      	movs	r0, #23
 8000cfa:	f000 fee2 	bl	8001ac2 <HAL_NVIC_EnableIRQ>
			return;
 8000cfe:	e024      	b.n	8000d4a <GestioneRigheMatriceKeyb4x4+0x76>
			}
		}

	if(!CicloKeyb4x4Attivo) return;   //se NON devo far ruotare lo '0',esco
 8000d00:	4b13      	ldr	r3, [pc, #76]	; (8000d50 <GestioneRigheMatriceKeyb4x4+0x7c>)
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d01f      	beq.n	8000d48 <GestioneRigheMatriceKeyb4x4+0x74>
	DurataValoreBasso--;
 8000d08:	4b12      	ldr	r3, [pc, #72]	; (8000d54 <GestioneRigheMatriceKeyb4x4+0x80>)
 8000d0a:	881b      	ldrh	r3, [r3, #0]
 8000d0c:	3b01      	subs	r3, #1
 8000d0e:	b29a      	uxth	r2, r3
 8000d10:	4b10      	ldr	r3, [pc, #64]	; (8000d54 <GestioneRigheMatriceKeyb4x4+0x80>)
 8000d12:	801a      	strh	r2, [r3, #0]
	if(!DurataValoreBasso)
 8000d14:	4b0f      	ldr	r3, [pc, #60]	; (8000d54 <GestioneRigheMatriceKeyb4x4+0x80>)
 8000d16:	881b      	ldrh	r3, [r3, #0]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d116      	bne.n	8000d4a <GestioneRigheMatriceKeyb4x4+0x76>
		{
		IndiceCicloKeyb4x4++;
 8000d1c:	4b0e      	ldr	r3, [pc, #56]	; (8000d58 <GestioneRigheMatriceKeyb4x4+0x84>)
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	3301      	adds	r3, #1
 8000d22:	b2da      	uxtb	r2, r3
 8000d24:	4b0c      	ldr	r3, [pc, #48]	; (8000d58 <GestioneRigheMatriceKeyb4x4+0x84>)
 8000d26:	701a      	strb	r2, [r3, #0]
		if (IndiceCicloKeyb4x4>3)
 8000d28:	4b0b      	ldr	r3, [pc, #44]	; (8000d58 <GestioneRigheMatriceKeyb4x4+0x84>)
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	2b03      	cmp	r3, #3
 8000d2e:	d902      	bls.n	8000d36 <GestioneRigheMatriceKeyb4x4+0x62>
				IndiceCicloKeyb4x4=0;
 8000d30:	4b09      	ldr	r3, [pc, #36]	; (8000d58 <GestioneRigheMatriceKeyb4x4+0x84>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	701a      	strb	r2, [r3, #0]
		AttivaPinKeyb4x4(IndiceCicloKeyb4x4);
 8000d36:	4b08      	ldr	r3, [pc, #32]	; (8000d58 <GestioneRigheMatriceKeyb4x4+0x84>)
 8000d38:	781b      	ldrb	r3, [r3, #0]
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f7ff ff6a 	bl	8000c14 <AttivaPinKeyb4x4>
		DurataValoreBasso=DURATA_VALORE_BASSO;
 8000d40:	4b04      	ldr	r3, [pc, #16]	; (8000d54 <GestioneRigheMatriceKeyb4x4+0x80>)
 8000d42:	220a      	movs	r2, #10
 8000d44:	801a      	strh	r2, [r3, #0]
 8000d46:	e000      	b.n	8000d4a <GestioneRigheMatriceKeyb4x4+0x76>
	if(!CicloKeyb4x4Attivo) return;   //se NON devo far ruotare lo '0',esco
 8000d48:	bf00      	nop
		}
	}
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	20000044 	.word	0x20000044
 8000d50:	20000035 	.word	0x20000035
 8000d54:	20000046 	.word	0x20000046
 8000d58:	20000034 	.word	0x20000034

08000d5c <RiconosciTastoAttivato>:


void RiconosciTastoAttivato(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
	uint8_t TastoAttivo=0;
 8000d62:	2300      	movs	r3, #0
 8000d64:	71fb      	strb	r3, [r7, #7]
	static uint8_t TastoAttivoPrec=0;
	static int8_t nTasti=0;
	switch(PinAttivato) //riconosco eventuale tasto premuto
 8000d66:	4b5d      	ldr	r3, [pc, #372]	; (8000edc <RiconosciTastoAttivato+0x180>)
 8000d68:	881b      	ldrh	r3, [r3, #0]
 8000d6a:	2b40      	cmp	r3, #64	; 0x40
 8000d6c:	d019      	beq.n	8000da2 <RiconosciTastoAttivato+0x46>
 8000d6e:	2b40      	cmp	r3, #64	; 0x40
 8000d70:	dc02      	bgt.n	8000d78 <RiconosciTastoAttivato+0x1c>
 8000d72:	2b20      	cmp	r3, #32
 8000d74:	d006      	beq.n	8000d84 <RiconosciTastoAttivato+0x28>
 8000d76:	e049      	b.n	8000e0c <RiconosciTastoAttivato+0xb0>
 8000d78:	2b80      	cmp	r3, #128	; 0x80
 8000d7a:	d021      	beq.n	8000dc0 <RiconosciTastoAttivato+0x64>
 8000d7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000d80:	d02d      	beq.n	8000dde <RiconosciTastoAttivato+0x82>
 8000d82:	e043      	b.n	8000e0c <RiconosciTastoAttivato+0xb0>
		{
		case C1_Pin:
			if(!HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin))
 8000d84:	2120      	movs	r1, #32
 8000d86:	4856      	ldr	r0, [pc, #344]	; (8000ee0 <RiconosciTastoAttivato+0x184>)
 8000d88:	f001 f846 	bl	8001e18 <HAL_GPIO_ReadPin>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d135      	bne.n	8000dfe <RiconosciTastoAttivato+0xa2>
				TastoAttivo=TastiKeyb4x4[IndiceCicloKeyb4x4][0];
 8000d92:	4b54      	ldr	r3, [pc, #336]	; (8000ee4 <RiconosciTastoAttivato+0x188>)
 8000d94:	781b      	ldrb	r3, [r3, #0]
 8000d96:	461a      	mov	r2, r3
 8000d98:	4b53      	ldr	r3, [pc, #332]	; (8000ee8 <RiconosciTastoAttivato+0x18c>)
 8000d9a:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 8000d9e:	71fb      	strb	r3, [r7, #7]

		break;
 8000da0:	e02d      	b.n	8000dfe <RiconosciTastoAttivato+0xa2>
		case C2_Pin:
			if(!HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin))
 8000da2:	2140      	movs	r1, #64	; 0x40
 8000da4:	4851      	ldr	r0, [pc, #324]	; (8000eec <RiconosciTastoAttivato+0x190>)
 8000da6:	f001 f837 	bl	8001e18 <HAL_GPIO_ReadPin>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d128      	bne.n	8000e02 <RiconosciTastoAttivato+0xa6>
				TastoAttivo=TastiKeyb4x4[IndiceCicloKeyb4x4][1];
 8000db0:	4b4c      	ldr	r3, [pc, #304]	; (8000ee4 <RiconosciTastoAttivato+0x188>)
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	4a4c      	ldr	r2, [pc, #304]	; (8000ee8 <RiconosciTastoAttivato+0x18c>)
 8000db6:	009b      	lsls	r3, r3, #2
 8000db8:	4413      	add	r3, r2
 8000dba:	785b      	ldrb	r3, [r3, #1]
 8000dbc:	71fb      	strb	r3, [r7, #7]
		break;
 8000dbe:	e020      	b.n	8000e02 <RiconosciTastoAttivato+0xa6>
		case C3_Pin:
			if(!HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin))
 8000dc0:	2180      	movs	r1, #128	; 0x80
 8000dc2:	484b      	ldr	r0, [pc, #300]	; (8000ef0 <RiconosciTastoAttivato+0x194>)
 8000dc4:	f001 f828 	bl	8001e18 <HAL_GPIO_ReadPin>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d11b      	bne.n	8000e06 <RiconosciTastoAttivato+0xaa>
				TastoAttivo=TastiKeyb4x4[IndiceCicloKeyb4x4][2];
 8000dce:	4b45      	ldr	r3, [pc, #276]	; (8000ee4 <RiconosciTastoAttivato+0x188>)
 8000dd0:	781b      	ldrb	r3, [r3, #0]
 8000dd2:	4a45      	ldr	r2, [pc, #276]	; (8000ee8 <RiconosciTastoAttivato+0x18c>)
 8000dd4:	009b      	lsls	r3, r3, #2
 8000dd6:	4413      	add	r3, r2
 8000dd8:	789b      	ldrb	r3, [r3, #2]
 8000dda:	71fb      	strb	r3, [r7, #7]
		break;
 8000ddc:	e013      	b.n	8000e06 <RiconosciTastoAttivato+0xaa>
		case C4_Pin:
			if(!HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin))
 8000dde:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000de2:	483f      	ldr	r0, [pc, #252]	; (8000ee0 <RiconosciTastoAttivato+0x184>)
 8000de4:	f001 f818 	bl	8001e18 <HAL_GPIO_ReadPin>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d10d      	bne.n	8000e0a <RiconosciTastoAttivato+0xae>
				TastoAttivo=TastiKeyb4x4[IndiceCicloKeyb4x4][3];
 8000dee:	4b3d      	ldr	r3, [pc, #244]	; (8000ee4 <RiconosciTastoAttivato+0x188>)
 8000df0:	781b      	ldrb	r3, [r3, #0]
 8000df2:	4a3d      	ldr	r2, [pc, #244]	; (8000ee8 <RiconosciTastoAttivato+0x18c>)
 8000df4:	009b      	lsls	r3, r3, #2
 8000df6:	4413      	add	r3, r2
 8000df8:	78db      	ldrb	r3, [r3, #3]
 8000dfa:	71fb      	strb	r3, [r7, #7]
		break;
 8000dfc:	e005      	b.n	8000e0a <RiconosciTastoAttivato+0xae>
		break;
 8000dfe:	bf00      	nop
 8000e00:	e004      	b.n	8000e0c <RiconosciTastoAttivato+0xb0>
		break;
 8000e02:	bf00      	nop
 8000e04:	e002      	b.n	8000e0c <RiconosciTastoAttivato+0xb0>
		break;
 8000e06:	bf00      	nop
 8000e08:	e000      	b.n	8000e0c <RiconosciTastoAttivato+0xb0>
		break;
 8000e0a:	bf00      	nop
		}

	 if(!TastoAttivo)  //era un rilascio
 8000e0c:	79fb      	ldrb	r3, [r7, #7]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d11c      	bne.n	8000e4c <RiconosciTastoAttivato+0xf0>
	 	{
		if(nTasti)     //
 8000e12:	4b38      	ldr	r3, [pc, #224]	; (8000ef4 <RiconosciTastoAttivato+0x198>)
 8000e14:	f993 3000 	ldrsb.w	r3, [r3]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d008      	beq.n	8000e2e <RiconosciTastoAttivato+0xd2>
			nTasti--;
 8000e1c:	4b35      	ldr	r3, [pc, #212]	; (8000ef4 <RiconosciTastoAttivato+0x198>)
 8000e1e:	f993 3000 	ldrsb.w	r3, [r3]
 8000e22:	b2db      	uxtb	r3, r3
 8000e24:	3b01      	subs	r3, #1
 8000e26:	b2db      	uxtb	r3, r3
 8000e28:	b25a      	sxtb	r2, r3
 8000e2a:	4b32      	ldr	r3, [pc, #200]	; (8000ef4 <RiconosciTastoAttivato+0x198>)
 8000e2c:	701a      	strb	r2, [r3, #0]
	 	if(!nTasti)
 8000e2e:	4b31      	ldr	r3, [pc, #196]	; (8000ef4 <RiconosciTastoAttivato+0x198>)
 8000e30:	f993 3000 	ldrsb.w	r3, [r3]
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d14c      	bne.n	8000ed2 <RiconosciTastoAttivato+0x176>
	 	//Devo verificare che su altre righe vi siano tasti premuti, contarli ...
	 		{
	 		//Verifica che su altre righe vi siano tasti premuti, e li conta (NON SCRITTA)
	 		//nTasti=ContaTastiPremuti();
	 		DurataValoreBasso=DURATA_VALORE_BASSO;
 8000e38:	4b2f      	ldr	r3, [pc, #188]	; (8000ef8 <RiconosciTastoAttivato+0x19c>)
 8000e3a:	220a      	movs	r2, #10
 8000e3c:	801a      	strh	r2, [r3, #0]
	 		CicloKeyb4x4Attivo=1;   // al rilascio, riattivo il ciclo
 8000e3e:	4b2f      	ldr	r3, [pc, #188]	; (8000efc <RiconosciTastoAttivato+0x1a0>)
 8000e40:	2201      	movs	r2, #1
 8000e42:	701a      	strb	r2, [r3, #0]
	 		TastoAttivoPrec=0;
 8000e44:	4b2e      	ldr	r3, [pc, #184]	; (8000f00 <RiconosciTastoAttivato+0x1a4>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	701a      	strb	r2, [r3, #0]
	 	}//pubblico il tasto primario su una  riga
	 	if(TastoAttivo!=TastoAttivoPrec)   //conteggio di tasti premuti sulla
	 		nTasti++;                      //sulla stessa riga anche diversi dal primario
	 	TastoAttivoPrec=TastoAttivo;       //su questo devo ripensarci bene....
	 	}
	}
 8000e4a:	e042      	b.n	8000ed2 <RiconosciTastoAttivato+0x176>
	 	if(!nTasti){
 8000e4c:	4b29      	ldr	r3, [pc, #164]	; (8000ef4 <RiconosciTastoAttivato+0x198>)
 8000e4e:	f993 3000 	ldrsb.w	r3, [r3]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d12c      	bne.n	8000eb0 <RiconosciTastoAttivato+0x154>
	 		TastoPremuto=TastoAttivo;
 8000e56:	4a2b      	ldr	r2, [pc, #172]	; (8000f04 <RiconosciTastoAttivato+0x1a8>)
 8000e58:	79fb      	ldrb	r3, [r7, #7]
 8000e5a:	7013      	strb	r3, [r2, #0]
	 		cursore++;
 8000e5c:	4b2a      	ldr	r3, [pc, #168]	; (8000f08 <RiconosciTastoAttivato+0x1ac>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	3301      	adds	r3, #1
 8000e62:	4a29      	ldr	r2, [pc, #164]	; (8000f08 <RiconosciTastoAttivato+0x1ac>)
 8000e64:	6013      	str	r3, [r2, #0]
	 		if(cursore!=6){
 8000e66:	4b28      	ldr	r3, [pc, #160]	; (8000f08 <RiconosciTastoAttivato+0x1ac>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	2b06      	cmp	r3, #6
 8000e6c:	d00a      	beq.n	8000e84 <RiconosciTastoAttivato+0x128>
	 			lettera[cursore]=TastoAttivo;
 8000e6e:	4b26      	ldr	r3, [pc, #152]	; (8000f08 <RiconosciTastoAttivato+0x1ac>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	4926      	ldr	r1, [pc, #152]	; (8000f0c <RiconosciTastoAttivato+0x1b0>)
 8000e74:	79fa      	ldrb	r2, [r7, #7]
 8000e76:	54ca      	strb	r2, [r1, r3]
	 			password[cursore] = TastiKeyb4x4[3][0];
 8000e78:	4b23      	ldr	r3, [pc, #140]	; (8000f08 <RiconosciTastoAttivato+0x1ac>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	212a      	movs	r1, #42	; 0x2a
 8000e7e:	4a24      	ldr	r2, [pc, #144]	; (8000f10 <RiconosciTastoAttivato+0x1b4>)
 8000e80:	54d1      	strb	r1, [r2, r3]
 8000e82:	e015      	b.n	8000eb0 <RiconosciTastoAttivato+0x154>
	 			cursore=-1;
 8000e84:	4b20      	ldr	r3, [pc, #128]	; (8000f08 <RiconosciTastoAttivato+0x1ac>)
 8000e86:	f04f 32ff 	mov.w	r2, #4294967295
 8000e8a:	601a      	str	r2, [r3, #0]
	 			memset(lettera,0,strlen(lettera));
 8000e8c:	481f      	ldr	r0, [pc, #124]	; (8000f0c <RiconosciTastoAttivato+0x1b0>)
 8000e8e:	f7ff f9ab 	bl	80001e8 <strlen>
 8000e92:	4603      	mov	r3, r0
 8000e94:	461a      	mov	r2, r3
 8000e96:	2100      	movs	r1, #0
 8000e98:	481c      	ldr	r0, [pc, #112]	; (8000f0c <RiconosciTastoAttivato+0x1b0>)
 8000e9a:	f002 fe07 	bl	8003aac <memset>
	 			memset(password,0,strlen(password));
 8000e9e:	481c      	ldr	r0, [pc, #112]	; (8000f10 <RiconosciTastoAttivato+0x1b4>)
 8000ea0:	f7ff f9a2 	bl	80001e8 <strlen>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	461a      	mov	r2, r3
 8000ea8:	2100      	movs	r1, #0
 8000eaa:	4819      	ldr	r0, [pc, #100]	; (8000f10 <RiconosciTastoAttivato+0x1b4>)
 8000eac:	f002 fdfe 	bl	8003aac <memset>
	 	if(TastoAttivo!=TastoAttivoPrec)   //conteggio di tasti premuti sulla
 8000eb0:	4b13      	ldr	r3, [pc, #76]	; (8000f00 <RiconosciTastoAttivato+0x1a4>)
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	79fa      	ldrb	r2, [r7, #7]
 8000eb6:	429a      	cmp	r2, r3
 8000eb8:	d008      	beq.n	8000ecc <RiconosciTastoAttivato+0x170>
	 		nTasti++;                      //sulla stessa riga anche diversi dal primario
 8000eba:	4b0e      	ldr	r3, [pc, #56]	; (8000ef4 <RiconosciTastoAttivato+0x198>)
 8000ebc:	f993 3000 	ldrsb.w	r3, [r3]
 8000ec0:	b2db      	uxtb	r3, r3
 8000ec2:	3301      	adds	r3, #1
 8000ec4:	b2db      	uxtb	r3, r3
 8000ec6:	b25a      	sxtb	r2, r3
 8000ec8:	4b0a      	ldr	r3, [pc, #40]	; (8000ef4 <RiconosciTastoAttivato+0x198>)
 8000eca:	701a      	strb	r2, [r3, #0]
	 	TastoAttivoPrec=TastoAttivo;       //su questo devo ripensarci bene....
 8000ecc:	4a0c      	ldr	r2, [pc, #48]	; (8000f00 <RiconosciTastoAttivato+0x1a4>)
 8000ece:	79fb      	ldrb	r3, [r7, #7]
 8000ed0:	7013      	strb	r3, [r2, #0]
	}
 8000ed2:	bf00      	nop
 8000ed4:	3708      	adds	r7, #8
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	20000048 	.word	0x20000048
 8000ee0:	40020000 	.word	0x40020000
 8000ee4:	20000034 	.word	0x20000034
 8000ee8:	08003bb0 	.word	0x08003bb0
 8000eec:	40020400 	.word	0x40020400
 8000ef0:	40020800 	.word	0x40020800
 8000ef4:	20000037 	.word	0x20000037
 8000ef8:	20000046 	.word	0x20000046
 8000efc:	20000035 	.word	0x20000035
 8000f00:	20000038 	.word	0x20000038
 8000f04:	20000036 	.word	0x20000036
 8000f08:	20000000 	.word	0x20000000
 8000f0c:	20000058 	.word	0x20000058
 8000f10:	2000004c 	.word	0x2000004c

08000f14 <GestioneEXTI_Keyb4x4>:


void GestioneEXTI_Keyb4x4(uint16_t GPIO_Pin)
	{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	80fb      	strh	r3, [r7, #6]
	CicloKeyb4x4Attivo=0;                 //dichiaro il ciclo di rotazione dello '0'non attivo
 8000f1e:	4b08      	ldr	r3, [pc, #32]	; (8000f40 <GestioneEXTI_Keyb4x4+0x2c>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	701a      	strb	r2, [r3, #0]
	HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);  //disabilito interruzioni 10-15
 8000f24:	2017      	movs	r0, #23
 8000f26:	f000 fdda 	bl	8001ade <HAL_NVIC_DisableIRQ>
	TempoAR_Keyb4x4=TEMPO_AR_KEYB4x4;     //per un tempo di antirimbalzo
 8000f2a:	4b06      	ldr	r3, [pc, #24]	; (8000f44 <GestioneEXTI_Keyb4x4+0x30>)
 8000f2c:	2264      	movs	r2, #100	; 0x64
 8000f2e:	801a      	strh	r2, [r3, #0]
	PinAttivato= GPIO_Pin;                //catturo il pin attivato
 8000f30:	4a05      	ldr	r2, [pc, #20]	; (8000f48 <GestioneEXTI_Keyb4x4+0x34>)
 8000f32:	88fb      	ldrh	r3, [r7, #6]
 8000f34:	8013      	strh	r3, [r2, #0]
	}
 8000f36:	bf00      	nop
 8000f38:	3708      	adds	r7, #8
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	20000035 	.word	0x20000035
 8000f44:	20000044 	.word	0x20000044
 8000f48:	20000048 	.word	0x20000048

08000f4c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b08a      	sub	sp, #40	; 0x28
 8000f50:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f52:	f107 0314 	add.w	r3, r7, #20
 8000f56:	2200      	movs	r2, #0
 8000f58:	601a      	str	r2, [r3, #0]
 8000f5a:	605a      	str	r2, [r3, #4]
 8000f5c:	609a      	str	r2, [r3, #8]
 8000f5e:	60da      	str	r2, [r3, #12]
 8000f60:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f62:	2300      	movs	r3, #0
 8000f64:	613b      	str	r3, [r7, #16]
 8000f66:	4b6f      	ldr	r3, [pc, #444]	; (8001124 <MX_GPIO_Init+0x1d8>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6a:	4a6e      	ldr	r2, [pc, #440]	; (8001124 <MX_GPIO_Init+0x1d8>)
 8000f6c:	f043 0304 	orr.w	r3, r3, #4
 8000f70:	6313      	str	r3, [r2, #48]	; 0x30
 8000f72:	4b6c      	ldr	r3, [pc, #432]	; (8001124 <MX_GPIO_Init+0x1d8>)
 8000f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f76:	f003 0304 	and.w	r3, r3, #4
 8000f7a:	613b      	str	r3, [r7, #16]
 8000f7c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f7e:	2300      	movs	r3, #0
 8000f80:	60fb      	str	r3, [r7, #12]
 8000f82:	4b68      	ldr	r3, [pc, #416]	; (8001124 <MX_GPIO_Init+0x1d8>)
 8000f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f86:	4a67      	ldr	r2, [pc, #412]	; (8001124 <MX_GPIO_Init+0x1d8>)
 8000f88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f8e:	4b65      	ldr	r3, [pc, #404]	; (8001124 <MX_GPIO_Init+0x1d8>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f96:	60fb      	str	r3, [r7, #12]
 8000f98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	60bb      	str	r3, [r7, #8]
 8000f9e:	4b61      	ldr	r3, [pc, #388]	; (8001124 <MX_GPIO_Init+0x1d8>)
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa2:	4a60      	ldr	r2, [pc, #384]	; (8001124 <MX_GPIO_Init+0x1d8>)
 8000fa4:	f043 0301 	orr.w	r3, r3, #1
 8000fa8:	6313      	str	r3, [r2, #48]	; 0x30
 8000faa:	4b5e      	ldr	r3, [pc, #376]	; (8001124 <MX_GPIO_Init+0x1d8>)
 8000fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fae:	f003 0301 	and.w	r3, r3, #1
 8000fb2:	60bb      	str	r3, [r7, #8]
 8000fb4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	607b      	str	r3, [r7, #4]
 8000fba:	4b5a      	ldr	r3, [pc, #360]	; (8001124 <MX_GPIO_Init+0x1d8>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fbe:	4a59      	ldr	r2, [pc, #356]	; (8001124 <MX_GPIO_Init+0x1d8>)
 8000fc0:	f043 0302 	orr.w	r3, r3, #2
 8000fc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fc6:	4b57      	ldr	r3, [pc, #348]	; (8001124 <MX_GPIO_Init+0x1d8>)
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fca:	f003 0302 	and.w	r3, r3, #2
 8000fce:	607b      	str	r3, [r7, #4]
 8000fd0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, R1_Pin|R2_Pin, GPIO_PIN_SET);
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	2103      	movs	r1, #3
 8000fd6:	4854      	ldr	r0, [pc, #336]	; (8001128 <MX_GPIO_Init+0x1dc>)
 8000fd8:	f000 ff36 	bl	8001e48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(R4_GPIO_Port, R4_Pin, GPIO_PIN_SET);
 8000fdc:	2201      	movs	r2, #1
 8000fde:	2110      	movs	r1, #16
 8000fe0:	4852      	ldr	r0, [pc, #328]	; (800112c <MX_GPIO_Init+0x1e0>)
 8000fe2:	f000 ff31 	bl	8001e48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, WHITE_LED_Pin|PIN_D5_Pin|PIN_D6_Pin, GPIO_PIN_RESET);
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 8000fec:	484f      	ldr	r0, [pc, #316]	; (800112c <MX_GPIO_Init+0x1e0>)
 8000fee:	f000 ff2b 	bl	8001e48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, PIN_D7_Pin|PIN_EN_Pin|PIN_RS_Pin, GPIO_PIN_RESET);
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8000ff8:	484b      	ldr	r0, [pc, #300]	; (8001128 <MX_GPIO_Init+0x1dc>)
 8000ffa:	f000 ff25 	bl	8001e48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(R3_GPIO_Port, R3_Pin, GPIO_PIN_SET);
 8000ffe:	2201      	movs	r2, #1
 8001000:	2101      	movs	r1, #1
 8001002:	484b      	ldr	r0, [pc, #300]	; (8001130 <MX_GPIO_Init+0x1e4>)
 8001004:	f000 ff20 	bl	8001e48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RED_LED_Pin|PIN_D4_Pin|GREEN_LED_Pin|YELLOW_LED_Pin, GPIO_PIN_RESET);
 8001008:	2200      	movs	r2, #0
 800100a:	f44f 51b8 	mov.w	r1, #5888	; 0x1700
 800100e:	4848      	ldr	r0, [pc, #288]	; (8001130 <MX_GPIO_Init+0x1e4>)
 8001010:	f000 ff1a 	bl	8001e48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001014:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001018:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800101a:	4b46      	ldr	r3, [pc, #280]	; (8001134 <MX_GPIO_Init+0x1e8>)
 800101c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800101e:	2301      	movs	r3, #1
 8001020:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001022:	f107 0314 	add.w	r3, r7, #20
 8001026:	4619      	mov	r1, r3
 8001028:	483f      	ldr	r0, [pc, #252]	; (8001128 <MX_GPIO_Init+0x1dc>)
 800102a:	f000 fd73 	bl	8001b14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin 
                           PCPin */
  GPIO_InitStruct.Pin = R1_Pin|R2_Pin|PIN_D7_Pin|PIN_EN_Pin 
 800102e:	f240 1363 	movw	r3, #355	; 0x163
 8001032:	617b      	str	r3, [r7, #20]
                          |PIN_RS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001034:	2301      	movs	r3, #1
 8001036:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001038:	2300      	movs	r3, #0
 800103a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800103c:	2300      	movs	r3, #0
 800103e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001040:	f107 0314 	add.w	r3, r7, #20
 8001044:	4619      	mov	r1, r3
 8001046:	4838      	ldr	r0, [pc, #224]	; (8001128 <MX_GPIO_Init+0x1dc>)
 8001048:	f000 fd64 	bl	8001b14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PIR_Pin;
 800104c:	2308      	movs	r3, #8
 800104e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001050:	4b39      	ldr	r3, [pc, #228]	; (8001138 <MX_GPIO_Init+0x1ec>)
 8001052:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001054:	2301      	movs	r3, #1
 8001056:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PIR_GPIO_Port, &GPIO_InitStruct);
 8001058:	f107 0314 	add.w	r3, r7, #20
 800105c:	4619      	mov	r1, r3
 800105e:	4832      	ldr	r0, [pc, #200]	; (8001128 <MX_GPIO_Init+0x1dc>)
 8001060:	f000 fd58 	bl	8001b14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = R4_Pin|WHITE_LED_Pin|PIN_D5_Pin|PIN_D6_Pin;
 8001064:	f641 0350 	movw	r3, #6224	; 0x1850
 8001068:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800106a:	2301      	movs	r3, #1
 800106c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106e:	2300      	movs	r3, #0
 8001070:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001072:	2300      	movs	r3, #0
 8001074:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001076:	f107 0314 	add.w	r3, r7, #20
 800107a:	4619      	mov	r1, r3
 800107c:	482b      	ldr	r0, [pc, #172]	; (800112c <MX_GPIO_Init+0x1e0>)
 800107e:	f000 fd49 	bl	8001b14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = C1_Pin|C4_Pin;
 8001082:	f44f 7308 	mov.w	r3, #544	; 0x220
 8001086:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001088:	4b2c      	ldr	r3, [pc, #176]	; (800113c <MX_GPIO_Init+0x1f0>)
 800108a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800108c:	2301      	movs	r3, #1
 800108e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001090:	f107 0314 	add.w	r3, r7, #20
 8001094:	4619      	mov	r1, r3
 8001096:	4825      	ldr	r0, [pc, #148]	; (800112c <MX_GPIO_Init+0x1e0>)
 8001098:	f000 fd3c 	bl	8001b14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin 
                           PBPin */
  GPIO_InitStruct.Pin = R3_Pin|RED_LED_Pin|PIN_D4_Pin|GREEN_LED_Pin 
 800109c:	f241 7301 	movw	r3, #5889	; 0x1701
 80010a0:	617b      	str	r3, [r7, #20]
                          |YELLOW_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010a2:	2301      	movs	r3, #1
 80010a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a6:	2300      	movs	r3, #0
 80010a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010aa:	2300      	movs	r3, #0
 80010ac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ae:	f107 0314 	add.w	r3, r7, #20
 80010b2:	4619      	mov	r1, r3
 80010b4:	481e      	ldr	r0, [pc, #120]	; (8001130 <MX_GPIO_Init+0x1e4>)
 80010b6:	f000 fd2d 	bl	8001b14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = C3_Pin;
 80010ba:	2380      	movs	r3, #128	; 0x80
 80010bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80010be:	4b1f      	ldr	r3, [pc, #124]	; (800113c <MX_GPIO_Init+0x1f0>)
 80010c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010c2:	2301      	movs	r3, #1
 80010c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(C3_GPIO_Port, &GPIO_InitStruct);
 80010c6:	f107 0314 	add.w	r3, r7, #20
 80010ca:	4619      	mov	r1, r3
 80010cc:	4816      	ldr	r0, [pc, #88]	; (8001128 <MX_GPIO_Init+0x1dc>)
 80010ce:	f000 fd21 	bl	8001b14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = C2_Pin;
 80010d2:	2340      	movs	r3, #64	; 0x40
 80010d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80010d6:	4b19      	ldr	r3, [pc, #100]	; (800113c <MX_GPIO_Init+0x1f0>)
 80010d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010da:	2301      	movs	r3, #1
 80010dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(C2_GPIO_Port, &GPIO_InitStruct);
 80010de:	f107 0314 	add.w	r3, r7, #20
 80010e2:	4619      	mov	r1, r3
 80010e4:	4812      	ldr	r0, [pc, #72]	; (8001130 <MX_GPIO_Init+0x1e4>)
 80010e6:	f000 fd15 	bl	8001b14 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 6, 1);
 80010ea:	2201      	movs	r2, #1
 80010ec:	2106      	movs	r1, #6
 80010ee:	2009      	movs	r0, #9
 80010f0:	f000 fccb 	bl	8001a8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80010f4:	2009      	movs	r0, #9
 80010f6:	f000 fce4 	bl	8001ac2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 6, 1);
 80010fa:	2201      	movs	r2, #1
 80010fc:	2106      	movs	r1, #6
 80010fe:	2017      	movs	r0, #23
 8001100:	f000 fcc3 	bl	8001a8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001104:	2017      	movs	r0, #23
 8001106:	f000 fcdc 	bl	8001ac2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 6, 1);
 800110a:	2201      	movs	r2, #1
 800110c:	2106      	movs	r1, #6
 800110e:	2028      	movs	r0, #40	; 0x28
 8001110:	f000 fcbb 	bl	8001a8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001114:	2028      	movs	r0, #40	; 0x28
 8001116:	f000 fcd4 	bl	8001ac2 <HAL_NVIC_EnableIRQ>

}
 800111a:	bf00      	nop
 800111c:	3728      	adds	r7, #40	; 0x28
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	40023800 	.word	0x40023800
 8001128:	40020800 	.word	0x40020800
 800112c:	40020000 	.word	0x40020000
 8001130:	40020400 	.word	0x40020400
 8001134:	10210000 	.word	0x10210000
 8001138:	10110000 	.word	0x10110000
 800113c:	10310000 	.word	0x10310000

08001140 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001144:	f000 fb10 	bl	8001768 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001148:	f000 f83c 	bl	80011c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800114c:	f7ff fefe 	bl	8000f4c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001150:	f000 fa6e 	bl	8001630 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8001154:	f000 f9a0 	bl	8001498 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  init_LCD();
 8001158:	f7ff fb70 	bl	800083c <init_LCD>
  HAL_NVIC_DisableIRQ(EXTI3_IRQn);
 800115c:	2009      	movs	r0, #9
 800115e:	f000 fcbe 	bl	8001ade <HAL_NVIC_DisableIRQ>
  /* USER CODE END 2 */
  StartKeyb4x4();
 8001162:	f7ff fda1 	bl	8000ca8 <StartKeyb4x4>

  InitAlarm();
 8001166:	f7ff f9c7 	bl	80004f8 <InitAlarm>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

    /* USER CODE END WHILE */
	  	LedAlarm();
 800116a:	f7ff fb0d 	bl	8000788 <LedAlarm>
		if(TastoPremuto)
 800116e:	4b10      	ldr	r3, [pc, #64]	; (80011b0 <main+0x70>)
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d0f9      	beq.n	800116a <main+0x2a>
			{
			PulisciSchermo();
 8001176:	f7ff fcbf 	bl	8000af8 <PulisciSchermo>
			StampaStringaSuLCD(0, 0, "Password:");
 800117a:	4a0e      	ldr	r2, [pc, #56]	; (80011b4 <main+0x74>)
 800117c:	2100      	movs	r1, #0
 800117e:	2000      	movs	r0, #0
 8001180:	f7ff fd01 	bl	8000b86 <StampaStringaSuLCD>
			StampaStringaSuLCD(10, 0, password);
 8001184:	4a0c      	ldr	r2, [pc, #48]	; (80011b8 <main+0x78>)
 8001186:	2100      	movs	r1, #0
 8001188:	200a      	movs	r0, #10
 800118a:	f7ff fcfc 	bl	8000b86 <StampaStringaSuLCD>
			StampaStringaSuLCD(0,1,"Tentativi:");
 800118e:	4a0b      	ldr	r2, [pc, #44]	; (80011bc <main+0x7c>)
 8001190:	2101      	movs	r1, #1
 8001192:	2000      	movs	r0, #0
 8001194:	f7ff fcf7 	bl	8000b86 <StampaStringaSuLCD>
			StampaInteroSuLCD(10, 1, tentativi);
 8001198:	4b09      	ldr	r3, [pc, #36]	; (80011c0 <main+0x80>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	b29b      	uxth	r3, r3
 800119e:	461a      	mov	r2, r3
 80011a0:	2101      	movs	r1, #1
 80011a2:	200a      	movs	r0, #10
 80011a4:	f7ff fcaf 	bl	8000b06 <StampaInteroSuLCD>
			TastoPremuto=0;
 80011a8:	4b01      	ldr	r3, [pc, #4]	; (80011b0 <main+0x70>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	701a      	strb	r2, [r3, #0]
	  	LedAlarm();
 80011ae:	e7dc      	b.n	800116a <main+0x2a>
 80011b0:	20000036 	.word	0x20000036
 80011b4:	08003b98 	.word	0x08003b98
 80011b8:	2000004c 	.word	0x2000004c
 80011bc:	08003ba4 	.word	0x08003ba4
 80011c0:	20000040 	.word	0x20000040

080011c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b094      	sub	sp, #80	; 0x50
 80011c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011ca:	f107 0320 	add.w	r3, r7, #32
 80011ce:	2230      	movs	r2, #48	; 0x30
 80011d0:	2100      	movs	r1, #0
 80011d2:	4618      	mov	r0, r3
 80011d4:	f002 fc6a 	bl	8003aac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011d8:	f107 030c 	add.w	r3, r7, #12
 80011dc:	2200      	movs	r2, #0
 80011de:	601a      	str	r2, [r3, #0]
 80011e0:	605a      	str	r2, [r3, #4]
 80011e2:	609a      	str	r2, [r3, #8]
 80011e4:	60da      	str	r2, [r3, #12]
 80011e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011e8:	2300      	movs	r3, #0
 80011ea:	60bb      	str	r3, [r7, #8]
 80011ec:	4b29      	ldr	r3, [pc, #164]	; (8001294 <SystemClock_Config+0xd0>)
 80011ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f0:	4a28      	ldr	r2, [pc, #160]	; (8001294 <SystemClock_Config+0xd0>)
 80011f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011f6:	6413      	str	r3, [r2, #64]	; 0x40
 80011f8:	4b26      	ldr	r3, [pc, #152]	; (8001294 <SystemClock_Config+0xd0>)
 80011fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001200:	60bb      	str	r3, [r7, #8]
 8001202:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001204:	2300      	movs	r3, #0
 8001206:	607b      	str	r3, [r7, #4]
 8001208:	4b23      	ldr	r3, [pc, #140]	; (8001298 <SystemClock_Config+0xd4>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001210:	4a21      	ldr	r2, [pc, #132]	; (8001298 <SystemClock_Config+0xd4>)
 8001212:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001216:	6013      	str	r3, [r2, #0]
 8001218:	4b1f      	ldr	r3, [pc, #124]	; (8001298 <SystemClock_Config+0xd4>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001220:	607b      	str	r3, [r7, #4]
 8001222:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001224:	2302      	movs	r3, #2
 8001226:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001228:	2301      	movs	r3, #1
 800122a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800122c:	2310      	movs	r3, #16
 800122e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001230:	2302      	movs	r3, #2
 8001232:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001234:	2300      	movs	r3, #0
 8001236:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001238:	2310      	movs	r3, #16
 800123a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800123c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001240:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001242:	2304      	movs	r3, #4
 8001244:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001246:	2307      	movs	r3, #7
 8001248:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800124a:	f107 0320 	add.w	r3, r7, #32
 800124e:	4618      	mov	r0, r3
 8001250:	f000 fe2c 	bl	8001eac <HAL_RCC_OscConfig>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800125a:	f000 f81f 	bl	800129c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800125e:	230f      	movs	r3, #15
 8001260:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001262:	2302      	movs	r3, #2
 8001264:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001266:	2300      	movs	r3, #0
 8001268:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800126a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800126e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001270:	2300      	movs	r3, #0
 8001272:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001274:	f107 030c 	add.w	r3, r7, #12
 8001278:	2102      	movs	r1, #2
 800127a:	4618      	mov	r0, r3
 800127c:	f001 f886 	bl	800238c <HAL_RCC_ClockConfig>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001286:	f000 f809 	bl	800129c <Error_Handler>
  }
}
 800128a:	bf00      	nop
 800128c:	3750      	adds	r7, #80	; 0x50
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	40023800 	.word	0x40023800
 8001298:	40007000 	.word	0x40007000

0800129c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80012a0:	bf00      	nop
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
	...

080012ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012b2:	2300      	movs	r3, #0
 80012b4:	607b      	str	r3, [r7, #4]
 80012b6:	4b10      	ldr	r3, [pc, #64]	; (80012f8 <HAL_MspInit+0x4c>)
 80012b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ba:	4a0f      	ldr	r2, [pc, #60]	; (80012f8 <HAL_MspInit+0x4c>)
 80012bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012c0:	6453      	str	r3, [r2, #68]	; 0x44
 80012c2:	4b0d      	ldr	r3, [pc, #52]	; (80012f8 <HAL_MspInit+0x4c>)
 80012c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012ca:	607b      	str	r3, [r7, #4]
 80012cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012ce:	2300      	movs	r3, #0
 80012d0:	603b      	str	r3, [r7, #0]
 80012d2:	4b09      	ldr	r3, [pc, #36]	; (80012f8 <HAL_MspInit+0x4c>)
 80012d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d6:	4a08      	ldr	r2, [pc, #32]	; (80012f8 <HAL_MspInit+0x4c>)
 80012d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012dc:	6413      	str	r3, [r2, #64]	; 0x40
 80012de:	4b06      	ldr	r3, [pc, #24]	; (80012f8 <HAL_MspInit+0x4c>)
 80012e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012e6:	603b      	str	r3, [r7, #0]
 80012e8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 80012ea:	2004      	movs	r0, #4
 80012ec:	f000 fbc2 	bl	8001a74 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012f0:	bf00      	nop
 80012f2:	3708      	adds	r7, #8
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	40023800 	.word	0x40023800

080012fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001300:	bf00      	nop
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr

0800130a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800130a:	b480      	push	{r7}
 800130c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800130e:	e7fe      	b.n	800130e <HardFault_Handler+0x4>

08001310 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001314:	e7fe      	b.n	8001314 <MemManage_Handler+0x4>

08001316 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001316:	b480      	push	{r7}
 8001318:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800131a:	e7fe      	b.n	800131a <BusFault_Handler+0x4>

0800131c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001320:	e7fe      	b.n	8001320 <UsageFault_Handler+0x4>

08001322 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001322:	b480      	push	{r7}
 8001324:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001326:	bf00      	nop
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr

08001330 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001334:	bf00      	nop
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr

0800133e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800133e:	b480      	push	{r7}
 8001340:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001342:	bf00      	nop
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr

0800134c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001350:	f000 fa5c 	bl	800180c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  GestioneRigheMatriceKeyb4x4();
 8001354:	f7ff fcbe 	bl	8000cd4 <GestioneRigheMatriceKeyb4x4>


  if(allarme){
 8001358:	4b15      	ldr	r3, [pc, #84]	; (80013b0 <SysTick_Handler+0x64>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d024      	beq.n	80013aa <SysTick_Handler+0x5e>
  if(strobeBuffer)   //se è attivo un tempo antirimbalzo
 8001360:	4b14      	ldr	r3, [pc, #80]	; (80013b4 <SysTick_Handler+0x68>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d020      	beq.n	80013aa <SysTick_Handler+0x5e>
  		{
  		strobeBuffer--;
 8001368:	4b12      	ldr	r3, [pc, #72]	; (80013b4 <SysTick_Handler+0x68>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	3b01      	subs	r3, #1
 800136e:	4a11      	ldr	r2, [pc, #68]	; (80013b4 <SysTick_Handler+0x68>)
 8001370:	6013      	str	r3, [r2, #0]
  		if(!strobeBuffer)
 8001372:	4b10      	ldr	r3, [pc, #64]	; (80013b4 <SysTick_Handler+0x68>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d117      	bne.n	80013aa <SysTick_Handler+0x5e>
  			{
  			if(strobe==0)
 800137a:	4b0f      	ldr	r3, [pc, #60]	; (80013b8 <SysTick_Handler+0x6c>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d103      	bne.n	800138a <SysTick_Handler+0x3e>
  				strobe=1;
 8001382:	4b0d      	ldr	r3, [pc, #52]	; (80013b8 <SysTick_Handler+0x6c>)
 8001384:	2201      	movs	r2, #1
 8001386:	601a      	str	r2, [r3, #0]
 8001388:	e006      	b.n	8001398 <SysTick_Handler+0x4c>
  			else if(strobe==1)
 800138a:	4b0b      	ldr	r3, [pc, #44]	; (80013b8 <SysTick_Handler+0x6c>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	2b01      	cmp	r3, #1
 8001390:	d102      	bne.n	8001398 <SysTick_Handler+0x4c>
  				strobe=0;
 8001392:	4b09      	ldr	r3, [pc, #36]	; (80013b8 <SysTick_Handler+0x6c>)
 8001394:	2200      	movs	r2, #0
 8001396:	601a      	str	r2, [r3, #0]
  			Sound(strobe);
 8001398:	4b07      	ldr	r3, [pc, #28]	; (80013b8 <SysTick_Handler+0x6c>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4618      	mov	r0, r3
 800139e:	f7ff f9a9 	bl	80006f4 <Sound>
  			strobeBuffer = TEMPO_STROBE;
 80013a2:	4b04      	ldr	r3, [pc, #16]	; (80013b4 <SysTick_Handler+0x68>)
 80013a4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80013a8:	601a      	str	r2, [r3, #0]
  		}

  }

  /* USER CODE END SysTick_IRQn 1 */
}
 80013aa:	bf00      	nop
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	2000003c 	.word	0x2000003c
 80013b4:	20000054 	.word	0x20000054
 80013b8:	20000004 	.word	0x20000004

080013bc <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PIR_Pin);
 80013c0:	2008      	movs	r0, #8
 80013c2:	f000 fd5b 	bl	8001e7c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80013c6:	bf00      	nop
 80013c8:	bd80      	pop	{r7, pc}

080013ca <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80013ca:	b580      	push	{r7, lr}
 80013cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(C1_Pin);
 80013ce:	2020      	movs	r0, #32
 80013d0:	f000 fd54 	bl	8001e7c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(C2_Pin);
 80013d4:	2040      	movs	r0, #64	; 0x40
 80013d6:	f000 fd51 	bl	8001e7c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(C3_Pin);
 80013da:	2080      	movs	r0, #128	; 0x80
 80013dc:	f000 fd4e 	bl	8001e7c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(C4_Pin);
 80013e0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80013e4:	f000 fd4a 	bl	8001e7c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80013e8:	bf00      	nop
 80013ea:	bd80      	pop	{r7, pc}

080013ec <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80013f0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80013f4:	f000 fd42 	bl	8001e7c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80013f8:	bf00      	nop
 80013fa:	bd80      	pop	{r7, pc}

080013fc <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 1 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
 8001402:	4603      	mov	r3, r0
 8001404:	80fb      	strh	r3, [r7, #6]
	if((GPIO_Pin==C1_Pin)||(GPIO_Pin==C2_Pin)||(GPIO_Pin==C3_Pin)||(GPIO_Pin==C4_Pin))
 8001406:	88fb      	ldrh	r3, [r7, #6]
 8001408:	2b20      	cmp	r3, #32
 800140a:	d009      	beq.n	8001420 <HAL_GPIO_EXTI_Callback+0x24>
 800140c:	88fb      	ldrh	r3, [r7, #6]
 800140e:	2b40      	cmp	r3, #64	; 0x40
 8001410:	d006      	beq.n	8001420 <HAL_GPIO_EXTI_Callback+0x24>
 8001412:	88fb      	ldrh	r3, [r7, #6]
 8001414:	2b80      	cmp	r3, #128	; 0x80
 8001416:	d003      	beq.n	8001420 <HAL_GPIO_EXTI_Callback+0x24>
 8001418:	88fb      	ldrh	r3, [r7, #6]
 800141a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800141e:	d103      	bne.n	8001428 <HAL_GPIO_EXTI_Callback+0x2c>
		GestioneEXTI_Keyb4x4(GPIO_Pin);
 8001420:	88fb      	ldrh	r3, [r7, #6]
 8001422:	4618      	mov	r0, r3
 8001424:	f7ff fd76 	bl	8000f14 <GestioneEXTI_Keyb4x4>
	if(GPIO_Pin==B1_Pin){
 8001428:	88fb      	ldrh	r3, [r7, #6]
 800142a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800142e:	d109      	bne.n	8001444 <HAL_GPIO_EXTI_Callback+0x48>
		if(!HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin)){
 8001430:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001434:	480c      	ldr	r0, [pc, #48]	; (8001468 <HAL_GPIO_EXTI_Callback+0x6c>)
 8001436:	f000 fcef 	bl	8001e18 <HAL_GPIO_ReadPin>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d101      	bne.n	8001444 <HAL_GPIO_EXTI_Callback+0x48>
			CheckPassword();
 8001440:	f7ff f8a2 	bl	8000588 <CheckPassword>
		}
	}
	if(GPIO_Pin==PIR_Pin){
 8001444:	88fb      	ldrh	r3, [r7, #6]
 8001446:	2b08      	cmp	r3, #8
 8001448:	d109      	bne.n	800145e <HAL_GPIO_EXTI_Callback+0x62>
		while(!HAL_GPIO_ReadPin(PIR_GPIO_Port,PIR_Pin));
 800144a:	bf00      	nop
 800144c:	2108      	movs	r1, #8
 800144e:	4806      	ldr	r0, [pc, #24]	; (8001468 <HAL_GPIO_EXTI_Callback+0x6c>)
 8001450:	f000 fce2 	bl	8001e18 <HAL_GPIO_ReadPin>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d0f8      	beq.n	800144c <HAL_GPIO_EXTI_Callback+0x50>
		CheckIntrusion();
 800145a:	f7ff f97b 	bl	8000754 <CheckIntrusion>

	}

}
 800145e:	bf00      	nop
 8001460:	3708      	adds	r7, #8
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	40020800 	.word	0x40020800

0800146c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001470:	4b08      	ldr	r3, [pc, #32]	; (8001494 <SystemInit+0x28>)
 8001472:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001476:	4a07      	ldr	r2, [pc, #28]	; (8001494 <SystemInit+0x28>)
 8001478:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800147c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001480:	4b04      	ldr	r3, [pc, #16]	; (8001494 <SystemInit+0x28>)
 8001482:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001486:	609a      	str	r2, [r3, #8]
#endif
}
 8001488:	bf00      	nop
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop
 8001494:	e000ed00 	.word	0xe000ed00

08001498 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b08e      	sub	sp, #56	; 0x38
 800149c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800149e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014a2:	2200      	movs	r2, #0
 80014a4:	601a      	str	r2, [r3, #0]
 80014a6:	605a      	str	r2, [r3, #4]
 80014a8:	609a      	str	r2, [r3, #8]
 80014aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014ac:	f107 0320 	add.w	r3, r7, #32
 80014b0:	2200      	movs	r2, #0
 80014b2:	601a      	str	r2, [r3, #0]
 80014b4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014b6:	1d3b      	adds	r3, r7, #4
 80014b8:	2200      	movs	r2, #0
 80014ba:	601a      	str	r2, [r3, #0]
 80014bc:	605a      	str	r2, [r3, #4]
 80014be:	609a      	str	r2, [r3, #8]
 80014c0:	60da      	str	r2, [r3, #12]
 80014c2:	611a      	str	r2, [r3, #16]
 80014c4:	615a      	str	r2, [r3, #20]
 80014c6:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 80014c8:	4b2c      	ldr	r3, [pc, #176]	; (800157c <MX_TIM2_Init+0xe4>)
 80014ca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014ce:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 42-1;
 80014d0:	4b2a      	ldr	r3, [pc, #168]	; (800157c <MX_TIM2_Init+0xe4>)
 80014d2:	2229      	movs	r2, #41	; 0x29
 80014d4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014d6:	4b29      	ldr	r3, [pc, #164]	; (800157c <MX_TIM2_Init+0xe4>)
 80014d8:	2200      	movs	r2, #0
 80014da:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 200-1;
 80014dc:	4b27      	ldr	r3, [pc, #156]	; (800157c <MX_TIM2_Init+0xe4>)
 80014de:	22c7      	movs	r2, #199	; 0xc7
 80014e0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014e2:	4b26      	ldr	r3, [pc, #152]	; (800157c <MX_TIM2_Init+0xe4>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014e8:	4b24      	ldr	r3, [pc, #144]	; (800157c <MX_TIM2_Init+0xe4>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80014ee:	4823      	ldr	r0, [pc, #140]	; (800157c <MX_TIM2_Init+0xe4>)
 80014f0:	f001 f93e 	bl	8002770 <HAL_TIM_Base_Init>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 80014fa:	f7ff fecf 	bl	800129c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001502:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001504:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001508:	4619      	mov	r1, r3
 800150a:	481c      	ldr	r0, [pc, #112]	; (800157c <MX_TIM2_Init+0xe4>)
 800150c:	f001 fad4 	bl	8002ab8 <HAL_TIM_ConfigClockSource>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8001516:	f7ff fec1 	bl	800129c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800151a:	4818      	ldr	r0, [pc, #96]	; (800157c <MX_TIM2_Init+0xe4>)
 800151c:	f001 f953 	bl	80027c6 <HAL_TIM_PWM_Init>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8001526:	f7ff feb9 	bl	800129c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800152a:	2300      	movs	r3, #0
 800152c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800152e:	2300      	movs	r3, #0
 8001530:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001532:	f107 0320 	add.w	r3, r7, #32
 8001536:	4619      	mov	r1, r3
 8001538:	4810      	ldr	r0, [pc, #64]	; (800157c <MX_TIM2_Init+0xe4>)
 800153a:	f001 fe41 	bl	80031c0 <HAL_TIMEx_MasterConfigSynchronization>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8001544:	f7ff feaa 	bl	800129c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001548:	2360      	movs	r3, #96	; 0x60
 800154a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 100;
 800154c:	2364      	movs	r3, #100	; 0x64
 800154e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001550:	2300      	movs	r3, #0
 8001552:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001554:	2300      	movs	r3, #0
 8001556:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001558:	1d3b      	adds	r3, r7, #4
 800155a:	2200      	movs	r2, #0
 800155c:	4619      	mov	r1, r3
 800155e:	4807      	ldr	r0, [pc, #28]	; (800157c <MX_TIM2_Init+0xe4>)
 8001560:	f001 f9e4 	bl	800292c <HAL_TIM_PWM_ConfigChannel>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 800156a:	f7ff fe97 	bl	800129c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 800156e:	4803      	ldr	r0, [pc, #12]	; (800157c <MX_TIM2_Init+0xe4>)
 8001570:	f000 f826 	bl	80015c0 <HAL_TIM_MspPostInit>

}
 8001574:	bf00      	nop
 8001576:	3738      	adds	r7, #56	; 0x38
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	20000060 	.word	0x20000060

08001580 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001580:	b480      	push	{r7}
 8001582:	b085      	sub	sp, #20
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001590:	d10d      	bne.n	80015ae <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001592:	2300      	movs	r3, #0
 8001594:	60fb      	str	r3, [r7, #12]
 8001596:	4b09      	ldr	r3, [pc, #36]	; (80015bc <HAL_TIM_Base_MspInit+0x3c>)
 8001598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159a:	4a08      	ldr	r2, [pc, #32]	; (80015bc <HAL_TIM_Base_MspInit+0x3c>)
 800159c:	f043 0301 	orr.w	r3, r3, #1
 80015a0:	6413      	str	r3, [r2, #64]	; 0x40
 80015a2:	4b06      	ldr	r3, [pc, #24]	; (80015bc <HAL_TIM_Base_MspInit+0x3c>)
 80015a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a6:	f003 0301 	and.w	r3, r3, #1
 80015aa:	60fb      	str	r3, [r7, #12]
 80015ac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80015ae:	bf00      	nop
 80015b0:	3714      	adds	r7, #20
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop
 80015bc:	40023800 	.word	0x40023800

080015c0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b088      	sub	sp, #32
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c8:	f107 030c 	add.w	r3, r7, #12
 80015cc:	2200      	movs	r2, #0
 80015ce:	601a      	str	r2, [r3, #0]
 80015d0:	605a      	str	r2, [r3, #4]
 80015d2:	609a      	str	r2, [r3, #8]
 80015d4:	60da      	str	r2, [r3, #12]
 80015d6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015e0:	d11e      	bne.n	8001620 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015e2:	2300      	movs	r3, #0
 80015e4:	60bb      	str	r3, [r7, #8]
 80015e6:	4b10      	ldr	r3, [pc, #64]	; (8001628 <HAL_TIM_MspPostInit+0x68>)
 80015e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ea:	4a0f      	ldr	r2, [pc, #60]	; (8001628 <HAL_TIM_MspPostInit+0x68>)
 80015ec:	f043 0301 	orr.w	r3, r3, #1
 80015f0:	6313      	str	r3, [r2, #48]	; 0x30
 80015f2:	4b0d      	ldr	r3, [pc, #52]	; (8001628 <HAL_TIM_MspPostInit+0x68>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f6:	f003 0301 	and.w	r3, r3, #1
 80015fa:	60bb      	str	r3, [r7, #8]
 80015fc:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration    
    PA15     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80015fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001602:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001604:	2302      	movs	r3, #2
 8001606:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001608:	2300      	movs	r3, #0
 800160a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800160c:	2300      	movs	r3, #0
 800160e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001610:	2301      	movs	r3, #1
 8001612:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001614:	f107 030c 	add.w	r3, r7, #12
 8001618:	4619      	mov	r1, r3
 800161a:	4804      	ldr	r0, [pc, #16]	; (800162c <HAL_TIM_MspPostInit+0x6c>)
 800161c:	f000 fa7a 	bl	8001b14 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001620:	bf00      	nop
 8001622:	3720      	adds	r7, #32
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	40023800 	.word	0x40023800
 800162c:	40020000 	.word	0x40020000

08001630 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001634:	4b11      	ldr	r3, [pc, #68]	; (800167c <MX_USART2_UART_Init+0x4c>)
 8001636:	4a12      	ldr	r2, [pc, #72]	; (8001680 <MX_USART2_UART_Init+0x50>)
 8001638:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800163a:	4b10      	ldr	r3, [pc, #64]	; (800167c <MX_USART2_UART_Init+0x4c>)
 800163c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001640:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001642:	4b0e      	ldr	r3, [pc, #56]	; (800167c <MX_USART2_UART_Init+0x4c>)
 8001644:	2200      	movs	r2, #0
 8001646:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001648:	4b0c      	ldr	r3, [pc, #48]	; (800167c <MX_USART2_UART_Init+0x4c>)
 800164a:	2200      	movs	r2, #0
 800164c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800164e:	4b0b      	ldr	r3, [pc, #44]	; (800167c <MX_USART2_UART_Init+0x4c>)
 8001650:	2200      	movs	r2, #0
 8001652:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001654:	4b09      	ldr	r3, [pc, #36]	; (800167c <MX_USART2_UART_Init+0x4c>)
 8001656:	220c      	movs	r2, #12
 8001658:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800165a:	4b08      	ldr	r3, [pc, #32]	; (800167c <MX_USART2_UART_Init+0x4c>)
 800165c:	2200      	movs	r2, #0
 800165e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001660:	4b06      	ldr	r3, [pc, #24]	; (800167c <MX_USART2_UART_Init+0x4c>)
 8001662:	2200      	movs	r2, #0
 8001664:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001666:	4805      	ldr	r0, [pc, #20]	; (800167c <MX_USART2_UART_Init+0x4c>)
 8001668:	f001 fe18 	bl	800329c <HAL_UART_Init>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001672:	f7ff fe13 	bl	800129c <Error_Handler>
  }

}
 8001676:	bf00      	nop
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	200000a0 	.word	0x200000a0
 8001680:	40004400 	.word	0x40004400

08001684 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b08a      	sub	sp, #40	; 0x28
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800168c:	f107 0314 	add.w	r3, r7, #20
 8001690:	2200      	movs	r2, #0
 8001692:	601a      	str	r2, [r3, #0]
 8001694:	605a      	str	r2, [r3, #4]
 8001696:	609a      	str	r2, [r3, #8]
 8001698:	60da      	str	r2, [r3, #12]
 800169a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a19      	ldr	r2, [pc, #100]	; (8001708 <HAL_UART_MspInit+0x84>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d12b      	bne.n	80016fe <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80016a6:	2300      	movs	r3, #0
 80016a8:	613b      	str	r3, [r7, #16]
 80016aa:	4b18      	ldr	r3, [pc, #96]	; (800170c <HAL_UART_MspInit+0x88>)
 80016ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ae:	4a17      	ldr	r2, [pc, #92]	; (800170c <HAL_UART_MspInit+0x88>)
 80016b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016b4:	6413      	str	r3, [r2, #64]	; 0x40
 80016b6:	4b15      	ldr	r3, [pc, #84]	; (800170c <HAL_UART_MspInit+0x88>)
 80016b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016be:	613b      	str	r3, [r7, #16]
 80016c0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016c2:	2300      	movs	r3, #0
 80016c4:	60fb      	str	r3, [r7, #12]
 80016c6:	4b11      	ldr	r3, [pc, #68]	; (800170c <HAL_UART_MspInit+0x88>)
 80016c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ca:	4a10      	ldr	r2, [pc, #64]	; (800170c <HAL_UART_MspInit+0x88>)
 80016cc:	f043 0301 	orr.w	r3, r3, #1
 80016d0:	6313      	str	r3, [r2, #48]	; 0x30
 80016d2:	4b0e      	ldr	r3, [pc, #56]	; (800170c <HAL_UART_MspInit+0x88>)
 80016d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d6:	f003 0301 	and.w	r3, r3, #1
 80016da:	60fb      	str	r3, [r7, #12]
 80016dc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80016de:	230c      	movs	r3, #12
 80016e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e2:	2302      	movs	r3, #2
 80016e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e6:	2300      	movs	r3, #0
 80016e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ea:	2300      	movs	r3, #0
 80016ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016ee:	2307      	movs	r3, #7
 80016f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016f2:	f107 0314 	add.w	r3, r7, #20
 80016f6:	4619      	mov	r1, r3
 80016f8:	4805      	ldr	r0, [pc, #20]	; (8001710 <HAL_UART_MspInit+0x8c>)
 80016fa:	f000 fa0b 	bl	8001b14 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80016fe:	bf00      	nop
 8001700:	3728      	adds	r7, #40	; 0x28
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	40004400 	.word	0x40004400
 800170c:	40023800 	.word	0x40023800
 8001710:	40020000 	.word	0x40020000

08001714 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001714:	f8df d034 	ldr.w	sp, [pc, #52]	; 800174c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001718:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800171a:	e003      	b.n	8001724 <LoopCopyDataInit>

0800171c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800171c:	4b0c      	ldr	r3, [pc, #48]	; (8001750 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800171e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001720:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001722:	3104      	adds	r1, #4

08001724 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001724:	480b      	ldr	r0, [pc, #44]	; (8001754 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001726:	4b0c      	ldr	r3, [pc, #48]	; (8001758 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001728:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800172a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800172c:	d3f6      	bcc.n	800171c <CopyDataInit>
  ldr  r2, =_sbss
 800172e:	4a0b      	ldr	r2, [pc, #44]	; (800175c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001730:	e002      	b.n	8001738 <LoopFillZerobss>

08001732 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001732:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001734:	f842 3b04 	str.w	r3, [r2], #4

08001738 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001738:	4b09      	ldr	r3, [pc, #36]	; (8001760 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800173a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800173c:	d3f9      	bcc.n	8001732 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800173e:	f7ff fe95 	bl	800146c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001742:	f002 f975 	bl	8003a30 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001746:	f7ff fcfb 	bl	8001140 <main>
  bx  lr    
 800174a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800174c:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8001750:	08003c10 	.word	0x08003c10
  ldr  r0, =_sdata
 8001754:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001758:	20000014 	.word	0x20000014
  ldr  r2, =_sbss
 800175c:	20000014 	.word	0x20000014
  ldr  r3, = _ebss
 8001760:	200000e4 	.word	0x200000e4

08001764 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001764:	e7fe      	b.n	8001764 <ADC_IRQHandler>
	...

08001768 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800176c:	4b0e      	ldr	r3, [pc, #56]	; (80017a8 <HAL_Init+0x40>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a0d      	ldr	r2, [pc, #52]	; (80017a8 <HAL_Init+0x40>)
 8001772:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001776:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001778:	4b0b      	ldr	r3, [pc, #44]	; (80017a8 <HAL_Init+0x40>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a0a      	ldr	r2, [pc, #40]	; (80017a8 <HAL_Init+0x40>)
 800177e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001782:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001784:	4b08      	ldr	r3, [pc, #32]	; (80017a8 <HAL_Init+0x40>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a07      	ldr	r2, [pc, #28]	; (80017a8 <HAL_Init+0x40>)
 800178a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800178e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001790:	2003      	movs	r0, #3
 8001792:	f000 f96f 	bl	8001a74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001796:	2000      	movs	r0, #0
 8001798:	f000 f808 	bl	80017ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800179c:	f7ff fd86 	bl	80012ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017a0:	2300      	movs	r3, #0
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	40023c00 	.word	0x40023c00

080017ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017b4:	4b12      	ldr	r3, [pc, #72]	; (8001800 <HAL_InitTick+0x54>)
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	4b12      	ldr	r3, [pc, #72]	; (8001804 <HAL_InitTick+0x58>)
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	4619      	mov	r1, r3
 80017be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80017c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80017ca:	4618      	mov	r0, r3
 80017cc:	f000 f995 	bl	8001afa <HAL_SYSTICK_Config>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d001      	beq.n	80017da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
 80017d8:	e00e      	b.n	80017f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2b0f      	cmp	r3, #15
 80017de:	d80a      	bhi.n	80017f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017e0:	2200      	movs	r2, #0
 80017e2:	6879      	ldr	r1, [r7, #4]
 80017e4:	f04f 30ff 	mov.w	r0, #4294967295
 80017e8:	f000 f94f 	bl	8001a8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017ec:	4a06      	ldr	r2, [pc, #24]	; (8001808 <HAL_InitTick+0x5c>)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017f2:	2300      	movs	r3, #0
 80017f4:	e000      	b.n	80017f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	3708      	adds	r7, #8
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	20000008 	.word	0x20000008
 8001804:	20000010 	.word	0x20000010
 8001808:	2000000c 	.word	0x2000000c

0800180c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001810:	4b06      	ldr	r3, [pc, #24]	; (800182c <HAL_IncTick+0x20>)
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	461a      	mov	r2, r3
 8001816:	4b06      	ldr	r3, [pc, #24]	; (8001830 <HAL_IncTick+0x24>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4413      	add	r3, r2
 800181c:	4a04      	ldr	r2, [pc, #16]	; (8001830 <HAL_IncTick+0x24>)
 800181e:	6013      	str	r3, [r2, #0]
}
 8001820:	bf00      	nop
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop
 800182c:	20000010 	.word	0x20000010
 8001830:	200000e0 	.word	0x200000e0

08001834 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  return uwTick;
 8001838:	4b03      	ldr	r3, [pc, #12]	; (8001848 <HAL_GetTick+0x14>)
 800183a:	681b      	ldr	r3, [r3, #0]
}
 800183c:	4618      	mov	r0, r3
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop
 8001848:	200000e0 	.word	0x200000e0

0800184c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b084      	sub	sp, #16
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001854:	f7ff ffee 	bl	8001834 <HAL_GetTick>
 8001858:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001864:	d005      	beq.n	8001872 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001866:	4b09      	ldr	r3, [pc, #36]	; (800188c <HAL_Delay+0x40>)
 8001868:	781b      	ldrb	r3, [r3, #0]
 800186a:	461a      	mov	r2, r3
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	4413      	add	r3, r2
 8001870:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001872:	bf00      	nop
 8001874:	f7ff ffde 	bl	8001834 <HAL_GetTick>
 8001878:	4602      	mov	r2, r0
 800187a:	68bb      	ldr	r3, [r7, #8]
 800187c:	1ad3      	subs	r3, r2, r3
 800187e:	68fa      	ldr	r2, [r7, #12]
 8001880:	429a      	cmp	r2, r3
 8001882:	d8f7      	bhi.n	8001874 <HAL_Delay+0x28>
  {
  }
}
 8001884:	bf00      	nop
 8001886:	3710      	adds	r7, #16
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	20000010 	.word	0x20000010

08001890 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001890:	b480      	push	{r7}
 8001892:	b085      	sub	sp, #20
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	f003 0307 	and.w	r3, r3, #7
 800189e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018a0:	4b0c      	ldr	r3, [pc, #48]	; (80018d4 <__NVIC_SetPriorityGrouping+0x44>)
 80018a2:	68db      	ldr	r3, [r3, #12]
 80018a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018a6:	68ba      	ldr	r2, [r7, #8]
 80018a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018ac:	4013      	ands	r3, r2
 80018ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018c2:	4a04      	ldr	r2, [pc, #16]	; (80018d4 <__NVIC_SetPriorityGrouping+0x44>)
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	60d3      	str	r3, [r2, #12]
}
 80018c8:	bf00      	nop
 80018ca:	3714      	adds	r7, #20
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr
 80018d4:	e000ed00 	.word	0xe000ed00

080018d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018dc:	4b04      	ldr	r3, [pc, #16]	; (80018f0 <__NVIC_GetPriorityGrouping+0x18>)
 80018de:	68db      	ldr	r3, [r3, #12]
 80018e0:	0a1b      	lsrs	r3, r3, #8
 80018e2:	f003 0307 	and.w	r3, r3, #7
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr
 80018f0:	e000ed00 	.word	0xe000ed00

080018f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b083      	sub	sp, #12
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	4603      	mov	r3, r0
 80018fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001902:	2b00      	cmp	r3, #0
 8001904:	db0b      	blt.n	800191e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001906:	79fb      	ldrb	r3, [r7, #7]
 8001908:	f003 021f 	and.w	r2, r3, #31
 800190c:	4907      	ldr	r1, [pc, #28]	; (800192c <__NVIC_EnableIRQ+0x38>)
 800190e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001912:	095b      	lsrs	r3, r3, #5
 8001914:	2001      	movs	r0, #1
 8001916:	fa00 f202 	lsl.w	r2, r0, r2
 800191a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800191e:	bf00      	nop
 8001920:	370c      	adds	r7, #12
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr
 800192a:	bf00      	nop
 800192c:	e000e100 	.word	0xe000e100

08001930 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
 8001936:	4603      	mov	r3, r0
 8001938:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800193a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800193e:	2b00      	cmp	r3, #0
 8001940:	db10      	blt.n	8001964 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001942:	79fb      	ldrb	r3, [r7, #7]
 8001944:	f003 021f 	and.w	r2, r3, #31
 8001948:	4909      	ldr	r1, [pc, #36]	; (8001970 <__NVIC_DisableIRQ+0x40>)
 800194a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800194e:	095b      	lsrs	r3, r3, #5
 8001950:	2001      	movs	r0, #1
 8001952:	fa00 f202 	lsl.w	r2, r0, r2
 8001956:	3320      	adds	r3, #32
 8001958:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800195c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001960:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8001964:	bf00      	nop
 8001966:	370c      	adds	r7, #12
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr
 8001970:	e000e100 	.word	0xe000e100

08001974 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	4603      	mov	r3, r0
 800197c:	6039      	str	r1, [r7, #0]
 800197e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001980:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001984:	2b00      	cmp	r3, #0
 8001986:	db0a      	blt.n	800199e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	b2da      	uxtb	r2, r3
 800198c:	490c      	ldr	r1, [pc, #48]	; (80019c0 <__NVIC_SetPriority+0x4c>)
 800198e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001992:	0112      	lsls	r2, r2, #4
 8001994:	b2d2      	uxtb	r2, r2
 8001996:	440b      	add	r3, r1
 8001998:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800199c:	e00a      	b.n	80019b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	b2da      	uxtb	r2, r3
 80019a2:	4908      	ldr	r1, [pc, #32]	; (80019c4 <__NVIC_SetPriority+0x50>)
 80019a4:	79fb      	ldrb	r3, [r7, #7]
 80019a6:	f003 030f 	and.w	r3, r3, #15
 80019aa:	3b04      	subs	r3, #4
 80019ac:	0112      	lsls	r2, r2, #4
 80019ae:	b2d2      	uxtb	r2, r2
 80019b0:	440b      	add	r3, r1
 80019b2:	761a      	strb	r2, [r3, #24]
}
 80019b4:	bf00      	nop
 80019b6:	370c      	adds	r7, #12
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr
 80019c0:	e000e100 	.word	0xe000e100
 80019c4:	e000ed00 	.word	0xe000ed00

080019c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b089      	sub	sp, #36	; 0x24
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	60f8      	str	r0, [r7, #12]
 80019d0:	60b9      	str	r1, [r7, #8]
 80019d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	f003 0307 	and.w	r3, r3, #7
 80019da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019dc:	69fb      	ldr	r3, [r7, #28]
 80019de:	f1c3 0307 	rsb	r3, r3, #7
 80019e2:	2b04      	cmp	r3, #4
 80019e4:	bf28      	it	cs
 80019e6:	2304      	movcs	r3, #4
 80019e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	3304      	adds	r3, #4
 80019ee:	2b06      	cmp	r3, #6
 80019f0:	d902      	bls.n	80019f8 <NVIC_EncodePriority+0x30>
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	3b03      	subs	r3, #3
 80019f6:	e000      	b.n	80019fa <NVIC_EncodePriority+0x32>
 80019f8:	2300      	movs	r3, #0
 80019fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001a00:	69bb      	ldr	r3, [r7, #24]
 8001a02:	fa02 f303 	lsl.w	r3, r2, r3
 8001a06:	43da      	mvns	r2, r3
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	401a      	ands	r2, r3
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a10:	f04f 31ff 	mov.w	r1, #4294967295
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	fa01 f303 	lsl.w	r3, r1, r3
 8001a1a:	43d9      	mvns	r1, r3
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a20:	4313      	orrs	r3, r2
         );
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	3724      	adds	r7, #36	; 0x24
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr
	...

08001a30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	3b01      	subs	r3, #1
 8001a3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a40:	d301      	bcc.n	8001a46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a42:	2301      	movs	r3, #1
 8001a44:	e00f      	b.n	8001a66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a46:	4a0a      	ldr	r2, [pc, #40]	; (8001a70 <SysTick_Config+0x40>)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	3b01      	subs	r3, #1
 8001a4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a4e:	210f      	movs	r1, #15
 8001a50:	f04f 30ff 	mov.w	r0, #4294967295
 8001a54:	f7ff ff8e 	bl	8001974 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a58:	4b05      	ldr	r3, [pc, #20]	; (8001a70 <SysTick_Config+0x40>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a5e:	4b04      	ldr	r3, [pc, #16]	; (8001a70 <SysTick_Config+0x40>)
 8001a60:	2207      	movs	r2, #7
 8001a62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a64:	2300      	movs	r3, #0
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3708      	adds	r7, #8
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	e000e010 	.word	0xe000e010

08001a74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b082      	sub	sp, #8
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a7c:	6878      	ldr	r0, [r7, #4]
 8001a7e:	f7ff ff07 	bl	8001890 <__NVIC_SetPriorityGrouping>
}
 8001a82:	bf00      	nop
 8001a84:	3708      	adds	r7, #8
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}

08001a8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a8a:	b580      	push	{r7, lr}
 8001a8c:	b086      	sub	sp, #24
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	4603      	mov	r3, r0
 8001a92:	60b9      	str	r1, [r7, #8]
 8001a94:	607a      	str	r2, [r7, #4]
 8001a96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a9c:	f7ff ff1c 	bl	80018d8 <__NVIC_GetPriorityGrouping>
 8001aa0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001aa2:	687a      	ldr	r2, [r7, #4]
 8001aa4:	68b9      	ldr	r1, [r7, #8]
 8001aa6:	6978      	ldr	r0, [r7, #20]
 8001aa8:	f7ff ff8e 	bl	80019c8 <NVIC_EncodePriority>
 8001aac:	4602      	mov	r2, r0
 8001aae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ab2:	4611      	mov	r1, r2
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f7ff ff5d 	bl	8001974 <__NVIC_SetPriority>
}
 8001aba:	bf00      	nop
 8001abc:	3718      	adds	r7, #24
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}

08001ac2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ac2:	b580      	push	{r7, lr}
 8001ac4:	b082      	sub	sp, #8
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	4603      	mov	r3, r0
 8001aca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001acc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f7ff ff0f 	bl	80018f4 <__NVIC_EnableIRQ>
}
 8001ad6:	bf00      	nop
 8001ad8:	3708      	adds	r7, #8
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}

08001ade <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001ade:	b580      	push	{r7, lr}
 8001ae0:	b082      	sub	sp, #8
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001ae8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aec:	4618      	mov	r0, r3
 8001aee:	f7ff ff1f 	bl	8001930 <__NVIC_DisableIRQ>
}
 8001af2:	bf00      	nop
 8001af4:	3708      	adds	r7, #8
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}

08001afa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001afa:	b580      	push	{r7, lr}
 8001afc:	b082      	sub	sp, #8
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	f7ff ff94 	bl	8001a30 <SysTick_Config>
 8001b08:	4603      	mov	r3, r0
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3708      	adds	r7, #8
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
	...

08001b14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b089      	sub	sp, #36	; 0x24
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
 8001b1c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b22:	2300      	movs	r3, #0
 8001b24:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b26:	2300      	movs	r3, #0
 8001b28:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	61fb      	str	r3, [r7, #28]
 8001b2e:	e159      	b.n	8001de4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b30:	2201      	movs	r2, #1
 8001b32:	69fb      	ldr	r3, [r7, #28]
 8001b34:	fa02 f303 	lsl.w	r3, r2, r3
 8001b38:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	697a      	ldr	r2, [r7, #20]
 8001b40:	4013      	ands	r3, r2
 8001b42:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b44:	693a      	ldr	r2, [r7, #16]
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	f040 8148 	bne.w	8001dde <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	d00b      	beq.n	8001b6e <HAL_GPIO_Init+0x5a>
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	2b02      	cmp	r3, #2
 8001b5c:	d007      	beq.n	8001b6e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b62:	2b11      	cmp	r3, #17
 8001b64:	d003      	beq.n	8001b6e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	2b12      	cmp	r3, #18
 8001b6c:	d130      	bne.n	8001bd0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b74:	69fb      	ldr	r3, [r7, #28]
 8001b76:	005b      	lsls	r3, r3, #1
 8001b78:	2203      	movs	r2, #3
 8001b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7e:	43db      	mvns	r3, r3
 8001b80:	69ba      	ldr	r2, [r7, #24]
 8001b82:	4013      	ands	r3, r2
 8001b84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	68da      	ldr	r2, [r3, #12]
 8001b8a:	69fb      	ldr	r3, [r7, #28]
 8001b8c:	005b      	lsls	r3, r3, #1
 8001b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b92:	69ba      	ldr	r2, [r7, #24]
 8001b94:	4313      	orrs	r3, r2
 8001b96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	69ba      	ldr	r2, [r7, #24]
 8001b9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bac:	43db      	mvns	r3, r3
 8001bae:	69ba      	ldr	r2, [r7, #24]
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	091b      	lsrs	r3, r3, #4
 8001bba:	f003 0201 	and.w	r2, r3, #1
 8001bbe:	69fb      	ldr	r3, [r7, #28]
 8001bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc4:	69ba      	ldr	r2, [r7, #24]
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	69ba      	ldr	r2, [r7, #24]
 8001bce:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	005b      	lsls	r3, r3, #1
 8001bda:	2203      	movs	r2, #3
 8001bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001be0:	43db      	mvns	r3, r3
 8001be2:	69ba      	ldr	r2, [r7, #24]
 8001be4:	4013      	ands	r3, r2
 8001be6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	689a      	ldr	r2, [r3, #8]
 8001bec:	69fb      	ldr	r3, [r7, #28]
 8001bee:	005b      	lsls	r3, r3, #1
 8001bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf4:	69ba      	ldr	r2, [r7, #24]
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	69ba      	ldr	r2, [r7, #24]
 8001bfe:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	2b02      	cmp	r3, #2
 8001c06:	d003      	beq.n	8001c10 <HAL_GPIO_Init+0xfc>
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	2b12      	cmp	r3, #18
 8001c0e:	d123      	bne.n	8001c58 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c10:	69fb      	ldr	r3, [r7, #28]
 8001c12:	08da      	lsrs	r2, r3, #3
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	3208      	adds	r2, #8
 8001c18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c1e:	69fb      	ldr	r3, [r7, #28]
 8001c20:	f003 0307 	and.w	r3, r3, #7
 8001c24:	009b      	lsls	r3, r3, #2
 8001c26:	220f      	movs	r2, #15
 8001c28:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2c:	43db      	mvns	r3, r3
 8001c2e:	69ba      	ldr	r2, [r7, #24]
 8001c30:	4013      	ands	r3, r2
 8001c32:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	691a      	ldr	r2, [r3, #16]
 8001c38:	69fb      	ldr	r3, [r7, #28]
 8001c3a:	f003 0307 	and.w	r3, r3, #7
 8001c3e:	009b      	lsls	r3, r3, #2
 8001c40:	fa02 f303 	lsl.w	r3, r2, r3
 8001c44:	69ba      	ldr	r2, [r7, #24]
 8001c46:	4313      	orrs	r3, r2
 8001c48:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c4a:	69fb      	ldr	r3, [r7, #28]
 8001c4c:	08da      	lsrs	r2, r3, #3
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	3208      	adds	r2, #8
 8001c52:	69b9      	ldr	r1, [r7, #24]
 8001c54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	005b      	lsls	r3, r3, #1
 8001c62:	2203      	movs	r2, #3
 8001c64:	fa02 f303 	lsl.w	r3, r2, r3
 8001c68:	43db      	mvns	r3, r3
 8001c6a:	69ba      	ldr	r2, [r7, #24]
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	f003 0203 	and.w	r2, r3, #3
 8001c78:	69fb      	ldr	r3, [r7, #28]
 8001c7a:	005b      	lsls	r3, r3, #1
 8001c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c80:	69ba      	ldr	r2, [r7, #24]
 8001c82:	4313      	orrs	r3, r2
 8001c84:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	69ba      	ldr	r2, [r7, #24]
 8001c8a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	f000 80a2 	beq.w	8001dde <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	60fb      	str	r3, [r7, #12]
 8001c9e:	4b56      	ldr	r3, [pc, #344]	; (8001df8 <HAL_GPIO_Init+0x2e4>)
 8001ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ca2:	4a55      	ldr	r2, [pc, #340]	; (8001df8 <HAL_GPIO_Init+0x2e4>)
 8001ca4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ca8:	6453      	str	r3, [r2, #68]	; 0x44
 8001caa:	4b53      	ldr	r3, [pc, #332]	; (8001df8 <HAL_GPIO_Init+0x2e4>)
 8001cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cb2:	60fb      	str	r3, [r7, #12]
 8001cb4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001cb6:	4a51      	ldr	r2, [pc, #324]	; (8001dfc <HAL_GPIO_Init+0x2e8>)
 8001cb8:	69fb      	ldr	r3, [r7, #28]
 8001cba:	089b      	lsrs	r3, r3, #2
 8001cbc:	3302      	adds	r3, #2
 8001cbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001cc4:	69fb      	ldr	r3, [r7, #28]
 8001cc6:	f003 0303 	and.w	r3, r3, #3
 8001cca:	009b      	lsls	r3, r3, #2
 8001ccc:	220f      	movs	r2, #15
 8001cce:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd2:	43db      	mvns	r3, r3
 8001cd4:	69ba      	ldr	r2, [r7, #24]
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	4a48      	ldr	r2, [pc, #288]	; (8001e00 <HAL_GPIO_Init+0x2ec>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d019      	beq.n	8001d16 <HAL_GPIO_Init+0x202>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	4a47      	ldr	r2, [pc, #284]	; (8001e04 <HAL_GPIO_Init+0x2f0>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d013      	beq.n	8001d12 <HAL_GPIO_Init+0x1fe>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	4a46      	ldr	r2, [pc, #280]	; (8001e08 <HAL_GPIO_Init+0x2f4>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d00d      	beq.n	8001d0e <HAL_GPIO_Init+0x1fa>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	4a45      	ldr	r2, [pc, #276]	; (8001e0c <HAL_GPIO_Init+0x2f8>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d007      	beq.n	8001d0a <HAL_GPIO_Init+0x1f6>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4a44      	ldr	r2, [pc, #272]	; (8001e10 <HAL_GPIO_Init+0x2fc>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d101      	bne.n	8001d06 <HAL_GPIO_Init+0x1f2>
 8001d02:	2304      	movs	r3, #4
 8001d04:	e008      	b.n	8001d18 <HAL_GPIO_Init+0x204>
 8001d06:	2307      	movs	r3, #7
 8001d08:	e006      	b.n	8001d18 <HAL_GPIO_Init+0x204>
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	e004      	b.n	8001d18 <HAL_GPIO_Init+0x204>
 8001d0e:	2302      	movs	r3, #2
 8001d10:	e002      	b.n	8001d18 <HAL_GPIO_Init+0x204>
 8001d12:	2301      	movs	r3, #1
 8001d14:	e000      	b.n	8001d18 <HAL_GPIO_Init+0x204>
 8001d16:	2300      	movs	r3, #0
 8001d18:	69fa      	ldr	r2, [r7, #28]
 8001d1a:	f002 0203 	and.w	r2, r2, #3
 8001d1e:	0092      	lsls	r2, r2, #2
 8001d20:	4093      	lsls	r3, r2
 8001d22:	69ba      	ldr	r2, [r7, #24]
 8001d24:	4313      	orrs	r3, r2
 8001d26:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d28:	4934      	ldr	r1, [pc, #208]	; (8001dfc <HAL_GPIO_Init+0x2e8>)
 8001d2a:	69fb      	ldr	r3, [r7, #28]
 8001d2c:	089b      	lsrs	r3, r3, #2
 8001d2e:	3302      	adds	r3, #2
 8001d30:	69ba      	ldr	r2, [r7, #24]
 8001d32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d36:	4b37      	ldr	r3, [pc, #220]	; (8001e14 <HAL_GPIO_Init+0x300>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	43db      	mvns	r3, r3
 8001d40:	69ba      	ldr	r2, [r7, #24]
 8001d42:	4013      	ands	r3, r2
 8001d44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d003      	beq.n	8001d5a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001d52:	69ba      	ldr	r2, [r7, #24]
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	4313      	orrs	r3, r2
 8001d58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d5a:	4a2e      	ldr	r2, [pc, #184]	; (8001e14 <HAL_GPIO_Init+0x300>)
 8001d5c:	69bb      	ldr	r3, [r7, #24]
 8001d5e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001d60:	4b2c      	ldr	r3, [pc, #176]	; (8001e14 <HAL_GPIO_Init+0x300>)
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	43db      	mvns	r3, r3
 8001d6a:	69ba      	ldr	r2, [r7, #24]
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d003      	beq.n	8001d84 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001d7c:	69ba      	ldr	r2, [r7, #24]
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	4313      	orrs	r3, r2
 8001d82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d84:	4a23      	ldr	r2, [pc, #140]	; (8001e14 <HAL_GPIO_Init+0x300>)
 8001d86:	69bb      	ldr	r3, [r7, #24]
 8001d88:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d8a:	4b22      	ldr	r3, [pc, #136]	; (8001e14 <HAL_GPIO_Init+0x300>)
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	43db      	mvns	r3, r3
 8001d94:	69ba      	ldr	r2, [r7, #24]
 8001d96:	4013      	ands	r3, r2
 8001d98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d003      	beq.n	8001dae <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001da6:	69ba      	ldr	r2, [r7, #24]
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	4313      	orrs	r3, r2
 8001dac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001dae:	4a19      	ldr	r2, [pc, #100]	; (8001e14 <HAL_GPIO_Init+0x300>)
 8001db0:	69bb      	ldr	r3, [r7, #24]
 8001db2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001db4:	4b17      	ldr	r3, [pc, #92]	; (8001e14 <HAL_GPIO_Init+0x300>)
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	43db      	mvns	r3, r3
 8001dbe:	69ba      	ldr	r2, [r7, #24]
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d003      	beq.n	8001dd8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001dd0:	69ba      	ldr	r2, [r7, #24]
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001dd8:	4a0e      	ldr	r2, [pc, #56]	; (8001e14 <HAL_GPIO_Init+0x300>)
 8001dda:	69bb      	ldr	r3, [r7, #24]
 8001ddc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	3301      	adds	r3, #1
 8001de2:	61fb      	str	r3, [r7, #28]
 8001de4:	69fb      	ldr	r3, [r7, #28]
 8001de6:	2b0f      	cmp	r3, #15
 8001de8:	f67f aea2 	bls.w	8001b30 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001dec:	bf00      	nop
 8001dee:	3724      	adds	r7, #36	; 0x24
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr
 8001df8:	40023800 	.word	0x40023800
 8001dfc:	40013800 	.word	0x40013800
 8001e00:	40020000 	.word	0x40020000
 8001e04:	40020400 	.word	0x40020400
 8001e08:	40020800 	.word	0x40020800
 8001e0c:	40020c00 	.word	0x40020c00
 8001e10:	40021000 	.word	0x40021000
 8001e14:	40013c00 	.word	0x40013c00

08001e18 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b085      	sub	sp, #20
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
 8001e20:	460b      	mov	r3, r1
 8001e22:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	691a      	ldr	r2, [r3, #16]
 8001e28:	887b      	ldrh	r3, [r7, #2]
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d002      	beq.n	8001e36 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e30:	2301      	movs	r3, #1
 8001e32:	73fb      	strb	r3, [r7, #15]
 8001e34:	e001      	b.n	8001e3a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e36:	2300      	movs	r3, #0
 8001e38:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	3714      	adds	r7, #20
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr

08001e48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b083      	sub	sp, #12
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
 8001e50:	460b      	mov	r3, r1
 8001e52:	807b      	strh	r3, [r7, #2]
 8001e54:	4613      	mov	r3, r2
 8001e56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e58:	787b      	ldrb	r3, [r7, #1]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d003      	beq.n	8001e66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e5e:	887a      	ldrh	r2, [r7, #2]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e64:	e003      	b.n	8001e6e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e66:	887b      	ldrh	r3, [r7, #2]
 8001e68:	041a      	lsls	r2, r3, #16
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	619a      	str	r2, [r3, #24]
}
 8001e6e:	bf00      	nop
 8001e70:	370c      	adds	r7, #12
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr
	...

08001e7c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b082      	sub	sp, #8
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	4603      	mov	r3, r0
 8001e84:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001e86:	4b08      	ldr	r3, [pc, #32]	; (8001ea8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e88:	695a      	ldr	r2, [r3, #20]
 8001e8a:	88fb      	ldrh	r3, [r7, #6]
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d006      	beq.n	8001ea0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001e92:	4a05      	ldr	r2, [pc, #20]	; (8001ea8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e94:	88fb      	ldrh	r3, [r7, #6]
 8001e96:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001e98:	88fb      	ldrh	r3, [r7, #6]
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f7ff faae 	bl	80013fc <HAL_GPIO_EXTI_Callback>
  }
}
 8001ea0:	bf00      	nop
 8001ea2:	3708      	adds	r7, #8
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	40013c00 	.word	0x40013c00

08001eac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b086      	sub	sp, #24
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d101      	bne.n	8001ebe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e25b      	b.n	8002376 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 0301 	and.w	r3, r3, #1
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d075      	beq.n	8001fb6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001eca:	4ba3      	ldr	r3, [pc, #652]	; (8002158 <HAL_RCC_OscConfig+0x2ac>)
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	f003 030c 	and.w	r3, r3, #12
 8001ed2:	2b04      	cmp	r3, #4
 8001ed4:	d00c      	beq.n	8001ef0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ed6:	4ba0      	ldr	r3, [pc, #640]	; (8002158 <HAL_RCC_OscConfig+0x2ac>)
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ede:	2b08      	cmp	r3, #8
 8001ee0:	d112      	bne.n	8001f08 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ee2:	4b9d      	ldr	r3, [pc, #628]	; (8002158 <HAL_RCC_OscConfig+0x2ac>)
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001eea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001eee:	d10b      	bne.n	8001f08 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ef0:	4b99      	ldr	r3, [pc, #612]	; (8002158 <HAL_RCC_OscConfig+0x2ac>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d05b      	beq.n	8001fb4 <HAL_RCC_OscConfig+0x108>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d157      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	e236      	b.n	8002376 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f10:	d106      	bne.n	8001f20 <HAL_RCC_OscConfig+0x74>
 8001f12:	4b91      	ldr	r3, [pc, #580]	; (8002158 <HAL_RCC_OscConfig+0x2ac>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a90      	ldr	r2, [pc, #576]	; (8002158 <HAL_RCC_OscConfig+0x2ac>)
 8001f18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f1c:	6013      	str	r3, [r2, #0]
 8001f1e:	e01d      	b.n	8001f5c <HAL_RCC_OscConfig+0xb0>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f28:	d10c      	bne.n	8001f44 <HAL_RCC_OscConfig+0x98>
 8001f2a:	4b8b      	ldr	r3, [pc, #556]	; (8002158 <HAL_RCC_OscConfig+0x2ac>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a8a      	ldr	r2, [pc, #552]	; (8002158 <HAL_RCC_OscConfig+0x2ac>)
 8001f30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f34:	6013      	str	r3, [r2, #0]
 8001f36:	4b88      	ldr	r3, [pc, #544]	; (8002158 <HAL_RCC_OscConfig+0x2ac>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a87      	ldr	r2, [pc, #540]	; (8002158 <HAL_RCC_OscConfig+0x2ac>)
 8001f3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f40:	6013      	str	r3, [r2, #0]
 8001f42:	e00b      	b.n	8001f5c <HAL_RCC_OscConfig+0xb0>
 8001f44:	4b84      	ldr	r3, [pc, #528]	; (8002158 <HAL_RCC_OscConfig+0x2ac>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a83      	ldr	r2, [pc, #524]	; (8002158 <HAL_RCC_OscConfig+0x2ac>)
 8001f4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f4e:	6013      	str	r3, [r2, #0]
 8001f50:	4b81      	ldr	r3, [pc, #516]	; (8002158 <HAL_RCC_OscConfig+0x2ac>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a80      	ldr	r2, [pc, #512]	; (8002158 <HAL_RCC_OscConfig+0x2ac>)
 8001f56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d013      	beq.n	8001f8c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f64:	f7ff fc66 	bl	8001834 <HAL_GetTick>
 8001f68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f6a:	e008      	b.n	8001f7e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f6c:	f7ff fc62 	bl	8001834 <HAL_GetTick>
 8001f70:	4602      	mov	r2, r0
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	1ad3      	subs	r3, r2, r3
 8001f76:	2b64      	cmp	r3, #100	; 0x64
 8001f78:	d901      	bls.n	8001f7e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	e1fb      	b.n	8002376 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f7e:	4b76      	ldr	r3, [pc, #472]	; (8002158 <HAL_RCC_OscConfig+0x2ac>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d0f0      	beq.n	8001f6c <HAL_RCC_OscConfig+0xc0>
 8001f8a:	e014      	b.n	8001fb6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f8c:	f7ff fc52 	bl	8001834 <HAL_GetTick>
 8001f90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f92:	e008      	b.n	8001fa6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f94:	f7ff fc4e 	bl	8001834 <HAL_GetTick>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	2b64      	cmp	r3, #100	; 0x64
 8001fa0:	d901      	bls.n	8001fa6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001fa2:	2303      	movs	r3, #3
 8001fa4:	e1e7      	b.n	8002376 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fa6:	4b6c      	ldr	r3, [pc, #432]	; (8002158 <HAL_RCC_OscConfig+0x2ac>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d1f0      	bne.n	8001f94 <HAL_RCC_OscConfig+0xe8>
 8001fb2:	e000      	b.n	8001fb6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 0302 	and.w	r3, r3, #2
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d063      	beq.n	800208a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001fc2:	4b65      	ldr	r3, [pc, #404]	; (8002158 <HAL_RCC_OscConfig+0x2ac>)
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	f003 030c 	and.w	r3, r3, #12
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d00b      	beq.n	8001fe6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fce:	4b62      	ldr	r3, [pc, #392]	; (8002158 <HAL_RCC_OscConfig+0x2ac>)
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001fd6:	2b08      	cmp	r3, #8
 8001fd8:	d11c      	bne.n	8002014 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fda:	4b5f      	ldr	r3, [pc, #380]	; (8002158 <HAL_RCC_OscConfig+0x2ac>)
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d116      	bne.n	8002014 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fe6:	4b5c      	ldr	r3, [pc, #368]	; (8002158 <HAL_RCC_OscConfig+0x2ac>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f003 0302 	and.w	r3, r3, #2
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d005      	beq.n	8001ffe <HAL_RCC_OscConfig+0x152>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	68db      	ldr	r3, [r3, #12]
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d001      	beq.n	8001ffe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e1bb      	b.n	8002376 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ffe:	4b56      	ldr	r3, [pc, #344]	; (8002158 <HAL_RCC_OscConfig+0x2ac>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	691b      	ldr	r3, [r3, #16]
 800200a:	00db      	lsls	r3, r3, #3
 800200c:	4952      	ldr	r1, [pc, #328]	; (8002158 <HAL_RCC_OscConfig+0x2ac>)
 800200e:	4313      	orrs	r3, r2
 8002010:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002012:	e03a      	b.n	800208a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d020      	beq.n	800205e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800201c:	4b4f      	ldr	r3, [pc, #316]	; (800215c <HAL_RCC_OscConfig+0x2b0>)
 800201e:	2201      	movs	r2, #1
 8002020:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002022:	f7ff fc07 	bl	8001834 <HAL_GetTick>
 8002026:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002028:	e008      	b.n	800203c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800202a:	f7ff fc03 	bl	8001834 <HAL_GetTick>
 800202e:	4602      	mov	r2, r0
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	1ad3      	subs	r3, r2, r3
 8002034:	2b02      	cmp	r3, #2
 8002036:	d901      	bls.n	800203c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002038:	2303      	movs	r3, #3
 800203a:	e19c      	b.n	8002376 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800203c:	4b46      	ldr	r3, [pc, #280]	; (8002158 <HAL_RCC_OscConfig+0x2ac>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f003 0302 	and.w	r3, r3, #2
 8002044:	2b00      	cmp	r3, #0
 8002046:	d0f0      	beq.n	800202a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002048:	4b43      	ldr	r3, [pc, #268]	; (8002158 <HAL_RCC_OscConfig+0x2ac>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	691b      	ldr	r3, [r3, #16]
 8002054:	00db      	lsls	r3, r3, #3
 8002056:	4940      	ldr	r1, [pc, #256]	; (8002158 <HAL_RCC_OscConfig+0x2ac>)
 8002058:	4313      	orrs	r3, r2
 800205a:	600b      	str	r3, [r1, #0]
 800205c:	e015      	b.n	800208a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800205e:	4b3f      	ldr	r3, [pc, #252]	; (800215c <HAL_RCC_OscConfig+0x2b0>)
 8002060:	2200      	movs	r2, #0
 8002062:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002064:	f7ff fbe6 	bl	8001834 <HAL_GetTick>
 8002068:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800206a:	e008      	b.n	800207e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800206c:	f7ff fbe2 	bl	8001834 <HAL_GetTick>
 8002070:	4602      	mov	r2, r0
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	2b02      	cmp	r3, #2
 8002078:	d901      	bls.n	800207e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800207a:	2303      	movs	r3, #3
 800207c:	e17b      	b.n	8002376 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800207e:	4b36      	ldr	r3, [pc, #216]	; (8002158 <HAL_RCC_OscConfig+0x2ac>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 0302 	and.w	r3, r3, #2
 8002086:	2b00      	cmp	r3, #0
 8002088:	d1f0      	bne.n	800206c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 0308 	and.w	r3, r3, #8
 8002092:	2b00      	cmp	r3, #0
 8002094:	d030      	beq.n	80020f8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	695b      	ldr	r3, [r3, #20]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d016      	beq.n	80020cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800209e:	4b30      	ldr	r3, [pc, #192]	; (8002160 <HAL_RCC_OscConfig+0x2b4>)
 80020a0:	2201      	movs	r2, #1
 80020a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020a4:	f7ff fbc6 	bl	8001834 <HAL_GetTick>
 80020a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020aa:	e008      	b.n	80020be <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020ac:	f7ff fbc2 	bl	8001834 <HAL_GetTick>
 80020b0:	4602      	mov	r2, r0
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	1ad3      	subs	r3, r2, r3
 80020b6:	2b02      	cmp	r3, #2
 80020b8:	d901      	bls.n	80020be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80020ba:	2303      	movs	r3, #3
 80020bc:	e15b      	b.n	8002376 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020be:	4b26      	ldr	r3, [pc, #152]	; (8002158 <HAL_RCC_OscConfig+0x2ac>)
 80020c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020c2:	f003 0302 	and.w	r3, r3, #2
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d0f0      	beq.n	80020ac <HAL_RCC_OscConfig+0x200>
 80020ca:	e015      	b.n	80020f8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020cc:	4b24      	ldr	r3, [pc, #144]	; (8002160 <HAL_RCC_OscConfig+0x2b4>)
 80020ce:	2200      	movs	r2, #0
 80020d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020d2:	f7ff fbaf 	bl	8001834 <HAL_GetTick>
 80020d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020d8:	e008      	b.n	80020ec <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020da:	f7ff fbab 	bl	8001834 <HAL_GetTick>
 80020de:	4602      	mov	r2, r0
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	1ad3      	subs	r3, r2, r3
 80020e4:	2b02      	cmp	r3, #2
 80020e6:	d901      	bls.n	80020ec <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80020e8:	2303      	movs	r3, #3
 80020ea:	e144      	b.n	8002376 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020ec:	4b1a      	ldr	r3, [pc, #104]	; (8002158 <HAL_RCC_OscConfig+0x2ac>)
 80020ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020f0:	f003 0302 	and.w	r3, r3, #2
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d1f0      	bne.n	80020da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f003 0304 	and.w	r3, r3, #4
 8002100:	2b00      	cmp	r3, #0
 8002102:	f000 80a0 	beq.w	8002246 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002106:	2300      	movs	r3, #0
 8002108:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800210a:	4b13      	ldr	r3, [pc, #76]	; (8002158 <HAL_RCC_OscConfig+0x2ac>)
 800210c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002112:	2b00      	cmp	r3, #0
 8002114:	d10f      	bne.n	8002136 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002116:	2300      	movs	r3, #0
 8002118:	60bb      	str	r3, [r7, #8]
 800211a:	4b0f      	ldr	r3, [pc, #60]	; (8002158 <HAL_RCC_OscConfig+0x2ac>)
 800211c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211e:	4a0e      	ldr	r2, [pc, #56]	; (8002158 <HAL_RCC_OscConfig+0x2ac>)
 8002120:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002124:	6413      	str	r3, [r2, #64]	; 0x40
 8002126:	4b0c      	ldr	r3, [pc, #48]	; (8002158 <HAL_RCC_OscConfig+0x2ac>)
 8002128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800212e:	60bb      	str	r3, [r7, #8]
 8002130:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002132:	2301      	movs	r3, #1
 8002134:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002136:	4b0b      	ldr	r3, [pc, #44]	; (8002164 <HAL_RCC_OscConfig+0x2b8>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800213e:	2b00      	cmp	r3, #0
 8002140:	d121      	bne.n	8002186 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002142:	4b08      	ldr	r3, [pc, #32]	; (8002164 <HAL_RCC_OscConfig+0x2b8>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a07      	ldr	r2, [pc, #28]	; (8002164 <HAL_RCC_OscConfig+0x2b8>)
 8002148:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800214c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800214e:	f7ff fb71 	bl	8001834 <HAL_GetTick>
 8002152:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002154:	e011      	b.n	800217a <HAL_RCC_OscConfig+0x2ce>
 8002156:	bf00      	nop
 8002158:	40023800 	.word	0x40023800
 800215c:	42470000 	.word	0x42470000
 8002160:	42470e80 	.word	0x42470e80
 8002164:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002168:	f7ff fb64 	bl	8001834 <HAL_GetTick>
 800216c:	4602      	mov	r2, r0
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	1ad3      	subs	r3, r2, r3
 8002172:	2b02      	cmp	r3, #2
 8002174:	d901      	bls.n	800217a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002176:	2303      	movs	r3, #3
 8002178:	e0fd      	b.n	8002376 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800217a:	4b81      	ldr	r3, [pc, #516]	; (8002380 <HAL_RCC_OscConfig+0x4d4>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002182:	2b00      	cmp	r3, #0
 8002184:	d0f0      	beq.n	8002168 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	2b01      	cmp	r3, #1
 800218c:	d106      	bne.n	800219c <HAL_RCC_OscConfig+0x2f0>
 800218e:	4b7d      	ldr	r3, [pc, #500]	; (8002384 <HAL_RCC_OscConfig+0x4d8>)
 8002190:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002192:	4a7c      	ldr	r2, [pc, #496]	; (8002384 <HAL_RCC_OscConfig+0x4d8>)
 8002194:	f043 0301 	orr.w	r3, r3, #1
 8002198:	6713      	str	r3, [r2, #112]	; 0x70
 800219a:	e01c      	b.n	80021d6 <HAL_RCC_OscConfig+0x32a>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	2b05      	cmp	r3, #5
 80021a2:	d10c      	bne.n	80021be <HAL_RCC_OscConfig+0x312>
 80021a4:	4b77      	ldr	r3, [pc, #476]	; (8002384 <HAL_RCC_OscConfig+0x4d8>)
 80021a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021a8:	4a76      	ldr	r2, [pc, #472]	; (8002384 <HAL_RCC_OscConfig+0x4d8>)
 80021aa:	f043 0304 	orr.w	r3, r3, #4
 80021ae:	6713      	str	r3, [r2, #112]	; 0x70
 80021b0:	4b74      	ldr	r3, [pc, #464]	; (8002384 <HAL_RCC_OscConfig+0x4d8>)
 80021b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021b4:	4a73      	ldr	r2, [pc, #460]	; (8002384 <HAL_RCC_OscConfig+0x4d8>)
 80021b6:	f043 0301 	orr.w	r3, r3, #1
 80021ba:	6713      	str	r3, [r2, #112]	; 0x70
 80021bc:	e00b      	b.n	80021d6 <HAL_RCC_OscConfig+0x32a>
 80021be:	4b71      	ldr	r3, [pc, #452]	; (8002384 <HAL_RCC_OscConfig+0x4d8>)
 80021c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021c2:	4a70      	ldr	r2, [pc, #448]	; (8002384 <HAL_RCC_OscConfig+0x4d8>)
 80021c4:	f023 0301 	bic.w	r3, r3, #1
 80021c8:	6713      	str	r3, [r2, #112]	; 0x70
 80021ca:	4b6e      	ldr	r3, [pc, #440]	; (8002384 <HAL_RCC_OscConfig+0x4d8>)
 80021cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ce:	4a6d      	ldr	r2, [pc, #436]	; (8002384 <HAL_RCC_OscConfig+0x4d8>)
 80021d0:	f023 0304 	bic.w	r3, r3, #4
 80021d4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d015      	beq.n	800220a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021de:	f7ff fb29 	bl	8001834 <HAL_GetTick>
 80021e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021e4:	e00a      	b.n	80021fc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021e6:	f7ff fb25 	bl	8001834 <HAL_GetTick>
 80021ea:	4602      	mov	r2, r0
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	1ad3      	subs	r3, r2, r3
 80021f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d901      	bls.n	80021fc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80021f8:	2303      	movs	r3, #3
 80021fa:	e0bc      	b.n	8002376 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021fc:	4b61      	ldr	r3, [pc, #388]	; (8002384 <HAL_RCC_OscConfig+0x4d8>)
 80021fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002200:	f003 0302 	and.w	r3, r3, #2
 8002204:	2b00      	cmp	r3, #0
 8002206:	d0ee      	beq.n	80021e6 <HAL_RCC_OscConfig+0x33a>
 8002208:	e014      	b.n	8002234 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800220a:	f7ff fb13 	bl	8001834 <HAL_GetTick>
 800220e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002210:	e00a      	b.n	8002228 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002212:	f7ff fb0f 	bl	8001834 <HAL_GetTick>
 8002216:	4602      	mov	r2, r0
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	1ad3      	subs	r3, r2, r3
 800221c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002220:	4293      	cmp	r3, r2
 8002222:	d901      	bls.n	8002228 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002224:	2303      	movs	r3, #3
 8002226:	e0a6      	b.n	8002376 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002228:	4b56      	ldr	r3, [pc, #344]	; (8002384 <HAL_RCC_OscConfig+0x4d8>)
 800222a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800222c:	f003 0302 	and.w	r3, r3, #2
 8002230:	2b00      	cmp	r3, #0
 8002232:	d1ee      	bne.n	8002212 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002234:	7dfb      	ldrb	r3, [r7, #23]
 8002236:	2b01      	cmp	r3, #1
 8002238:	d105      	bne.n	8002246 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800223a:	4b52      	ldr	r3, [pc, #328]	; (8002384 <HAL_RCC_OscConfig+0x4d8>)
 800223c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223e:	4a51      	ldr	r2, [pc, #324]	; (8002384 <HAL_RCC_OscConfig+0x4d8>)
 8002240:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002244:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	699b      	ldr	r3, [r3, #24]
 800224a:	2b00      	cmp	r3, #0
 800224c:	f000 8092 	beq.w	8002374 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002250:	4b4c      	ldr	r3, [pc, #304]	; (8002384 <HAL_RCC_OscConfig+0x4d8>)
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	f003 030c 	and.w	r3, r3, #12
 8002258:	2b08      	cmp	r3, #8
 800225a:	d05c      	beq.n	8002316 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	699b      	ldr	r3, [r3, #24]
 8002260:	2b02      	cmp	r3, #2
 8002262:	d141      	bne.n	80022e8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002264:	4b48      	ldr	r3, [pc, #288]	; (8002388 <HAL_RCC_OscConfig+0x4dc>)
 8002266:	2200      	movs	r2, #0
 8002268:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800226a:	f7ff fae3 	bl	8001834 <HAL_GetTick>
 800226e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002270:	e008      	b.n	8002284 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002272:	f7ff fadf 	bl	8001834 <HAL_GetTick>
 8002276:	4602      	mov	r2, r0
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	1ad3      	subs	r3, r2, r3
 800227c:	2b02      	cmp	r3, #2
 800227e:	d901      	bls.n	8002284 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002280:	2303      	movs	r3, #3
 8002282:	e078      	b.n	8002376 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002284:	4b3f      	ldr	r3, [pc, #252]	; (8002384 <HAL_RCC_OscConfig+0x4d8>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800228c:	2b00      	cmp	r3, #0
 800228e:	d1f0      	bne.n	8002272 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	69da      	ldr	r2, [r3, #28]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6a1b      	ldr	r3, [r3, #32]
 8002298:	431a      	orrs	r2, r3
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800229e:	019b      	lsls	r3, r3, #6
 80022a0:	431a      	orrs	r2, r3
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022a6:	085b      	lsrs	r3, r3, #1
 80022a8:	3b01      	subs	r3, #1
 80022aa:	041b      	lsls	r3, r3, #16
 80022ac:	431a      	orrs	r2, r3
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022b2:	061b      	lsls	r3, r3, #24
 80022b4:	4933      	ldr	r1, [pc, #204]	; (8002384 <HAL_RCC_OscConfig+0x4d8>)
 80022b6:	4313      	orrs	r3, r2
 80022b8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022ba:	4b33      	ldr	r3, [pc, #204]	; (8002388 <HAL_RCC_OscConfig+0x4dc>)
 80022bc:	2201      	movs	r2, #1
 80022be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022c0:	f7ff fab8 	bl	8001834 <HAL_GetTick>
 80022c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022c6:	e008      	b.n	80022da <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022c8:	f7ff fab4 	bl	8001834 <HAL_GetTick>
 80022cc:	4602      	mov	r2, r0
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	2b02      	cmp	r3, #2
 80022d4:	d901      	bls.n	80022da <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80022d6:	2303      	movs	r3, #3
 80022d8:	e04d      	b.n	8002376 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022da:	4b2a      	ldr	r3, [pc, #168]	; (8002384 <HAL_RCC_OscConfig+0x4d8>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d0f0      	beq.n	80022c8 <HAL_RCC_OscConfig+0x41c>
 80022e6:	e045      	b.n	8002374 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022e8:	4b27      	ldr	r3, [pc, #156]	; (8002388 <HAL_RCC_OscConfig+0x4dc>)
 80022ea:	2200      	movs	r2, #0
 80022ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ee:	f7ff faa1 	bl	8001834 <HAL_GetTick>
 80022f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022f4:	e008      	b.n	8002308 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022f6:	f7ff fa9d 	bl	8001834 <HAL_GetTick>
 80022fa:	4602      	mov	r2, r0
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	1ad3      	subs	r3, r2, r3
 8002300:	2b02      	cmp	r3, #2
 8002302:	d901      	bls.n	8002308 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002304:	2303      	movs	r3, #3
 8002306:	e036      	b.n	8002376 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002308:	4b1e      	ldr	r3, [pc, #120]	; (8002384 <HAL_RCC_OscConfig+0x4d8>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002310:	2b00      	cmp	r3, #0
 8002312:	d1f0      	bne.n	80022f6 <HAL_RCC_OscConfig+0x44a>
 8002314:	e02e      	b.n	8002374 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	699b      	ldr	r3, [r3, #24]
 800231a:	2b01      	cmp	r3, #1
 800231c:	d101      	bne.n	8002322 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e029      	b.n	8002376 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002322:	4b18      	ldr	r3, [pc, #96]	; (8002384 <HAL_RCC_OscConfig+0x4d8>)
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	69db      	ldr	r3, [r3, #28]
 8002332:	429a      	cmp	r2, r3
 8002334:	d11c      	bne.n	8002370 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002340:	429a      	cmp	r2, r3
 8002342:	d115      	bne.n	8002370 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002344:	68fa      	ldr	r2, [r7, #12]
 8002346:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800234a:	4013      	ands	r3, r2
 800234c:	687a      	ldr	r2, [r7, #4]
 800234e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002350:	4293      	cmp	r3, r2
 8002352:	d10d      	bne.n	8002370 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800235e:	429a      	cmp	r2, r3
 8002360:	d106      	bne.n	8002370 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800236c:	429a      	cmp	r2, r3
 800236e:	d001      	beq.n	8002374 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	e000      	b.n	8002376 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002374:	2300      	movs	r3, #0
}
 8002376:	4618      	mov	r0, r3
 8002378:	3718      	adds	r7, #24
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	40007000 	.word	0x40007000
 8002384:	40023800 	.word	0x40023800
 8002388:	42470060 	.word	0x42470060

0800238c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b084      	sub	sp, #16
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
 8002394:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d101      	bne.n	80023a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	e0cc      	b.n	800253a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023a0:	4b68      	ldr	r3, [pc, #416]	; (8002544 <HAL_RCC_ClockConfig+0x1b8>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 030f 	and.w	r3, r3, #15
 80023a8:	683a      	ldr	r2, [r7, #0]
 80023aa:	429a      	cmp	r2, r3
 80023ac:	d90c      	bls.n	80023c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ae:	4b65      	ldr	r3, [pc, #404]	; (8002544 <HAL_RCC_ClockConfig+0x1b8>)
 80023b0:	683a      	ldr	r2, [r7, #0]
 80023b2:	b2d2      	uxtb	r2, r2
 80023b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023b6:	4b63      	ldr	r3, [pc, #396]	; (8002544 <HAL_RCC_ClockConfig+0x1b8>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 030f 	and.w	r3, r3, #15
 80023be:	683a      	ldr	r2, [r7, #0]
 80023c0:	429a      	cmp	r2, r3
 80023c2:	d001      	beq.n	80023c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	e0b8      	b.n	800253a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 0302 	and.w	r3, r3, #2
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d020      	beq.n	8002416 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 0304 	and.w	r3, r3, #4
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d005      	beq.n	80023ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023e0:	4b59      	ldr	r3, [pc, #356]	; (8002548 <HAL_RCC_ClockConfig+0x1bc>)
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	4a58      	ldr	r2, [pc, #352]	; (8002548 <HAL_RCC_ClockConfig+0x1bc>)
 80023e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80023ea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 0308 	and.w	r3, r3, #8
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d005      	beq.n	8002404 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023f8:	4b53      	ldr	r3, [pc, #332]	; (8002548 <HAL_RCC_ClockConfig+0x1bc>)
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	4a52      	ldr	r2, [pc, #328]	; (8002548 <HAL_RCC_ClockConfig+0x1bc>)
 80023fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002402:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002404:	4b50      	ldr	r3, [pc, #320]	; (8002548 <HAL_RCC_ClockConfig+0x1bc>)
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	494d      	ldr	r1, [pc, #308]	; (8002548 <HAL_RCC_ClockConfig+0x1bc>)
 8002412:	4313      	orrs	r3, r2
 8002414:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 0301 	and.w	r3, r3, #1
 800241e:	2b00      	cmp	r3, #0
 8002420:	d044      	beq.n	80024ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	2b01      	cmp	r3, #1
 8002428:	d107      	bne.n	800243a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800242a:	4b47      	ldr	r3, [pc, #284]	; (8002548 <HAL_RCC_ClockConfig+0x1bc>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002432:	2b00      	cmp	r3, #0
 8002434:	d119      	bne.n	800246a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	e07f      	b.n	800253a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	2b02      	cmp	r3, #2
 8002440:	d003      	beq.n	800244a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002446:	2b03      	cmp	r3, #3
 8002448:	d107      	bne.n	800245a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800244a:	4b3f      	ldr	r3, [pc, #252]	; (8002548 <HAL_RCC_ClockConfig+0x1bc>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002452:	2b00      	cmp	r3, #0
 8002454:	d109      	bne.n	800246a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e06f      	b.n	800253a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800245a:	4b3b      	ldr	r3, [pc, #236]	; (8002548 <HAL_RCC_ClockConfig+0x1bc>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 0302 	and.w	r3, r3, #2
 8002462:	2b00      	cmp	r3, #0
 8002464:	d101      	bne.n	800246a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e067      	b.n	800253a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800246a:	4b37      	ldr	r3, [pc, #220]	; (8002548 <HAL_RCC_ClockConfig+0x1bc>)
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	f023 0203 	bic.w	r2, r3, #3
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	4934      	ldr	r1, [pc, #208]	; (8002548 <HAL_RCC_ClockConfig+0x1bc>)
 8002478:	4313      	orrs	r3, r2
 800247a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800247c:	f7ff f9da 	bl	8001834 <HAL_GetTick>
 8002480:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002482:	e00a      	b.n	800249a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002484:	f7ff f9d6 	bl	8001834 <HAL_GetTick>
 8002488:	4602      	mov	r2, r0
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	1ad3      	subs	r3, r2, r3
 800248e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002492:	4293      	cmp	r3, r2
 8002494:	d901      	bls.n	800249a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002496:	2303      	movs	r3, #3
 8002498:	e04f      	b.n	800253a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800249a:	4b2b      	ldr	r3, [pc, #172]	; (8002548 <HAL_RCC_ClockConfig+0x1bc>)
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	f003 020c 	and.w	r2, r3, #12
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d1eb      	bne.n	8002484 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024ac:	4b25      	ldr	r3, [pc, #148]	; (8002544 <HAL_RCC_ClockConfig+0x1b8>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f003 030f 	and.w	r3, r3, #15
 80024b4:	683a      	ldr	r2, [r7, #0]
 80024b6:	429a      	cmp	r2, r3
 80024b8:	d20c      	bcs.n	80024d4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024ba:	4b22      	ldr	r3, [pc, #136]	; (8002544 <HAL_RCC_ClockConfig+0x1b8>)
 80024bc:	683a      	ldr	r2, [r7, #0]
 80024be:	b2d2      	uxtb	r2, r2
 80024c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024c2:	4b20      	ldr	r3, [pc, #128]	; (8002544 <HAL_RCC_ClockConfig+0x1b8>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 030f 	and.w	r3, r3, #15
 80024ca:	683a      	ldr	r2, [r7, #0]
 80024cc:	429a      	cmp	r2, r3
 80024ce:	d001      	beq.n	80024d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80024d0:	2301      	movs	r3, #1
 80024d2:	e032      	b.n	800253a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 0304 	and.w	r3, r3, #4
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d008      	beq.n	80024f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024e0:	4b19      	ldr	r3, [pc, #100]	; (8002548 <HAL_RCC_ClockConfig+0x1bc>)
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	4916      	ldr	r1, [pc, #88]	; (8002548 <HAL_RCC_ClockConfig+0x1bc>)
 80024ee:	4313      	orrs	r3, r2
 80024f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 0308 	and.w	r3, r3, #8
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d009      	beq.n	8002512 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024fe:	4b12      	ldr	r3, [pc, #72]	; (8002548 <HAL_RCC_ClockConfig+0x1bc>)
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	691b      	ldr	r3, [r3, #16]
 800250a:	00db      	lsls	r3, r3, #3
 800250c:	490e      	ldr	r1, [pc, #56]	; (8002548 <HAL_RCC_ClockConfig+0x1bc>)
 800250e:	4313      	orrs	r3, r2
 8002510:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002512:	f000 f821 	bl	8002558 <HAL_RCC_GetSysClockFreq>
 8002516:	4601      	mov	r1, r0
 8002518:	4b0b      	ldr	r3, [pc, #44]	; (8002548 <HAL_RCC_ClockConfig+0x1bc>)
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	091b      	lsrs	r3, r3, #4
 800251e:	f003 030f 	and.w	r3, r3, #15
 8002522:	4a0a      	ldr	r2, [pc, #40]	; (800254c <HAL_RCC_ClockConfig+0x1c0>)
 8002524:	5cd3      	ldrb	r3, [r2, r3]
 8002526:	fa21 f303 	lsr.w	r3, r1, r3
 800252a:	4a09      	ldr	r2, [pc, #36]	; (8002550 <HAL_RCC_ClockConfig+0x1c4>)
 800252c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800252e:	4b09      	ldr	r3, [pc, #36]	; (8002554 <HAL_RCC_ClockConfig+0x1c8>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4618      	mov	r0, r3
 8002534:	f7ff f93a 	bl	80017ac <HAL_InitTick>

  return HAL_OK;
 8002538:	2300      	movs	r3, #0
}
 800253a:	4618      	mov	r0, r3
 800253c:	3710      	adds	r7, #16
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	40023c00 	.word	0x40023c00
 8002548:	40023800 	.word	0x40023800
 800254c:	08003bc0 	.word	0x08003bc0
 8002550:	20000008 	.word	0x20000008
 8002554:	2000000c 	.word	0x2000000c

08002558 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002558:	b5f0      	push	{r4, r5, r6, r7, lr}
 800255a:	b085      	sub	sp, #20
 800255c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800255e:	2300      	movs	r3, #0
 8002560:	607b      	str	r3, [r7, #4]
 8002562:	2300      	movs	r3, #0
 8002564:	60fb      	str	r3, [r7, #12]
 8002566:	2300      	movs	r3, #0
 8002568:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800256a:	2300      	movs	r3, #0
 800256c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800256e:	4b63      	ldr	r3, [pc, #396]	; (80026fc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	f003 030c 	and.w	r3, r3, #12
 8002576:	2b04      	cmp	r3, #4
 8002578:	d007      	beq.n	800258a <HAL_RCC_GetSysClockFreq+0x32>
 800257a:	2b08      	cmp	r3, #8
 800257c:	d008      	beq.n	8002590 <HAL_RCC_GetSysClockFreq+0x38>
 800257e:	2b00      	cmp	r3, #0
 8002580:	f040 80b4 	bne.w	80026ec <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002584:	4b5e      	ldr	r3, [pc, #376]	; (8002700 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002586:	60bb      	str	r3, [r7, #8]
       break;
 8002588:	e0b3      	b.n	80026f2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800258a:	4b5e      	ldr	r3, [pc, #376]	; (8002704 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800258c:	60bb      	str	r3, [r7, #8]
      break;
 800258e:	e0b0      	b.n	80026f2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002590:	4b5a      	ldr	r3, [pc, #360]	; (80026fc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002598:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800259a:	4b58      	ldr	r3, [pc, #352]	; (80026fc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d04a      	beq.n	800263c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025a6:	4b55      	ldr	r3, [pc, #340]	; (80026fc <HAL_RCC_GetSysClockFreq+0x1a4>)
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	099b      	lsrs	r3, r3, #6
 80025ac:	f04f 0400 	mov.w	r4, #0
 80025b0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80025b4:	f04f 0200 	mov.w	r2, #0
 80025b8:	ea03 0501 	and.w	r5, r3, r1
 80025bc:	ea04 0602 	and.w	r6, r4, r2
 80025c0:	4629      	mov	r1, r5
 80025c2:	4632      	mov	r2, r6
 80025c4:	f04f 0300 	mov.w	r3, #0
 80025c8:	f04f 0400 	mov.w	r4, #0
 80025cc:	0154      	lsls	r4, r2, #5
 80025ce:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80025d2:	014b      	lsls	r3, r1, #5
 80025d4:	4619      	mov	r1, r3
 80025d6:	4622      	mov	r2, r4
 80025d8:	1b49      	subs	r1, r1, r5
 80025da:	eb62 0206 	sbc.w	r2, r2, r6
 80025de:	f04f 0300 	mov.w	r3, #0
 80025e2:	f04f 0400 	mov.w	r4, #0
 80025e6:	0194      	lsls	r4, r2, #6
 80025e8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80025ec:	018b      	lsls	r3, r1, #6
 80025ee:	1a5b      	subs	r3, r3, r1
 80025f0:	eb64 0402 	sbc.w	r4, r4, r2
 80025f4:	f04f 0100 	mov.w	r1, #0
 80025f8:	f04f 0200 	mov.w	r2, #0
 80025fc:	00e2      	lsls	r2, r4, #3
 80025fe:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002602:	00d9      	lsls	r1, r3, #3
 8002604:	460b      	mov	r3, r1
 8002606:	4614      	mov	r4, r2
 8002608:	195b      	adds	r3, r3, r5
 800260a:	eb44 0406 	adc.w	r4, r4, r6
 800260e:	f04f 0100 	mov.w	r1, #0
 8002612:	f04f 0200 	mov.w	r2, #0
 8002616:	0262      	lsls	r2, r4, #9
 8002618:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800261c:	0259      	lsls	r1, r3, #9
 800261e:	460b      	mov	r3, r1
 8002620:	4614      	mov	r4, r2
 8002622:	4618      	mov	r0, r3
 8002624:	4621      	mov	r1, r4
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	f04f 0400 	mov.w	r4, #0
 800262c:	461a      	mov	r2, r3
 800262e:	4623      	mov	r3, r4
 8002630:	f7fd fde2 	bl	80001f8 <__aeabi_uldivmod>
 8002634:	4603      	mov	r3, r0
 8002636:	460c      	mov	r4, r1
 8002638:	60fb      	str	r3, [r7, #12]
 800263a:	e049      	b.n	80026d0 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800263c:	4b2f      	ldr	r3, [pc, #188]	; (80026fc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	099b      	lsrs	r3, r3, #6
 8002642:	f04f 0400 	mov.w	r4, #0
 8002646:	f240 11ff 	movw	r1, #511	; 0x1ff
 800264a:	f04f 0200 	mov.w	r2, #0
 800264e:	ea03 0501 	and.w	r5, r3, r1
 8002652:	ea04 0602 	and.w	r6, r4, r2
 8002656:	4629      	mov	r1, r5
 8002658:	4632      	mov	r2, r6
 800265a:	f04f 0300 	mov.w	r3, #0
 800265e:	f04f 0400 	mov.w	r4, #0
 8002662:	0154      	lsls	r4, r2, #5
 8002664:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002668:	014b      	lsls	r3, r1, #5
 800266a:	4619      	mov	r1, r3
 800266c:	4622      	mov	r2, r4
 800266e:	1b49      	subs	r1, r1, r5
 8002670:	eb62 0206 	sbc.w	r2, r2, r6
 8002674:	f04f 0300 	mov.w	r3, #0
 8002678:	f04f 0400 	mov.w	r4, #0
 800267c:	0194      	lsls	r4, r2, #6
 800267e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002682:	018b      	lsls	r3, r1, #6
 8002684:	1a5b      	subs	r3, r3, r1
 8002686:	eb64 0402 	sbc.w	r4, r4, r2
 800268a:	f04f 0100 	mov.w	r1, #0
 800268e:	f04f 0200 	mov.w	r2, #0
 8002692:	00e2      	lsls	r2, r4, #3
 8002694:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002698:	00d9      	lsls	r1, r3, #3
 800269a:	460b      	mov	r3, r1
 800269c:	4614      	mov	r4, r2
 800269e:	195b      	adds	r3, r3, r5
 80026a0:	eb44 0406 	adc.w	r4, r4, r6
 80026a4:	f04f 0100 	mov.w	r1, #0
 80026a8:	f04f 0200 	mov.w	r2, #0
 80026ac:	02a2      	lsls	r2, r4, #10
 80026ae:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80026b2:	0299      	lsls	r1, r3, #10
 80026b4:	460b      	mov	r3, r1
 80026b6:	4614      	mov	r4, r2
 80026b8:	4618      	mov	r0, r3
 80026ba:	4621      	mov	r1, r4
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	f04f 0400 	mov.w	r4, #0
 80026c2:	461a      	mov	r2, r3
 80026c4:	4623      	mov	r3, r4
 80026c6:	f7fd fd97 	bl	80001f8 <__aeabi_uldivmod>
 80026ca:	4603      	mov	r3, r0
 80026cc:	460c      	mov	r4, r1
 80026ce:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80026d0:	4b0a      	ldr	r3, [pc, #40]	; (80026fc <HAL_RCC_GetSysClockFreq+0x1a4>)
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	0c1b      	lsrs	r3, r3, #16
 80026d6:	f003 0303 	and.w	r3, r3, #3
 80026da:	3301      	adds	r3, #1
 80026dc:	005b      	lsls	r3, r3, #1
 80026de:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80026e0:	68fa      	ldr	r2, [r7, #12]
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80026e8:	60bb      	str	r3, [r7, #8]
      break;
 80026ea:	e002      	b.n	80026f2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80026ec:	4b04      	ldr	r3, [pc, #16]	; (8002700 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80026ee:	60bb      	str	r3, [r7, #8]
      break;
 80026f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026f2:	68bb      	ldr	r3, [r7, #8]
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	3714      	adds	r7, #20
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80026fc:	40023800 	.word	0x40023800
 8002700:	00f42400 	.word	0x00f42400
 8002704:	007a1200 	.word	0x007a1200

08002708 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002708:	b480      	push	{r7}
 800270a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800270c:	4b03      	ldr	r3, [pc, #12]	; (800271c <HAL_RCC_GetHCLKFreq+0x14>)
 800270e:	681b      	ldr	r3, [r3, #0]
}
 8002710:	4618      	mov	r0, r3
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr
 800271a:	bf00      	nop
 800271c:	20000008 	.word	0x20000008

08002720 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002724:	f7ff fff0 	bl	8002708 <HAL_RCC_GetHCLKFreq>
 8002728:	4601      	mov	r1, r0
 800272a:	4b05      	ldr	r3, [pc, #20]	; (8002740 <HAL_RCC_GetPCLK1Freq+0x20>)
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	0a9b      	lsrs	r3, r3, #10
 8002730:	f003 0307 	and.w	r3, r3, #7
 8002734:	4a03      	ldr	r2, [pc, #12]	; (8002744 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002736:	5cd3      	ldrb	r3, [r2, r3]
 8002738:	fa21 f303 	lsr.w	r3, r1, r3
}
 800273c:	4618      	mov	r0, r3
 800273e:	bd80      	pop	{r7, pc}
 8002740:	40023800 	.word	0x40023800
 8002744:	08003bd0 	.word	0x08003bd0

08002748 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800274c:	f7ff ffdc 	bl	8002708 <HAL_RCC_GetHCLKFreq>
 8002750:	4601      	mov	r1, r0
 8002752:	4b05      	ldr	r3, [pc, #20]	; (8002768 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	0b5b      	lsrs	r3, r3, #13
 8002758:	f003 0307 	and.w	r3, r3, #7
 800275c:	4a03      	ldr	r2, [pc, #12]	; (800276c <HAL_RCC_GetPCLK2Freq+0x24>)
 800275e:	5cd3      	ldrb	r3, [r2, r3]
 8002760:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002764:	4618      	mov	r0, r3
 8002766:	bd80      	pop	{r7, pc}
 8002768:	40023800 	.word	0x40023800
 800276c:	08003bd0 	.word	0x08003bd0

08002770 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b082      	sub	sp, #8
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d101      	bne.n	8002782 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e01d      	b.n	80027be <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002788:	b2db      	uxtb	r3, r3
 800278a:	2b00      	cmp	r3, #0
 800278c:	d106      	bne.n	800279c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2200      	movs	r2, #0
 8002792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002796:	6878      	ldr	r0, [r7, #4]
 8002798:	f7fe fef2 	bl	8001580 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2202      	movs	r2, #2
 80027a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	3304      	adds	r3, #4
 80027ac:	4619      	mov	r1, r3
 80027ae:	4610      	mov	r0, r2
 80027b0:	f000 fa3a 	bl	8002c28 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2201      	movs	r2, #1
 80027b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80027bc:	2300      	movs	r3, #0
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3708      	adds	r7, #8
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}

080027c6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80027c6:	b580      	push	{r7, lr}
 80027c8:	b082      	sub	sp, #8
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d101      	bne.n	80027d8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	e01d      	b.n	8002814 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027de:	b2db      	uxtb	r3, r3
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d106      	bne.n	80027f2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2200      	movs	r2, #0
 80027e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80027ec:	6878      	ldr	r0, [r7, #4]
 80027ee:	f000 f815 	bl	800281c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2202      	movs	r2, #2
 80027f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	3304      	adds	r3, #4
 8002802:	4619      	mov	r1, r3
 8002804:	4610      	mov	r0, r2
 8002806:	f000 fa0f 	bl	8002c28 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2201      	movs	r2, #1
 800280e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002812:	2300      	movs	r3, #0
}
 8002814:	4618      	mov	r0, r3
 8002816:	3708      	adds	r7, #8
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}

0800281c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800281c:	b480      	push	{r7}
 800281e:	b083      	sub	sp, #12
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002824:	bf00      	nop
 8002826:	370c      	adds	r7, #12
 8002828:	46bd      	mov	sp, r7
 800282a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282e:	4770      	bx	lr

08002830 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b084      	sub	sp, #16
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
 8002838:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	2201      	movs	r2, #1
 8002840:	6839      	ldr	r1, [r7, #0]
 8002842:	4618      	mov	r0, r3
 8002844:	f000 fc96 	bl	8003174 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a10      	ldr	r2, [pc, #64]	; (8002890 <HAL_TIM_PWM_Start+0x60>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d107      	bne.n	8002862 <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002860:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	f003 0307 	and.w	r3, r3, #7
 800286c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2b06      	cmp	r3, #6
 8002872:	d007      	beq.n	8002884 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f042 0201 	orr.w	r2, r2, #1
 8002882:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002884:	2300      	movs	r3, #0
}
 8002886:	4618      	mov	r0, r3
 8002888:	3710      	adds	r7, #16
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	40010000 	.word	0x40010000

08002894 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b082      	sub	sp, #8
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
 800289c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	2200      	movs	r2, #0
 80028a4:	6839      	ldr	r1, [r7, #0]
 80028a6:	4618      	mov	r0, r3
 80028a8:	f000 fc64 	bl	8003174 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a1d      	ldr	r2, [pc, #116]	; (8002928 <HAL_TIM_PWM_Stop+0x94>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d117      	bne.n	80028e6 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	6a1a      	ldr	r2, [r3, #32]
 80028bc:	f241 1311 	movw	r3, #4369	; 0x1111
 80028c0:	4013      	ands	r3, r2
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d10f      	bne.n	80028e6 <HAL_TIM_PWM_Stop+0x52>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	6a1a      	ldr	r2, [r3, #32]
 80028cc:	f240 4344 	movw	r3, #1092	; 0x444
 80028d0:	4013      	ands	r3, r2
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d107      	bne.n	80028e6 <HAL_TIM_PWM_Stop+0x52>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80028e4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	6a1a      	ldr	r2, [r3, #32]
 80028ec:	f241 1311 	movw	r3, #4369	; 0x1111
 80028f0:	4013      	ands	r3, r2
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d10f      	bne.n	8002916 <HAL_TIM_PWM_Stop+0x82>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	6a1a      	ldr	r2, [r3, #32]
 80028fc:	f240 4344 	movw	r3, #1092	; 0x444
 8002900:	4013      	ands	r3, r2
 8002902:	2b00      	cmp	r3, #0
 8002904:	d107      	bne.n	8002916 <HAL_TIM_PWM_Stop+0x82>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f022 0201 	bic.w	r2, r2, #1
 8002914:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2201      	movs	r2, #1
 800291a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800291e:	2300      	movs	r3, #0
}
 8002920:	4618      	mov	r0, r3
 8002922:	3708      	adds	r7, #8
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}
 8002928:	40010000 	.word	0x40010000

0800292c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b084      	sub	sp, #16
 8002930:	af00      	add	r7, sp, #0
 8002932:	60f8      	str	r0, [r7, #12]
 8002934:	60b9      	str	r1, [r7, #8]
 8002936:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800293e:	2b01      	cmp	r3, #1
 8002940:	d101      	bne.n	8002946 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002942:	2302      	movs	r3, #2
 8002944:	e0b4      	b.n	8002ab0 <HAL_TIM_PWM_ConfigChannel+0x184>
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	2201      	movs	r2, #1
 800294a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	2202      	movs	r2, #2
 8002952:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2b0c      	cmp	r3, #12
 800295a:	f200 809f 	bhi.w	8002a9c <HAL_TIM_PWM_ConfigChannel+0x170>
 800295e:	a201      	add	r2, pc, #4	; (adr r2, 8002964 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8002960:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002964:	08002999 	.word	0x08002999
 8002968:	08002a9d 	.word	0x08002a9d
 800296c:	08002a9d 	.word	0x08002a9d
 8002970:	08002a9d 	.word	0x08002a9d
 8002974:	080029d9 	.word	0x080029d9
 8002978:	08002a9d 	.word	0x08002a9d
 800297c:	08002a9d 	.word	0x08002a9d
 8002980:	08002a9d 	.word	0x08002a9d
 8002984:	08002a1b 	.word	0x08002a1b
 8002988:	08002a9d 	.word	0x08002a9d
 800298c:	08002a9d 	.word	0x08002a9d
 8002990:	08002a9d 	.word	0x08002a9d
 8002994:	08002a5b 	.word	0x08002a5b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	68b9      	ldr	r1, [r7, #8]
 800299e:	4618      	mov	r0, r3
 80029a0:	f000 f9c2 	bl	8002d28 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	699a      	ldr	r2, [r3, #24]
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f042 0208 	orr.w	r2, r2, #8
 80029b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	699a      	ldr	r2, [r3, #24]
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f022 0204 	bic.w	r2, r2, #4
 80029c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	6999      	ldr	r1, [r3, #24]
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	691a      	ldr	r2, [r3, #16]
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	430a      	orrs	r2, r1
 80029d4:	619a      	str	r2, [r3, #24]
      break;
 80029d6:	e062      	b.n	8002a9e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	68b9      	ldr	r1, [r7, #8]
 80029de:	4618      	mov	r0, r3
 80029e0:	f000 fa08 	bl	8002df4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	699a      	ldr	r2, [r3, #24]
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80029f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	699a      	ldr	r2, [r3, #24]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	6999      	ldr	r1, [r3, #24]
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	691b      	ldr	r3, [r3, #16]
 8002a0e:	021a      	lsls	r2, r3, #8
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	430a      	orrs	r2, r1
 8002a16:	619a      	str	r2, [r3, #24]
      break;
 8002a18:	e041      	b.n	8002a9e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	68b9      	ldr	r1, [r7, #8]
 8002a20:	4618      	mov	r0, r3
 8002a22:	f000 fa53 	bl	8002ecc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	69da      	ldr	r2, [r3, #28]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f042 0208 	orr.w	r2, r2, #8
 8002a34:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	69da      	ldr	r2, [r3, #28]
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f022 0204 	bic.w	r2, r2, #4
 8002a44:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	69d9      	ldr	r1, [r3, #28]
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	691a      	ldr	r2, [r3, #16]
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	430a      	orrs	r2, r1
 8002a56:	61da      	str	r2, [r3, #28]
      break;
 8002a58:	e021      	b.n	8002a9e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	68b9      	ldr	r1, [r7, #8]
 8002a60:	4618      	mov	r0, r3
 8002a62:	f000 fa9d 	bl	8002fa0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	69da      	ldr	r2, [r3, #28]
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a74:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	69da      	ldr	r2, [r3, #28]
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a84:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	69d9      	ldr	r1, [r3, #28]
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	691b      	ldr	r3, [r3, #16]
 8002a90:	021a      	lsls	r2, r3, #8
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	430a      	orrs	r2, r1
 8002a98:	61da      	str	r2, [r3, #28]
      break;
 8002a9a:	e000      	b.n	8002a9e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8002a9c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002aae:	2300      	movs	r3, #0
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	3710      	adds	r7, #16
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}

08002ab8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b084      	sub	sp, #16
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
 8002ac0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d101      	bne.n	8002ad0 <HAL_TIM_ConfigClockSource+0x18>
 8002acc:	2302      	movs	r3, #2
 8002ace:	e0a6      	b.n	8002c1e <HAL_TIM_ConfigClockSource+0x166>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2202      	movs	r2, #2
 8002adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002aee:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002af6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	68fa      	ldr	r2, [r7, #12]
 8002afe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	2b40      	cmp	r3, #64	; 0x40
 8002b06:	d067      	beq.n	8002bd8 <HAL_TIM_ConfigClockSource+0x120>
 8002b08:	2b40      	cmp	r3, #64	; 0x40
 8002b0a:	d80b      	bhi.n	8002b24 <HAL_TIM_ConfigClockSource+0x6c>
 8002b0c:	2b10      	cmp	r3, #16
 8002b0e:	d073      	beq.n	8002bf8 <HAL_TIM_ConfigClockSource+0x140>
 8002b10:	2b10      	cmp	r3, #16
 8002b12:	d802      	bhi.n	8002b1a <HAL_TIM_ConfigClockSource+0x62>
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d06f      	beq.n	8002bf8 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002b18:	e078      	b.n	8002c0c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002b1a:	2b20      	cmp	r3, #32
 8002b1c:	d06c      	beq.n	8002bf8 <HAL_TIM_ConfigClockSource+0x140>
 8002b1e:	2b30      	cmp	r3, #48	; 0x30
 8002b20:	d06a      	beq.n	8002bf8 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002b22:	e073      	b.n	8002c0c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002b24:	2b70      	cmp	r3, #112	; 0x70
 8002b26:	d00d      	beq.n	8002b44 <HAL_TIM_ConfigClockSource+0x8c>
 8002b28:	2b70      	cmp	r3, #112	; 0x70
 8002b2a:	d804      	bhi.n	8002b36 <HAL_TIM_ConfigClockSource+0x7e>
 8002b2c:	2b50      	cmp	r3, #80	; 0x50
 8002b2e:	d033      	beq.n	8002b98 <HAL_TIM_ConfigClockSource+0xe0>
 8002b30:	2b60      	cmp	r3, #96	; 0x60
 8002b32:	d041      	beq.n	8002bb8 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002b34:	e06a      	b.n	8002c0c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002b36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b3a:	d066      	beq.n	8002c0a <HAL_TIM_ConfigClockSource+0x152>
 8002b3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b40:	d017      	beq.n	8002b72 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002b42:	e063      	b.n	8002c0c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6818      	ldr	r0, [r3, #0]
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	6899      	ldr	r1, [r3, #8]
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	685a      	ldr	r2, [r3, #4]
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	f000 faee 	bl	8003134 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002b66:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	68fa      	ldr	r2, [r7, #12]
 8002b6e:	609a      	str	r2, [r3, #8]
      break;
 8002b70:	e04c      	b.n	8002c0c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6818      	ldr	r0, [r3, #0]
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	6899      	ldr	r1, [r3, #8]
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	685a      	ldr	r2, [r3, #4]
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	68db      	ldr	r3, [r3, #12]
 8002b82:	f000 fad7 	bl	8003134 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	689a      	ldr	r2, [r3, #8]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b94:	609a      	str	r2, [r3, #8]
      break;
 8002b96:	e039      	b.n	8002c0c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6818      	ldr	r0, [r3, #0]
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	6859      	ldr	r1, [r3, #4]
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	68db      	ldr	r3, [r3, #12]
 8002ba4:	461a      	mov	r2, r3
 8002ba6:	f000 fa4b 	bl	8003040 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	2150      	movs	r1, #80	; 0x50
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f000 faa4 	bl	80030fe <TIM_ITRx_SetConfig>
      break;
 8002bb6:	e029      	b.n	8002c0c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6818      	ldr	r0, [r3, #0]
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	6859      	ldr	r1, [r3, #4]
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	461a      	mov	r2, r3
 8002bc6:	f000 fa6a 	bl	800309e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	2160      	movs	r1, #96	; 0x60
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f000 fa94 	bl	80030fe <TIM_ITRx_SetConfig>
      break;
 8002bd6:	e019      	b.n	8002c0c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6818      	ldr	r0, [r3, #0]
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	6859      	ldr	r1, [r3, #4]
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	461a      	mov	r2, r3
 8002be6:	f000 fa2b 	bl	8003040 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	2140      	movs	r1, #64	; 0x40
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f000 fa84 	bl	80030fe <TIM_ITRx_SetConfig>
      break;
 8002bf6:	e009      	b.n	8002c0c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4619      	mov	r1, r3
 8002c02:	4610      	mov	r0, r2
 8002c04:	f000 fa7b 	bl	80030fe <TIM_ITRx_SetConfig>
      break;
 8002c08:	e000      	b.n	8002c0c <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002c0a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2201      	movs	r2, #1
 8002c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2200      	movs	r2, #0
 8002c18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c1c:	2300      	movs	r3, #0
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3710      	adds	r7, #16
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}
	...

08002c28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b085      	sub	sp, #20
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
 8002c30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	4a34      	ldr	r2, [pc, #208]	; (8002d0c <TIM_Base_SetConfig+0xe4>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d00f      	beq.n	8002c60 <TIM_Base_SetConfig+0x38>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c46:	d00b      	beq.n	8002c60 <TIM_Base_SetConfig+0x38>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	4a31      	ldr	r2, [pc, #196]	; (8002d10 <TIM_Base_SetConfig+0xe8>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d007      	beq.n	8002c60 <TIM_Base_SetConfig+0x38>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	4a30      	ldr	r2, [pc, #192]	; (8002d14 <TIM_Base_SetConfig+0xec>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d003      	beq.n	8002c60 <TIM_Base_SetConfig+0x38>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	4a2f      	ldr	r2, [pc, #188]	; (8002d18 <TIM_Base_SetConfig+0xf0>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d108      	bne.n	8002c72 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	68fa      	ldr	r2, [r7, #12]
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	4a25      	ldr	r2, [pc, #148]	; (8002d0c <TIM_Base_SetConfig+0xe4>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d01b      	beq.n	8002cb2 <TIM_Base_SetConfig+0x8a>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c80:	d017      	beq.n	8002cb2 <TIM_Base_SetConfig+0x8a>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	4a22      	ldr	r2, [pc, #136]	; (8002d10 <TIM_Base_SetConfig+0xe8>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d013      	beq.n	8002cb2 <TIM_Base_SetConfig+0x8a>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	4a21      	ldr	r2, [pc, #132]	; (8002d14 <TIM_Base_SetConfig+0xec>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d00f      	beq.n	8002cb2 <TIM_Base_SetConfig+0x8a>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	4a20      	ldr	r2, [pc, #128]	; (8002d18 <TIM_Base_SetConfig+0xf0>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d00b      	beq.n	8002cb2 <TIM_Base_SetConfig+0x8a>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	4a1f      	ldr	r2, [pc, #124]	; (8002d1c <TIM_Base_SetConfig+0xf4>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d007      	beq.n	8002cb2 <TIM_Base_SetConfig+0x8a>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	4a1e      	ldr	r2, [pc, #120]	; (8002d20 <TIM_Base_SetConfig+0xf8>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d003      	beq.n	8002cb2 <TIM_Base_SetConfig+0x8a>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	4a1d      	ldr	r2, [pc, #116]	; (8002d24 <TIM_Base_SetConfig+0xfc>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d108      	bne.n	8002cc4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cb8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	68db      	ldr	r3, [r3, #12]
 8002cbe:	68fa      	ldr	r2, [r7, #12]
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	695b      	ldr	r3, [r3, #20]
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	68fa      	ldr	r2, [r7, #12]
 8002cd6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	689a      	ldr	r2, [r3, #8]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	4a08      	ldr	r2, [pc, #32]	; (8002d0c <TIM_Base_SetConfig+0xe4>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d103      	bne.n	8002cf8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	691a      	ldr	r2, [r3, #16]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	615a      	str	r2, [r3, #20]
}
 8002cfe:	bf00      	nop
 8002d00:	3714      	adds	r7, #20
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr
 8002d0a:	bf00      	nop
 8002d0c:	40010000 	.word	0x40010000
 8002d10:	40000400 	.word	0x40000400
 8002d14:	40000800 	.word	0x40000800
 8002d18:	40000c00 	.word	0x40000c00
 8002d1c:	40014000 	.word	0x40014000
 8002d20:	40014400 	.word	0x40014400
 8002d24:	40014800 	.word	0x40014800

08002d28 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b087      	sub	sp, #28
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
 8002d30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6a1b      	ldr	r3, [r3, #32]
 8002d36:	f023 0201 	bic.w	r2, r3, #1
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6a1b      	ldr	r3, [r3, #32]
 8002d42:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	699b      	ldr	r3, [r3, #24]
 8002d4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	f023 0303 	bic.w	r3, r3, #3
 8002d5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	68fa      	ldr	r2, [r7, #12]
 8002d66:	4313      	orrs	r3, r2
 8002d68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	f023 0302 	bic.w	r3, r3, #2
 8002d70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	697a      	ldr	r2, [r7, #20]
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	4a1c      	ldr	r2, [pc, #112]	; (8002df0 <TIM_OC1_SetConfig+0xc8>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d10c      	bne.n	8002d9e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	f023 0308 	bic.w	r3, r3, #8
 8002d8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	68db      	ldr	r3, [r3, #12]
 8002d90:	697a      	ldr	r2, [r7, #20]
 8002d92:	4313      	orrs	r3, r2
 8002d94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	f023 0304 	bic.w	r3, r3, #4
 8002d9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	4a13      	ldr	r2, [pc, #76]	; (8002df0 <TIM_OC1_SetConfig+0xc8>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d111      	bne.n	8002dca <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002dac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002db4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	695b      	ldr	r3, [r3, #20]
 8002dba:	693a      	ldr	r2, [r7, #16]
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	699b      	ldr	r3, [r3, #24]
 8002dc4:	693a      	ldr	r2, [r7, #16]
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	693a      	ldr	r2, [r7, #16]
 8002dce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	68fa      	ldr	r2, [r7, #12]
 8002dd4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	685a      	ldr	r2, [r3, #4]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	697a      	ldr	r2, [r7, #20]
 8002de2:	621a      	str	r2, [r3, #32]
}
 8002de4:	bf00      	nop
 8002de6:	371c      	adds	r7, #28
 8002de8:	46bd      	mov	sp, r7
 8002dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dee:	4770      	bx	lr
 8002df0:	40010000 	.word	0x40010000

08002df4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b087      	sub	sp, #28
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
 8002dfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6a1b      	ldr	r3, [r3, #32]
 8002e02:	f023 0210 	bic.w	r2, r3, #16
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6a1b      	ldr	r3, [r3, #32]
 8002e0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	699b      	ldr	r3, [r3, #24]
 8002e1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	021b      	lsls	r3, r3, #8
 8002e32:	68fa      	ldr	r2, [r7, #12]
 8002e34:	4313      	orrs	r3, r2
 8002e36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	f023 0320 	bic.w	r3, r3, #32
 8002e3e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	011b      	lsls	r3, r3, #4
 8002e46:	697a      	ldr	r2, [r7, #20]
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	4a1e      	ldr	r2, [pc, #120]	; (8002ec8 <TIM_OC2_SetConfig+0xd4>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d10d      	bne.n	8002e70 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	68db      	ldr	r3, [r3, #12]
 8002e60:	011b      	lsls	r3, r3, #4
 8002e62:	697a      	ldr	r2, [r7, #20]
 8002e64:	4313      	orrs	r3, r2
 8002e66:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e6e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	4a15      	ldr	r2, [pc, #84]	; (8002ec8 <TIM_OC2_SetConfig+0xd4>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d113      	bne.n	8002ea0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002e7e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002e86:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	695b      	ldr	r3, [r3, #20]
 8002e8c:	009b      	lsls	r3, r3, #2
 8002e8e:	693a      	ldr	r2, [r7, #16]
 8002e90:	4313      	orrs	r3, r2
 8002e92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	699b      	ldr	r3, [r3, #24]
 8002e98:	009b      	lsls	r3, r3, #2
 8002e9a:	693a      	ldr	r2, [r7, #16]
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	693a      	ldr	r2, [r7, #16]
 8002ea4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	68fa      	ldr	r2, [r7, #12]
 8002eaa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	685a      	ldr	r2, [r3, #4]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	697a      	ldr	r2, [r7, #20]
 8002eb8:	621a      	str	r2, [r3, #32]
}
 8002eba:	bf00      	nop
 8002ebc:	371c      	adds	r7, #28
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr
 8002ec6:	bf00      	nop
 8002ec8:	40010000 	.word	0x40010000

08002ecc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b087      	sub	sp, #28
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
 8002ed4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6a1b      	ldr	r3, [r3, #32]
 8002eda:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6a1b      	ldr	r3, [r3, #32]
 8002ee6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	69db      	ldr	r3, [r3, #28]
 8002ef2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002efa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	f023 0303 	bic.w	r3, r3, #3
 8002f02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	68fa      	ldr	r2, [r7, #12]
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002f14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	021b      	lsls	r3, r3, #8
 8002f1c:	697a      	ldr	r2, [r7, #20]
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	4a1d      	ldr	r2, [pc, #116]	; (8002f9c <TIM_OC3_SetConfig+0xd0>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d10d      	bne.n	8002f46 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002f30:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	68db      	ldr	r3, [r3, #12]
 8002f36:	021b      	lsls	r3, r3, #8
 8002f38:	697a      	ldr	r2, [r7, #20]
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002f44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	4a14      	ldr	r2, [pc, #80]	; (8002f9c <TIM_OC3_SetConfig+0xd0>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d113      	bne.n	8002f76 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002f54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002f5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	695b      	ldr	r3, [r3, #20]
 8002f62:	011b      	lsls	r3, r3, #4
 8002f64:	693a      	ldr	r2, [r7, #16]
 8002f66:	4313      	orrs	r3, r2
 8002f68:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	699b      	ldr	r3, [r3, #24]
 8002f6e:	011b      	lsls	r3, r3, #4
 8002f70:	693a      	ldr	r2, [r7, #16]
 8002f72:	4313      	orrs	r3, r2
 8002f74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	693a      	ldr	r2, [r7, #16]
 8002f7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	68fa      	ldr	r2, [r7, #12]
 8002f80:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	685a      	ldr	r2, [r3, #4]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	697a      	ldr	r2, [r7, #20]
 8002f8e:	621a      	str	r2, [r3, #32]
}
 8002f90:	bf00      	nop
 8002f92:	371c      	adds	r7, #28
 8002f94:	46bd      	mov	sp, r7
 8002f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9a:	4770      	bx	lr
 8002f9c:	40010000 	.word	0x40010000

08002fa0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b087      	sub	sp, #28
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
 8002fa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6a1b      	ldr	r3, [r3, #32]
 8002fae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6a1b      	ldr	r3, [r3, #32]
 8002fba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	69db      	ldr	r3, [r3, #28]
 8002fc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002fce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fd6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	021b      	lsls	r3, r3, #8
 8002fde:	68fa      	ldr	r2, [r7, #12]
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002fea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	031b      	lsls	r3, r3, #12
 8002ff2:	693a      	ldr	r2, [r7, #16]
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	4a10      	ldr	r2, [pc, #64]	; (800303c <TIM_OC4_SetConfig+0x9c>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d109      	bne.n	8003014 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003006:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	695b      	ldr	r3, [r3, #20]
 800300c:	019b      	lsls	r3, r3, #6
 800300e:	697a      	ldr	r2, [r7, #20]
 8003010:	4313      	orrs	r3, r2
 8003012:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	697a      	ldr	r2, [r7, #20]
 8003018:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	68fa      	ldr	r2, [r7, #12]
 800301e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	685a      	ldr	r2, [r3, #4]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	693a      	ldr	r2, [r7, #16]
 800302c:	621a      	str	r2, [r3, #32]
}
 800302e:	bf00      	nop
 8003030:	371c      	adds	r7, #28
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr
 800303a:	bf00      	nop
 800303c:	40010000 	.word	0x40010000

08003040 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003040:	b480      	push	{r7}
 8003042:	b087      	sub	sp, #28
 8003044:	af00      	add	r7, sp, #0
 8003046:	60f8      	str	r0, [r7, #12]
 8003048:	60b9      	str	r1, [r7, #8]
 800304a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	6a1b      	ldr	r3, [r3, #32]
 8003050:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	6a1b      	ldr	r3, [r3, #32]
 8003056:	f023 0201 	bic.w	r2, r3, #1
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	699b      	ldr	r3, [r3, #24]
 8003062:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800306a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	011b      	lsls	r3, r3, #4
 8003070:	693a      	ldr	r2, [r7, #16]
 8003072:	4313      	orrs	r3, r2
 8003074:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	f023 030a 	bic.w	r3, r3, #10
 800307c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800307e:	697a      	ldr	r2, [r7, #20]
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	4313      	orrs	r3, r2
 8003084:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	693a      	ldr	r2, [r7, #16]
 800308a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	697a      	ldr	r2, [r7, #20]
 8003090:	621a      	str	r2, [r3, #32]
}
 8003092:	bf00      	nop
 8003094:	371c      	adds	r7, #28
 8003096:	46bd      	mov	sp, r7
 8003098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309c:	4770      	bx	lr

0800309e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800309e:	b480      	push	{r7}
 80030a0:	b087      	sub	sp, #28
 80030a2:	af00      	add	r7, sp, #0
 80030a4:	60f8      	str	r0, [r7, #12]
 80030a6:	60b9      	str	r1, [r7, #8]
 80030a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	6a1b      	ldr	r3, [r3, #32]
 80030ae:	f023 0210 	bic.w	r2, r3, #16
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	699b      	ldr	r3, [r3, #24]
 80030ba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	6a1b      	ldr	r3, [r3, #32]
 80030c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80030c8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	031b      	lsls	r3, r3, #12
 80030ce:	697a      	ldr	r2, [r7, #20]
 80030d0:	4313      	orrs	r3, r2
 80030d2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80030da:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	011b      	lsls	r3, r3, #4
 80030e0:	693a      	ldr	r2, [r7, #16]
 80030e2:	4313      	orrs	r3, r2
 80030e4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	697a      	ldr	r2, [r7, #20]
 80030ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	693a      	ldr	r2, [r7, #16]
 80030f0:	621a      	str	r2, [r3, #32]
}
 80030f2:	bf00      	nop
 80030f4:	371c      	adds	r7, #28
 80030f6:	46bd      	mov	sp, r7
 80030f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fc:	4770      	bx	lr

080030fe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80030fe:	b480      	push	{r7}
 8003100:	b085      	sub	sp, #20
 8003102:	af00      	add	r7, sp, #0
 8003104:	6078      	str	r0, [r7, #4]
 8003106:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003114:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003116:	683a      	ldr	r2, [r7, #0]
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	4313      	orrs	r3, r2
 800311c:	f043 0307 	orr.w	r3, r3, #7
 8003120:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	68fa      	ldr	r2, [r7, #12]
 8003126:	609a      	str	r2, [r3, #8]
}
 8003128:	bf00      	nop
 800312a:	3714      	adds	r7, #20
 800312c:	46bd      	mov	sp, r7
 800312e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003132:	4770      	bx	lr

08003134 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003134:	b480      	push	{r7}
 8003136:	b087      	sub	sp, #28
 8003138:	af00      	add	r7, sp, #0
 800313a:	60f8      	str	r0, [r7, #12]
 800313c:	60b9      	str	r1, [r7, #8]
 800313e:	607a      	str	r2, [r7, #4]
 8003140:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800314e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	021a      	lsls	r2, r3, #8
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	431a      	orrs	r2, r3
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	4313      	orrs	r3, r2
 800315c:	697a      	ldr	r2, [r7, #20]
 800315e:	4313      	orrs	r3, r2
 8003160:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	697a      	ldr	r2, [r7, #20]
 8003166:	609a      	str	r2, [r3, #8]
}
 8003168:	bf00      	nop
 800316a:	371c      	adds	r7, #28
 800316c:	46bd      	mov	sp, r7
 800316e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003172:	4770      	bx	lr

08003174 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003174:	b480      	push	{r7}
 8003176:	b087      	sub	sp, #28
 8003178:	af00      	add	r7, sp, #0
 800317a:	60f8      	str	r0, [r7, #12]
 800317c:	60b9      	str	r1, [r7, #8]
 800317e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	f003 031f 	and.w	r3, r3, #31
 8003186:	2201      	movs	r2, #1
 8003188:	fa02 f303 	lsl.w	r3, r2, r3
 800318c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	6a1a      	ldr	r2, [r3, #32]
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	43db      	mvns	r3, r3
 8003196:	401a      	ands	r2, r3
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	6a1a      	ldr	r2, [r3, #32]
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	f003 031f 	and.w	r3, r3, #31
 80031a6:	6879      	ldr	r1, [r7, #4]
 80031a8:	fa01 f303 	lsl.w	r3, r1, r3
 80031ac:	431a      	orrs	r2, r3
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	621a      	str	r2, [r3, #32]
}
 80031b2:	bf00      	nop
 80031b4:	371c      	adds	r7, #28
 80031b6:	46bd      	mov	sp, r7
 80031b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031bc:	4770      	bx	lr
	...

080031c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b085      	sub	sp, #20
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
 80031c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d101      	bne.n	80031d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80031d4:	2302      	movs	r3, #2
 80031d6:	e050      	b.n	800327a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2201      	movs	r2, #1
 80031dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2202      	movs	r2, #2
 80031e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	68fa      	ldr	r2, [r7, #12]
 8003206:	4313      	orrs	r3, r2
 8003208:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	68fa      	ldr	r2, [r7, #12]
 8003210:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a1c      	ldr	r2, [pc, #112]	; (8003288 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d018      	beq.n	800324e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003224:	d013      	beq.n	800324e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a18      	ldr	r2, [pc, #96]	; (800328c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d00e      	beq.n	800324e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a16      	ldr	r2, [pc, #88]	; (8003290 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d009      	beq.n	800324e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a15      	ldr	r2, [pc, #84]	; (8003294 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d004      	beq.n	800324e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a13      	ldr	r2, [pc, #76]	; (8003298 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d10c      	bne.n	8003268 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003254:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	68ba      	ldr	r2, [r7, #8]
 800325c:	4313      	orrs	r3, r2
 800325e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	68ba      	ldr	r2, [r7, #8]
 8003266:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2201      	movs	r2, #1
 800326c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2200      	movs	r2, #0
 8003274:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003278:	2300      	movs	r3, #0
}
 800327a:	4618      	mov	r0, r3
 800327c:	3714      	adds	r7, #20
 800327e:	46bd      	mov	sp, r7
 8003280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003284:	4770      	bx	lr
 8003286:	bf00      	nop
 8003288:	40010000 	.word	0x40010000
 800328c:	40000400 	.word	0x40000400
 8003290:	40000800 	.word	0x40000800
 8003294:	40000c00 	.word	0x40000c00
 8003298:	40014000 	.word	0x40014000

0800329c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b082      	sub	sp, #8
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d101      	bne.n	80032ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	e03f      	b.n	800332e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d106      	bne.n	80032c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2200      	movs	r2, #0
 80032be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	f7fe f9de 	bl	8001684 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2224      	movs	r2, #36	; 0x24
 80032cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	68da      	ldr	r2, [r3, #12]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80032de:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80032e0:	6878      	ldr	r0, [r7, #4]
 80032e2:	f000 f829 	bl	8003338 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	691a      	ldr	r2, [r3, #16]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80032f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	695a      	ldr	r2, [r3, #20]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003304:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	68da      	ldr	r2, [r3, #12]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003314:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2200      	movs	r2, #0
 800331a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2220      	movs	r2, #32
 8003320:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2220      	movs	r2, #32
 8003328:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800332c:	2300      	movs	r3, #0
}
 800332e:	4618      	mov	r0, r3
 8003330:	3708      	adds	r7, #8
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}
	...

08003338 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800333c:	b085      	sub	sp, #20
 800333e:	af00      	add	r7, sp, #0
 8003340:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	691b      	ldr	r3, [r3, #16]
 8003348:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	68da      	ldr	r2, [r3, #12]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	430a      	orrs	r2, r1
 8003356:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	689a      	ldr	r2, [r3, #8]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	691b      	ldr	r3, [r3, #16]
 8003360:	431a      	orrs	r2, r3
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	695b      	ldr	r3, [r3, #20]
 8003366:	431a      	orrs	r2, r3
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	69db      	ldr	r3, [r3, #28]
 800336c:	4313      	orrs	r3, r2
 800336e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	68db      	ldr	r3, [r3, #12]
 8003376:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800337a:	f023 030c 	bic.w	r3, r3, #12
 800337e:	687a      	ldr	r2, [r7, #4]
 8003380:	6812      	ldr	r2, [r2, #0]
 8003382:	68f9      	ldr	r1, [r7, #12]
 8003384:	430b      	orrs	r3, r1
 8003386:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	695b      	ldr	r3, [r3, #20]
 800338e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	699a      	ldr	r2, [r3, #24]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	430a      	orrs	r2, r1
 800339c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	69db      	ldr	r3, [r3, #28]
 80033a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033a6:	f040 818b 	bne.w	80036c0 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4ac1      	ldr	r2, [pc, #772]	; (80036b4 <UART_SetConfig+0x37c>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d005      	beq.n	80033c0 <UART_SetConfig+0x88>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4abf      	ldr	r2, [pc, #764]	; (80036b8 <UART_SetConfig+0x380>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	f040 80bd 	bne.w	800353a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80033c0:	f7ff f9c2 	bl	8002748 <HAL_RCC_GetPCLK2Freq>
 80033c4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	461d      	mov	r5, r3
 80033ca:	f04f 0600 	mov.w	r6, #0
 80033ce:	46a8      	mov	r8, r5
 80033d0:	46b1      	mov	r9, r6
 80033d2:	eb18 0308 	adds.w	r3, r8, r8
 80033d6:	eb49 0409 	adc.w	r4, r9, r9
 80033da:	4698      	mov	r8, r3
 80033dc:	46a1      	mov	r9, r4
 80033de:	eb18 0805 	adds.w	r8, r8, r5
 80033e2:	eb49 0906 	adc.w	r9, r9, r6
 80033e6:	f04f 0100 	mov.w	r1, #0
 80033ea:	f04f 0200 	mov.w	r2, #0
 80033ee:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80033f2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80033f6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80033fa:	4688      	mov	r8, r1
 80033fc:	4691      	mov	r9, r2
 80033fe:	eb18 0005 	adds.w	r0, r8, r5
 8003402:	eb49 0106 	adc.w	r1, r9, r6
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	461d      	mov	r5, r3
 800340c:	f04f 0600 	mov.w	r6, #0
 8003410:	196b      	adds	r3, r5, r5
 8003412:	eb46 0406 	adc.w	r4, r6, r6
 8003416:	461a      	mov	r2, r3
 8003418:	4623      	mov	r3, r4
 800341a:	f7fc feed 	bl	80001f8 <__aeabi_uldivmod>
 800341e:	4603      	mov	r3, r0
 8003420:	460c      	mov	r4, r1
 8003422:	461a      	mov	r2, r3
 8003424:	4ba5      	ldr	r3, [pc, #660]	; (80036bc <UART_SetConfig+0x384>)
 8003426:	fba3 2302 	umull	r2, r3, r3, r2
 800342a:	095b      	lsrs	r3, r3, #5
 800342c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	461d      	mov	r5, r3
 8003434:	f04f 0600 	mov.w	r6, #0
 8003438:	46a9      	mov	r9, r5
 800343a:	46b2      	mov	sl, r6
 800343c:	eb19 0309 	adds.w	r3, r9, r9
 8003440:	eb4a 040a 	adc.w	r4, sl, sl
 8003444:	4699      	mov	r9, r3
 8003446:	46a2      	mov	sl, r4
 8003448:	eb19 0905 	adds.w	r9, r9, r5
 800344c:	eb4a 0a06 	adc.w	sl, sl, r6
 8003450:	f04f 0100 	mov.w	r1, #0
 8003454:	f04f 0200 	mov.w	r2, #0
 8003458:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800345c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003460:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003464:	4689      	mov	r9, r1
 8003466:	4692      	mov	sl, r2
 8003468:	eb19 0005 	adds.w	r0, r9, r5
 800346c:	eb4a 0106 	adc.w	r1, sl, r6
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	461d      	mov	r5, r3
 8003476:	f04f 0600 	mov.w	r6, #0
 800347a:	196b      	adds	r3, r5, r5
 800347c:	eb46 0406 	adc.w	r4, r6, r6
 8003480:	461a      	mov	r2, r3
 8003482:	4623      	mov	r3, r4
 8003484:	f7fc feb8 	bl	80001f8 <__aeabi_uldivmod>
 8003488:	4603      	mov	r3, r0
 800348a:	460c      	mov	r4, r1
 800348c:	461a      	mov	r2, r3
 800348e:	4b8b      	ldr	r3, [pc, #556]	; (80036bc <UART_SetConfig+0x384>)
 8003490:	fba3 1302 	umull	r1, r3, r3, r2
 8003494:	095b      	lsrs	r3, r3, #5
 8003496:	2164      	movs	r1, #100	; 0x64
 8003498:	fb01 f303 	mul.w	r3, r1, r3
 800349c:	1ad3      	subs	r3, r2, r3
 800349e:	00db      	lsls	r3, r3, #3
 80034a0:	3332      	adds	r3, #50	; 0x32
 80034a2:	4a86      	ldr	r2, [pc, #536]	; (80036bc <UART_SetConfig+0x384>)
 80034a4:	fba2 2303 	umull	r2, r3, r2, r3
 80034a8:	095b      	lsrs	r3, r3, #5
 80034aa:	005b      	lsls	r3, r3, #1
 80034ac:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80034b0:	4498      	add	r8, r3
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	461d      	mov	r5, r3
 80034b6:	f04f 0600 	mov.w	r6, #0
 80034ba:	46a9      	mov	r9, r5
 80034bc:	46b2      	mov	sl, r6
 80034be:	eb19 0309 	adds.w	r3, r9, r9
 80034c2:	eb4a 040a 	adc.w	r4, sl, sl
 80034c6:	4699      	mov	r9, r3
 80034c8:	46a2      	mov	sl, r4
 80034ca:	eb19 0905 	adds.w	r9, r9, r5
 80034ce:	eb4a 0a06 	adc.w	sl, sl, r6
 80034d2:	f04f 0100 	mov.w	r1, #0
 80034d6:	f04f 0200 	mov.w	r2, #0
 80034da:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80034de:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80034e2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80034e6:	4689      	mov	r9, r1
 80034e8:	4692      	mov	sl, r2
 80034ea:	eb19 0005 	adds.w	r0, r9, r5
 80034ee:	eb4a 0106 	adc.w	r1, sl, r6
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	461d      	mov	r5, r3
 80034f8:	f04f 0600 	mov.w	r6, #0
 80034fc:	196b      	adds	r3, r5, r5
 80034fe:	eb46 0406 	adc.w	r4, r6, r6
 8003502:	461a      	mov	r2, r3
 8003504:	4623      	mov	r3, r4
 8003506:	f7fc fe77 	bl	80001f8 <__aeabi_uldivmod>
 800350a:	4603      	mov	r3, r0
 800350c:	460c      	mov	r4, r1
 800350e:	461a      	mov	r2, r3
 8003510:	4b6a      	ldr	r3, [pc, #424]	; (80036bc <UART_SetConfig+0x384>)
 8003512:	fba3 1302 	umull	r1, r3, r3, r2
 8003516:	095b      	lsrs	r3, r3, #5
 8003518:	2164      	movs	r1, #100	; 0x64
 800351a:	fb01 f303 	mul.w	r3, r1, r3
 800351e:	1ad3      	subs	r3, r2, r3
 8003520:	00db      	lsls	r3, r3, #3
 8003522:	3332      	adds	r3, #50	; 0x32
 8003524:	4a65      	ldr	r2, [pc, #404]	; (80036bc <UART_SetConfig+0x384>)
 8003526:	fba2 2303 	umull	r2, r3, r2, r3
 800352a:	095b      	lsrs	r3, r3, #5
 800352c:	f003 0207 	and.w	r2, r3, #7
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4442      	add	r2, r8
 8003536:	609a      	str	r2, [r3, #8]
 8003538:	e26f      	b.n	8003a1a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800353a:	f7ff f8f1 	bl	8002720 <HAL_RCC_GetPCLK1Freq>
 800353e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	461d      	mov	r5, r3
 8003544:	f04f 0600 	mov.w	r6, #0
 8003548:	46a8      	mov	r8, r5
 800354a:	46b1      	mov	r9, r6
 800354c:	eb18 0308 	adds.w	r3, r8, r8
 8003550:	eb49 0409 	adc.w	r4, r9, r9
 8003554:	4698      	mov	r8, r3
 8003556:	46a1      	mov	r9, r4
 8003558:	eb18 0805 	adds.w	r8, r8, r5
 800355c:	eb49 0906 	adc.w	r9, r9, r6
 8003560:	f04f 0100 	mov.w	r1, #0
 8003564:	f04f 0200 	mov.w	r2, #0
 8003568:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800356c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003570:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003574:	4688      	mov	r8, r1
 8003576:	4691      	mov	r9, r2
 8003578:	eb18 0005 	adds.w	r0, r8, r5
 800357c:	eb49 0106 	adc.w	r1, r9, r6
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	461d      	mov	r5, r3
 8003586:	f04f 0600 	mov.w	r6, #0
 800358a:	196b      	adds	r3, r5, r5
 800358c:	eb46 0406 	adc.w	r4, r6, r6
 8003590:	461a      	mov	r2, r3
 8003592:	4623      	mov	r3, r4
 8003594:	f7fc fe30 	bl	80001f8 <__aeabi_uldivmod>
 8003598:	4603      	mov	r3, r0
 800359a:	460c      	mov	r4, r1
 800359c:	461a      	mov	r2, r3
 800359e:	4b47      	ldr	r3, [pc, #284]	; (80036bc <UART_SetConfig+0x384>)
 80035a0:	fba3 2302 	umull	r2, r3, r3, r2
 80035a4:	095b      	lsrs	r3, r3, #5
 80035a6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	461d      	mov	r5, r3
 80035ae:	f04f 0600 	mov.w	r6, #0
 80035b2:	46a9      	mov	r9, r5
 80035b4:	46b2      	mov	sl, r6
 80035b6:	eb19 0309 	adds.w	r3, r9, r9
 80035ba:	eb4a 040a 	adc.w	r4, sl, sl
 80035be:	4699      	mov	r9, r3
 80035c0:	46a2      	mov	sl, r4
 80035c2:	eb19 0905 	adds.w	r9, r9, r5
 80035c6:	eb4a 0a06 	adc.w	sl, sl, r6
 80035ca:	f04f 0100 	mov.w	r1, #0
 80035ce:	f04f 0200 	mov.w	r2, #0
 80035d2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80035d6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80035da:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80035de:	4689      	mov	r9, r1
 80035e0:	4692      	mov	sl, r2
 80035e2:	eb19 0005 	adds.w	r0, r9, r5
 80035e6:	eb4a 0106 	adc.w	r1, sl, r6
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	461d      	mov	r5, r3
 80035f0:	f04f 0600 	mov.w	r6, #0
 80035f4:	196b      	adds	r3, r5, r5
 80035f6:	eb46 0406 	adc.w	r4, r6, r6
 80035fa:	461a      	mov	r2, r3
 80035fc:	4623      	mov	r3, r4
 80035fe:	f7fc fdfb 	bl	80001f8 <__aeabi_uldivmod>
 8003602:	4603      	mov	r3, r0
 8003604:	460c      	mov	r4, r1
 8003606:	461a      	mov	r2, r3
 8003608:	4b2c      	ldr	r3, [pc, #176]	; (80036bc <UART_SetConfig+0x384>)
 800360a:	fba3 1302 	umull	r1, r3, r3, r2
 800360e:	095b      	lsrs	r3, r3, #5
 8003610:	2164      	movs	r1, #100	; 0x64
 8003612:	fb01 f303 	mul.w	r3, r1, r3
 8003616:	1ad3      	subs	r3, r2, r3
 8003618:	00db      	lsls	r3, r3, #3
 800361a:	3332      	adds	r3, #50	; 0x32
 800361c:	4a27      	ldr	r2, [pc, #156]	; (80036bc <UART_SetConfig+0x384>)
 800361e:	fba2 2303 	umull	r2, r3, r2, r3
 8003622:	095b      	lsrs	r3, r3, #5
 8003624:	005b      	lsls	r3, r3, #1
 8003626:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800362a:	4498      	add	r8, r3
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	461d      	mov	r5, r3
 8003630:	f04f 0600 	mov.w	r6, #0
 8003634:	46a9      	mov	r9, r5
 8003636:	46b2      	mov	sl, r6
 8003638:	eb19 0309 	adds.w	r3, r9, r9
 800363c:	eb4a 040a 	adc.w	r4, sl, sl
 8003640:	4699      	mov	r9, r3
 8003642:	46a2      	mov	sl, r4
 8003644:	eb19 0905 	adds.w	r9, r9, r5
 8003648:	eb4a 0a06 	adc.w	sl, sl, r6
 800364c:	f04f 0100 	mov.w	r1, #0
 8003650:	f04f 0200 	mov.w	r2, #0
 8003654:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003658:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800365c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003660:	4689      	mov	r9, r1
 8003662:	4692      	mov	sl, r2
 8003664:	eb19 0005 	adds.w	r0, r9, r5
 8003668:	eb4a 0106 	adc.w	r1, sl, r6
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	461d      	mov	r5, r3
 8003672:	f04f 0600 	mov.w	r6, #0
 8003676:	196b      	adds	r3, r5, r5
 8003678:	eb46 0406 	adc.w	r4, r6, r6
 800367c:	461a      	mov	r2, r3
 800367e:	4623      	mov	r3, r4
 8003680:	f7fc fdba 	bl	80001f8 <__aeabi_uldivmod>
 8003684:	4603      	mov	r3, r0
 8003686:	460c      	mov	r4, r1
 8003688:	461a      	mov	r2, r3
 800368a:	4b0c      	ldr	r3, [pc, #48]	; (80036bc <UART_SetConfig+0x384>)
 800368c:	fba3 1302 	umull	r1, r3, r3, r2
 8003690:	095b      	lsrs	r3, r3, #5
 8003692:	2164      	movs	r1, #100	; 0x64
 8003694:	fb01 f303 	mul.w	r3, r1, r3
 8003698:	1ad3      	subs	r3, r2, r3
 800369a:	00db      	lsls	r3, r3, #3
 800369c:	3332      	adds	r3, #50	; 0x32
 800369e:	4a07      	ldr	r2, [pc, #28]	; (80036bc <UART_SetConfig+0x384>)
 80036a0:	fba2 2303 	umull	r2, r3, r2, r3
 80036a4:	095b      	lsrs	r3, r3, #5
 80036a6:	f003 0207 	and.w	r2, r3, #7
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4442      	add	r2, r8
 80036b0:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80036b2:	e1b2      	b.n	8003a1a <UART_SetConfig+0x6e2>
 80036b4:	40011000 	.word	0x40011000
 80036b8:	40011400 	.word	0x40011400
 80036bc:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4ad7      	ldr	r2, [pc, #860]	; (8003a24 <UART_SetConfig+0x6ec>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d005      	beq.n	80036d6 <UART_SetConfig+0x39e>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4ad6      	ldr	r2, [pc, #856]	; (8003a28 <UART_SetConfig+0x6f0>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	f040 80d1 	bne.w	8003878 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80036d6:	f7ff f837 	bl	8002748 <HAL_RCC_GetPCLK2Freq>
 80036da:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	469a      	mov	sl, r3
 80036e0:	f04f 0b00 	mov.w	fp, #0
 80036e4:	46d0      	mov	r8, sl
 80036e6:	46d9      	mov	r9, fp
 80036e8:	eb18 0308 	adds.w	r3, r8, r8
 80036ec:	eb49 0409 	adc.w	r4, r9, r9
 80036f0:	4698      	mov	r8, r3
 80036f2:	46a1      	mov	r9, r4
 80036f4:	eb18 080a 	adds.w	r8, r8, sl
 80036f8:	eb49 090b 	adc.w	r9, r9, fp
 80036fc:	f04f 0100 	mov.w	r1, #0
 8003700:	f04f 0200 	mov.w	r2, #0
 8003704:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003708:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800370c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003710:	4688      	mov	r8, r1
 8003712:	4691      	mov	r9, r2
 8003714:	eb1a 0508 	adds.w	r5, sl, r8
 8003718:	eb4b 0609 	adc.w	r6, fp, r9
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	4619      	mov	r1, r3
 8003722:	f04f 0200 	mov.w	r2, #0
 8003726:	f04f 0300 	mov.w	r3, #0
 800372a:	f04f 0400 	mov.w	r4, #0
 800372e:	0094      	lsls	r4, r2, #2
 8003730:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003734:	008b      	lsls	r3, r1, #2
 8003736:	461a      	mov	r2, r3
 8003738:	4623      	mov	r3, r4
 800373a:	4628      	mov	r0, r5
 800373c:	4631      	mov	r1, r6
 800373e:	f7fc fd5b 	bl	80001f8 <__aeabi_uldivmod>
 8003742:	4603      	mov	r3, r0
 8003744:	460c      	mov	r4, r1
 8003746:	461a      	mov	r2, r3
 8003748:	4bb8      	ldr	r3, [pc, #736]	; (8003a2c <UART_SetConfig+0x6f4>)
 800374a:	fba3 2302 	umull	r2, r3, r3, r2
 800374e:	095b      	lsrs	r3, r3, #5
 8003750:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	469b      	mov	fp, r3
 8003758:	f04f 0c00 	mov.w	ip, #0
 800375c:	46d9      	mov	r9, fp
 800375e:	46e2      	mov	sl, ip
 8003760:	eb19 0309 	adds.w	r3, r9, r9
 8003764:	eb4a 040a 	adc.w	r4, sl, sl
 8003768:	4699      	mov	r9, r3
 800376a:	46a2      	mov	sl, r4
 800376c:	eb19 090b 	adds.w	r9, r9, fp
 8003770:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003774:	f04f 0100 	mov.w	r1, #0
 8003778:	f04f 0200 	mov.w	r2, #0
 800377c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003780:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003784:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003788:	4689      	mov	r9, r1
 800378a:	4692      	mov	sl, r2
 800378c:	eb1b 0509 	adds.w	r5, fp, r9
 8003790:	eb4c 060a 	adc.w	r6, ip, sl
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	4619      	mov	r1, r3
 800379a:	f04f 0200 	mov.w	r2, #0
 800379e:	f04f 0300 	mov.w	r3, #0
 80037a2:	f04f 0400 	mov.w	r4, #0
 80037a6:	0094      	lsls	r4, r2, #2
 80037a8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80037ac:	008b      	lsls	r3, r1, #2
 80037ae:	461a      	mov	r2, r3
 80037b0:	4623      	mov	r3, r4
 80037b2:	4628      	mov	r0, r5
 80037b4:	4631      	mov	r1, r6
 80037b6:	f7fc fd1f 	bl	80001f8 <__aeabi_uldivmod>
 80037ba:	4603      	mov	r3, r0
 80037bc:	460c      	mov	r4, r1
 80037be:	461a      	mov	r2, r3
 80037c0:	4b9a      	ldr	r3, [pc, #616]	; (8003a2c <UART_SetConfig+0x6f4>)
 80037c2:	fba3 1302 	umull	r1, r3, r3, r2
 80037c6:	095b      	lsrs	r3, r3, #5
 80037c8:	2164      	movs	r1, #100	; 0x64
 80037ca:	fb01 f303 	mul.w	r3, r1, r3
 80037ce:	1ad3      	subs	r3, r2, r3
 80037d0:	011b      	lsls	r3, r3, #4
 80037d2:	3332      	adds	r3, #50	; 0x32
 80037d4:	4a95      	ldr	r2, [pc, #596]	; (8003a2c <UART_SetConfig+0x6f4>)
 80037d6:	fba2 2303 	umull	r2, r3, r2, r3
 80037da:	095b      	lsrs	r3, r3, #5
 80037dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037e0:	4498      	add	r8, r3
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	469b      	mov	fp, r3
 80037e6:	f04f 0c00 	mov.w	ip, #0
 80037ea:	46d9      	mov	r9, fp
 80037ec:	46e2      	mov	sl, ip
 80037ee:	eb19 0309 	adds.w	r3, r9, r9
 80037f2:	eb4a 040a 	adc.w	r4, sl, sl
 80037f6:	4699      	mov	r9, r3
 80037f8:	46a2      	mov	sl, r4
 80037fa:	eb19 090b 	adds.w	r9, r9, fp
 80037fe:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003802:	f04f 0100 	mov.w	r1, #0
 8003806:	f04f 0200 	mov.w	r2, #0
 800380a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800380e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003812:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003816:	4689      	mov	r9, r1
 8003818:	4692      	mov	sl, r2
 800381a:	eb1b 0509 	adds.w	r5, fp, r9
 800381e:	eb4c 060a 	adc.w	r6, ip, sl
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	4619      	mov	r1, r3
 8003828:	f04f 0200 	mov.w	r2, #0
 800382c:	f04f 0300 	mov.w	r3, #0
 8003830:	f04f 0400 	mov.w	r4, #0
 8003834:	0094      	lsls	r4, r2, #2
 8003836:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800383a:	008b      	lsls	r3, r1, #2
 800383c:	461a      	mov	r2, r3
 800383e:	4623      	mov	r3, r4
 8003840:	4628      	mov	r0, r5
 8003842:	4631      	mov	r1, r6
 8003844:	f7fc fcd8 	bl	80001f8 <__aeabi_uldivmod>
 8003848:	4603      	mov	r3, r0
 800384a:	460c      	mov	r4, r1
 800384c:	461a      	mov	r2, r3
 800384e:	4b77      	ldr	r3, [pc, #476]	; (8003a2c <UART_SetConfig+0x6f4>)
 8003850:	fba3 1302 	umull	r1, r3, r3, r2
 8003854:	095b      	lsrs	r3, r3, #5
 8003856:	2164      	movs	r1, #100	; 0x64
 8003858:	fb01 f303 	mul.w	r3, r1, r3
 800385c:	1ad3      	subs	r3, r2, r3
 800385e:	011b      	lsls	r3, r3, #4
 8003860:	3332      	adds	r3, #50	; 0x32
 8003862:	4a72      	ldr	r2, [pc, #456]	; (8003a2c <UART_SetConfig+0x6f4>)
 8003864:	fba2 2303 	umull	r2, r3, r2, r3
 8003868:	095b      	lsrs	r3, r3, #5
 800386a:	f003 020f 	and.w	r2, r3, #15
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4442      	add	r2, r8
 8003874:	609a      	str	r2, [r3, #8]
 8003876:	e0d0      	b.n	8003a1a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003878:	f7fe ff52 	bl	8002720 <HAL_RCC_GetPCLK1Freq>
 800387c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	469a      	mov	sl, r3
 8003882:	f04f 0b00 	mov.w	fp, #0
 8003886:	46d0      	mov	r8, sl
 8003888:	46d9      	mov	r9, fp
 800388a:	eb18 0308 	adds.w	r3, r8, r8
 800388e:	eb49 0409 	adc.w	r4, r9, r9
 8003892:	4698      	mov	r8, r3
 8003894:	46a1      	mov	r9, r4
 8003896:	eb18 080a 	adds.w	r8, r8, sl
 800389a:	eb49 090b 	adc.w	r9, r9, fp
 800389e:	f04f 0100 	mov.w	r1, #0
 80038a2:	f04f 0200 	mov.w	r2, #0
 80038a6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80038aa:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80038ae:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80038b2:	4688      	mov	r8, r1
 80038b4:	4691      	mov	r9, r2
 80038b6:	eb1a 0508 	adds.w	r5, sl, r8
 80038ba:	eb4b 0609 	adc.w	r6, fp, r9
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	4619      	mov	r1, r3
 80038c4:	f04f 0200 	mov.w	r2, #0
 80038c8:	f04f 0300 	mov.w	r3, #0
 80038cc:	f04f 0400 	mov.w	r4, #0
 80038d0:	0094      	lsls	r4, r2, #2
 80038d2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80038d6:	008b      	lsls	r3, r1, #2
 80038d8:	461a      	mov	r2, r3
 80038da:	4623      	mov	r3, r4
 80038dc:	4628      	mov	r0, r5
 80038de:	4631      	mov	r1, r6
 80038e0:	f7fc fc8a 	bl	80001f8 <__aeabi_uldivmod>
 80038e4:	4603      	mov	r3, r0
 80038e6:	460c      	mov	r4, r1
 80038e8:	461a      	mov	r2, r3
 80038ea:	4b50      	ldr	r3, [pc, #320]	; (8003a2c <UART_SetConfig+0x6f4>)
 80038ec:	fba3 2302 	umull	r2, r3, r3, r2
 80038f0:	095b      	lsrs	r3, r3, #5
 80038f2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	469b      	mov	fp, r3
 80038fa:	f04f 0c00 	mov.w	ip, #0
 80038fe:	46d9      	mov	r9, fp
 8003900:	46e2      	mov	sl, ip
 8003902:	eb19 0309 	adds.w	r3, r9, r9
 8003906:	eb4a 040a 	adc.w	r4, sl, sl
 800390a:	4699      	mov	r9, r3
 800390c:	46a2      	mov	sl, r4
 800390e:	eb19 090b 	adds.w	r9, r9, fp
 8003912:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003916:	f04f 0100 	mov.w	r1, #0
 800391a:	f04f 0200 	mov.w	r2, #0
 800391e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003922:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003926:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800392a:	4689      	mov	r9, r1
 800392c:	4692      	mov	sl, r2
 800392e:	eb1b 0509 	adds.w	r5, fp, r9
 8003932:	eb4c 060a 	adc.w	r6, ip, sl
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	4619      	mov	r1, r3
 800393c:	f04f 0200 	mov.w	r2, #0
 8003940:	f04f 0300 	mov.w	r3, #0
 8003944:	f04f 0400 	mov.w	r4, #0
 8003948:	0094      	lsls	r4, r2, #2
 800394a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800394e:	008b      	lsls	r3, r1, #2
 8003950:	461a      	mov	r2, r3
 8003952:	4623      	mov	r3, r4
 8003954:	4628      	mov	r0, r5
 8003956:	4631      	mov	r1, r6
 8003958:	f7fc fc4e 	bl	80001f8 <__aeabi_uldivmod>
 800395c:	4603      	mov	r3, r0
 800395e:	460c      	mov	r4, r1
 8003960:	461a      	mov	r2, r3
 8003962:	4b32      	ldr	r3, [pc, #200]	; (8003a2c <UART_SetConfig+0x6f4>)
 8003964:	fba3 1302 	umull	r1, r3, r3, r2
 8003968:	095b      	lsrs	r3, r3, #5
 800396a:	2164      	movs	r1, #100	; 0x64
 800396c:	fb01 f303 	mul.w	r3, r1, r3
 8003970:	1ad3      	subs	r3, r2, r3
 8003972:	011b      	lsls	r3, r3, #4
 8003974:	3332      	adds	r3, #50	; 0x32
 8003976:	4a2d      	ldr	r2, [pc, #180]	; (8003a2c <UART_SetConfig+0x6f4>)
 8003978:	fba2 2303 	umull	r2, r3, r2, r3
 800397c:	095b      	lsrs	r3, r3, #5
 800397e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003982:	4498      	add	r8, r3
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	469b      	mov	fp, r3
 8003988:	f04f 0c00 	mov.w	ip, #0
 800398c:	46d9      	mov	r9, fp
 800398e:	46e2      	mov	sl, ip
 8003990:	eb19 0309 	adds.w	r3, r9, r9
 8003994:	eb4a 040a 	adc.w	r4, sl, sl
 8003998:	4699      	mov	r9, r3
 800399a:	46a2      	mov	sl, r4
 800399c:	eb19 090b 	adds.w	r9, r9, fp
 80039a0:	eb4a 0a0c 	adc.w	sl, sl, ip
 80039a4:	f04f 0100 	mov.w	r1, #0
 80039a8:	f04f 0200 	mov.w	r2, #0
 80039ac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80039b0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80039b4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80039b8:	4689      	mov	r9, r1
 80039ba:	4692      	mov	sl, r2
 80039bc:	eb1b 0509 	adds.w	r5, fp, r9
 80039c0:	eb4c 060a 	adc.w	r6, ip, sl
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	4619      	mov	r1, r3
 80039ca:	f04f 0200 	mov.w	r2, #0
 80039ce:	f04f 0300 	mov.w	r3, #0
 80039d2:	f04f 0400 	mov.w	r4, #0
 80039d6:	0094      	lsls	r4, r2, #2
 80039d8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80039dc:	008b      	lsls	r3, r1, #2
 80039de:	461a      	mov	r2, r3
 80039e0:	4623      	mov	r3, r4
 80039e2:	4628      	mov	r0, r5
 80039e4:	4631      	mov	r1, r6
 80039e6:	f7fc fc07 	bl	80001f8 <__aeabi_uldivmod>
 80039ea:	4603      	mov	r3, r0
 80039ec:	460c      	mov	r4, r1
 80039ee:	461a      	mov	r2, r3
 80039f0:	4b0e      	ldr	r3, [pc, #56]	; (8003a2c <UART_SetConfig+0x6f4>)
 80039f2:	fba3 1302 	umull	r1, r3, r3, r2
 80039f6:	095b      	lsrs	r3, r3, #5
 80039f8:	2164      	movs	r1, #100	; 0x64
 80039fa:	fb01 f303 	mul.w	r3, r1, r3
 80039fe:	1ad3      	subs	r3, r2, r3
 8003a00:	011b      	lsls	r3, r3, #4
 8003a02:	3332      	adds	r3, #50	; 0x32
 8003a04:	4a09      	ldr	r2, [pc, #36]	; (8003a2c <UART_SetConfig+0x6f4>)
 8003a06:	fba2 2303 	umull	r2, r3, r2, r3
 8003a0a:	095b      	lsrs	r3, r3, #5
 8003a0c:	f003 020f 	and.w	r2, r3, #15
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4442      	add	r2, r8
 8003a16:	609a      	str	r2, [r3, #8]
}
 8003a18:	e7ff      	b.n	8003a1a <UART_SetConfig+0x6e2>
 8003a1a:	bf00      	nop
 8003a1c:	3714      	adds	r7, #20
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a24:	40011000 	.word	0x40011000
 8003a28:	40011400 	.word	0x40011400
 8003a2c:	51eb851f 	.word	0x51eb851f

08003a30 <__libc_init_array>:
 8003a30:	b570      	push	{r4, r5, r6, lr}
 8003a32:	4e0d      	ldr	r6, [pc, #52]	; (8003a68 <__libc_init_array+0x38>)
 8003a34:	4c0d      	ldr	r4, [pc, #52]	; (8003a6c <__libc_init_array+0x3c>)
 8003a36:	1ba4      	subs	r4, r4, r6
 8003a38:	10a4      	asrs	r4, r4, #2
 8003a3a:	2500      	movs	r5, #0
 8003a3c:	42a5      	cmp	r5, r4
 8003a3e:	d109      	bne.n	8003a54 <__libc_init_array+0x24>
 8003a40:	4e0b      	ldr	r6, [pc, #44]	; (8003a70 <__libc_init_array+0x40>)
 8003a42:	4c0c      	ldr	r4, [pc, #48]	; (8003a74 <__libc_init_array+0x44>)
 8003a44:	f000 f878 	bl	8003b38 <_init>
 8003a48:	1ba4      	subs	r4, r4, r6
 8003a4a:	10a4      	asrs	r4, r4, #2
 8003a4c:	2500      	movs	r5, #0
 8003a4e:	42a5      	cmp	r5, r4
 8003a50:	d105      	bne.n	8003a5e <__libc_init_array+0x2e>
 8003a52:	bd70      	pop	{r4, r5, r6, pc}
 8003a54:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003a58:	4798      	blx	r3
 8003a5a:	3501      	adds	r5, #1
 8003a5c:	e7ee      	b.n	8003a3c <__libc_init_array+0xc>
 8003a5e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003a62:	4798      	blx	r3
 8003a64:	3501      	adds	r5, #1
 8003a66:	e7f2      	b.n	8003a4e <__libc_init_array+0x1e>
 8003a68:	08003c08 	.word	0x08003c08
 8003a6c:	08003c08 	.word	0x08003c08
 8003a70:	08003c08 	.word	0x08003c08
 8003a74:	08003c0c 	.word	0x08003c0c

08003a78 <__itoa>:
 8003a78:	1e93      	subs	r3, r2, #2
 8003a7a:	2b22      	cmp	r3, #34	; 0x22
 8003a7c:	b510      	push	{r4, lr}
 8003a7e:	460c      	mov	r4, r1
 8003a80:	d904      	bls.n	8003a8c <__itoa+0x14>
 8003a82:	2300      	movs	r3, #0
 8003a84:	700b      	strb	r3, [r1, #0]
 8003a86:	461c      	mov	r4, r3
 8003a88:	4620      	mov	r0, r4
 8003a8a:	bd10      	pop	{r4, pc}
 8003a8c:	2a0a      	cmp	r2, #10
 8003a8e:	d109      	bne.n	8003aa4 <__itoa+0x2c>
 8003a90:	2800      	cmp	r0, #0
 8003a92:	da07      	bge.n	8003aa4 <__itoa+0x2c>
 8003a94:	232d      	movs	r3, #45	; 0x2d
 8003a96:	700b      	strb	r3, [r1, #0]
 8003a98:	4240      	negs	r0, r0
 8003a9a:	2101      	movs	r1, #1
 8003a9c:	4421      	add	r1, r4
 8003a9e:	f000 f80d 	bl	8003abc <__utoa>
 8003aa2:	e7f1      	b.n	8003a88 <__itoa+0x10>
 8003aa4:	2100      	movs	r1, #0
 8003aa6:	e7f9      	b.n	8003a9c <__itoa+0x24>

08003aa8 <itoa>:
 8003aa8:	f7ff bfe6 	b.w	8003a78 <__itoa>

08003aac <memset>:
 8003aac:	4402      	add	r2, r0
 8003aae:	4603      	mov	r3, r0
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d100      	bne.n	8003ab6 <memset+0xa>
 8003ab4:	4770      	bx	lr
 8003ab6:	f803 1b01 	strb.w	r1, [r3], #1
 8003aba:	e7f9      	b.n	8003ab0 <memset+0x4>

08003abc <__utoa>:
 8003abc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003abe:	4b1d      	ldr	r3, [pc, #116]	; (8003b34 <__utoa+0x78>)
 8003ac0:	b08b      	sub	sp, #44	; 0x2c
 8003ac2:	4605      	mov	r5, r0
 8003ac4:	460c      	mov	r4, r1
 8003ac6:	466e      	mov	r6, sp
 8003ac8:	f103 0c20 	add.w	ip, r3, #32
 8003acc:	6818      	ldr	r0, [r3, #0]
 8003ace:	6859      	ldr	r1, [r3, #4]
 8003ad0:	4637      	mov	r7, r6
 8003ad2:	c703      	stmia	r7!, {r0, r1}
 8003ad4:	3308      	adds	r3, #8
 8003ad6:	4563      	cmp	r3, ip
 8003ad8:	463e      	mov	r6, r7
 8003ada:	d1f7      	bne.n	8003acc <__utoa+0x10>
 8003adc:	6818      	ldr	r0, [r3, #0]
 8003ade:	791b      	ldrb	r3, [r3, #4]
 8003ae0:	713b      	strb	r3, [r7, #4]
 8003ae2:	1e93      	subs	r3, r2, #2
 8003ae4:	2b22      	cmp	r3, #34	; 0x22
 8003ae6:	6038      	str	r0, [r7, #0]
 8003ae8:	f04f 0300 	mov.w	r3, #0
 8003aec:	d904      	bls.n	8003af8 <__utoa+0x3c>
 8003aee:	7023      	strb	r3, [r4, #0]
 8003af0:	461c      	mov	r4, r3
 8003af2:	4620      	mov	r0, r4
 8003af4:	b00b      	add	sp, #44	; 0x2c
 8003af6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003af8:	1e66      	subs	r6, r4, #1
 8003afa:	fbb5 f0f2 	udiv	r0, r5, r2
 8003afe:	af0a      	add	r7, sp, #40	; 0x28
 8003b00:	fb02 5510 	mls	r5, r2, r0, r5
 8003b04:	443d      	add	r5, r7
 8003b06:	1c59      	adds	r1, r3, #1
 8003b08:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 8003b0c:	f806 5f01 	strb.w	r5, [r6, #1]!
 8003b10:	4605      	mov	r5, r0
 8003b12:	b968      	cbnz	r0, 8003b30 <__utoa+0x74>
 8003b14:	5460      	strb	r0, [r4, r1]
 8003b16:	4423      	add	r3, r4
 8003b18:	4622      	mov	r2, r4
 8003b1a:	1b19      	subs	r1, r3, r4
 8003b1c:	1b10      	subs	r0, r2, r4
 8003b1e:	4281      	cmp	r1, r0
 8003b20:	dde7      	ble.n	8003af2 <__utoa+0x36>
 8003b22:	7811      	ldrb	r1, [r2, #0]
 8003b24:	7818      	ldrb	r0, [r3, #0]
 8003b26:	f802 0b01 	strb.w	r0, [r2], #1
 8003b2a:	f803 1901 	strb.w	r1, [r3], #-1
 8003b2e:	e7f4      	b.n	8003b1a <__utoa+0x5e>
 8003b30:	460b      	mov	r3, r1
 8003b32:	e7e2      	b.n	8003afa <__utoa+0x3e>
 8003b34:	08003bd8 	.word	0x08003bd8

08003b38 <_init>:
 8003b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b3a:	bf00      	nop
 8003b3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b3e:	bc08      	pop	{r3}
 8003b40:	469e      	mov	lr, r3
 8003b42:	4770      	bx	lr

08003b44 <_fini>:
 8003b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b46:	bf00      	nop
 8003b48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b4a:	bc08      	pop	{r3}
 8003b4c:	469e      	mov	lr, r3
 8003b4e:	4770      	bx	lr
