
Allarme_Antifurto.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000039e4  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08003b78  08003b78  00013b78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c28  08003c28  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08003c28  08003c28  00013c28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003c30  08003c30  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c30  08003c30  00013c30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003c34  08003c34  00013c34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003c38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c8  20000010  08003c48  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000d8  08003c48  000200d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dc9c  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000203f  00000000  00000000  0002dcdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c70  00000000  00000000  0002fd20  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b58  00000000  00000000  00030990  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000171ef  00000000  00000000  000314e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a748  00000000  00000000  000486d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008aedb  00000000  00000000  00052e1f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ddcfa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000032d0  00000000  00000000  000ddd78  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000010 	.word	0x20000010
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08003b60 	.word	0x08003b60

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000014 	.word	0x20000014
 80001d0:	08003b60 	.word	0x08003b60

080001d4 <strcmp>:
 80001d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001dc:	2a01      	cmp	r2, #1
 80001de:	bf28      	it	cs
 80001e0:	429a      	cmpcs	r2, r3
 80001e2:	d0f7      	beq.n	80001d4 <strcmp>
 80001e4:	1ad0      	subs	r0, r2, r3
 80001e6:	4770      	bx	lr

080001e8 <strlen>:
 80001e8:	4603      	mov	r3, r0
 80001ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ee:	2a00      	cmp	r2, #0
 80001f0:	d1fb      	bne.n	80001ea <strlen+0x2>
 80001f2:	1a18      	subs	r0, r3, r0
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr

080001f8 <__aeabi_uldivmod>:
 80001f8:	b953      	cbnz	r3, 8000210 <__aeabi_uldivmod+0x18>
 80001fa:	b94a      	cbnz	r2, 8000210 <__aeabi_uldivmod+0x18>
 80001fc:	2900      	cmp	r1, #0
 80001fe:	bf08      	it	eq
 8000200:	2800      	cmpeq	r0, #0
 8000202:	bf1c      	itt	ne
 8000204:	f04f 31ff 	movne.w	r1, #4294967295
 8000208:	f04f 30ff 	movne.w	r0, #4294967295
 800020c:	f000 b972 	b.w	80004f4 <__aeabi_idiv0>
 8000210:	f1ad 0c08 	sub.w	ip, sp, #8
 8000214:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000218:	f000 f806 	bl	8000228 <__udivmoddi4>
 800021c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000220:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000224:	b004      	add	sp, #16
 8000226:	4770      	bx	lr

08000228 <__udivmoddi4>:
 8000228:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800022c:	9e08      	ldr	r6, [sp, #32]
 800022e:	4604      	mov	r4, r0
 8000230:	4688      	mov	r8, r1
 8000232:	2b00      	cmp	r3, #0
 8000234:	d14b      	bne.n	80002ce <__udivmoddi4+0xa6>
 8000236:	428a      	cmp	r2, r1
 8000238:	4615      	mov	r5, r2
 800023a:	d967      	bls.n	800030c <__udivmoddi4+0xe4>
 800023c:	fab2 f282 	clz	r2, r2
 8000240:	b14a      	cbz	r2, 8000256 <__udivmoddi4+0x2e>
 8000242:	f1c2 0720 	rsb	r7, r2, #32
 8000246:	fa01 f302 	lsl.w	r3, r1, r2
 800024a:	fa20 f707 	lsr.w	r7, r0, r7
 800024e:	4095      	lsls	r5, r2
 8000250:	ea47 0803 	orr.w	r8, r7, r3
 8000254:	4094      	lsls	r4, r2
 8000256:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800025a:	0c23      	lsrs	r3, r4, #16
 800025c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000260:	fa1f fc85 	uxth.w	ip, r5
 8000264:	fb0e 8817 	mls	r8, lr, r7, r8
 8000268:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800026c:	fb07 f10c 	mul.w	r1, r7, ip
 8000270:	4299      	cmp	r1, r3
 8000272:	d909      	bls.n	8000288 <__udivmoddi4+0x60>
 8000274:	18eb      	adds	r3, r5, r3
 8000276:	f107 30ff 	add.w	r0, r7, #4294967295
 800027a:	f080 811b 	bcs.w	80004b4 <__udivmoddi4+0x28c>
 800027e:	4299      	cmp	r1, r3
 8000280:	f240 8118 	bls.w	80004b4 <__udivmoddi4+0x28c>
 8000284:	3f02      	subs	r7, #2
 8000286:	442b      	add	r3, r5
 8000288:	1a5b      	subs	r3, r3, r1
 800028a:	b2a4      	uxth	r4, r4
 800028c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000290:	fb0e 3310 	mls	r3, lr, r0, r3
 8000294:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000298:	fb00 fc0c 	mul.w	ip, r0, ip
 800029c:	45a4      	cmp	ip, r4
 800029e:	d909      	bls.n	80002b4 <__udivmoddi4+0x8c>
 80002a0:	192c      	adds	r4, r5, r4
 80002a2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a6:	f080 8107 	bcs.w	80004b8 <__udivmoddi4+0x290>
 80002aa:	45a4      	cmp	ip, r4
 80002ac:	f240 8104 	bls.w	80004b8 <__udivmoddi4+0x290>
 80002b0:	3802      	subs	r0, #2
 80002b2:	442c      	add	r4, r5
 80002b4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002b8:	eba4 040c 	sub.w	r4, r4, ip
 80002bc:	2700      	movs	r7, #0
 80002be:	b11e      	cbz	r6, 80002c8 <__udivmoddi4+0xa0>
 80002c0:	40d4      	lsrs	r4, r2
 80002c2:	2300      	movs	r3, #0
 80002c4:	e9c6 4300 	strd	r4, r3, [r6]
 80002c8:	4639      	mov	r1, r7
 80002ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d909      	bls.n	80002e6 <__udivmoddi4+0xbe>
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	f000 80eb 	beq.w	80004ae <__udivmoddi4+0x286>
 80002d8:	2700      	movs	r7, #0
 80002da:	e9c6 0100 	strd	r0, r1, [r6]
 80002de:	4638      	mov	r0, r7
 80002e0:	4639      	mov	r1, r7
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	fab3 f783 	clz	r7, r3
 80002ea:	2f00      	cmp	r7, #0
 80002ec:	d147      	bne.n	800037e <__udivmoddi4+0x156>
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d302      	bcc.n	80002f8 <__udivmoddi4+0xd0>
 80002f2:	4282      	cmp	r2, r0
 80002f4:	f200 80fa 	bhi.w	80004ec <__udivmoddi4+0x2c4>
 80002f8:	1a84      	subs	r4, r0, r2
 80002fa:	eb61 0303 	sbc.w	r3, r1, r3
 80002fe:	2001      	movs	r0, #1
 8000300:	4698      	mov	r8, r3
 8000302:	2e00      	cmp	r6, #0
 8000304:	d0e0      	beq.n	80002c8 <__udivmoddi4+0xa0>
 8000306:	e9c6 4800 	strd	r4, r8, [r6]
 800030a:	e7dd      	b.n	80002c8 <__udivmoddi4+0xa0>
 800030c:	b902      	cbnz	r2, 8000310 <__udivmoddi4+0xe8>
 800030e:	deff      	udf	#255	; 0xff
 8000310:	fab2 f282 	clz	r2, r2
 8000314:	2a00      	cmp	r2, #0
 8000316:	f040 808f 	bne.w	8000438 <__udivmoddi4+0x210>
 800031a:	1b49      	subs	r1, r1, r5
 800031c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000320:	fa1f f885 	uxth.w	r8, r5
 8000324:	2701      	movs	r7, #1
 8000326:	fbb1 fcfe 	udiv	ip, r1, lr
 800032a:	0c23      	lsrs	r3, r4, #16
 800032c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000330:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000334:	fb08 f10c 	mul.w	r1, r8, ip
 8000338:	4299      	cmp	r1, r3
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x124>
 800033c:	18eb      	adds	r3, r5, r3
 800033e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x122>
 8000344:	4299      	cmp	r1, r3
 8000346:	f200 80cd 	bhi.w	80004e4 <__udivmoddi4+0x2bc>
 800034a:	4684      	mov	ip, r0
 800034c:	1a59      	subs	r1, r3, r1
 800034e:	b2a3      	uxth	r3, r4
 8000350:	fbb1 f0fe 	udiv	r0, r1, lr
 8000354:	fb0e 1410 	mls	r4, lr, r0, r1
 8000358:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800035c:	fb08 f800 	mul.w	r8, r8, r0
 8000360:	45a0      	cmp	r8, r4
 8000362:	d907      	bls.n	8000374 <__udivmoddi4+0x14c>
 8000364:	192c      	adds	r4, r5, r4
 8000366:	f100 33ff 	add.w	r3, r0, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x14a>
 800036c:	45a0      	cmp	r8, r4
 800036e:	f200 80b6 	bhi.w	80004de <__udivmoddi4+0x2b6>
 8000372:	4618      	mov	r0, r3
 8000374:	eba4 0408 	sub.w	r4, r4, r8
 8000378:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800037c:	e79f      	b.n	80002be <__udivmoddi4+0x96>
 800037e:	f1c7 0c20 	rsb	ip, r7, #32
 8000382:	40bb      	lsls	r3, r7
 8000384:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000388:	ea4e 0e03 	orr.w	lr, lr, r3
 800038c:	fa01 f407 	lsl.w	r4, r1, r7
 8000390:	fa20 f50c 	lsr.w	r5, r0, ip
 8000394:	fa21 f30c 	lsr.w	r3, r1, ip
 8000398:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800039c:	4325      	orrs	r5, r4
 800039e:	fbb3 f9f8 	udiv	r9, r3, r8
 80003a2:	0c2c      	lsrs	r4, r5, #16
 80003a4:	fb08 3319 	mls	r3, r8, r9, r3
 80003a8:	fa1f fa8e 	uxth.w	sl, lr
 80003ac:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003b0:	fb09 f40a 	mul.w	r4, r9, sl
 80003b4:	429c      	cmp	r4, r3
 80003b6:	fa02 f207 	lsl.w	r2, r2, r7
 80003ba:	fa00 f107 	lsl.w	r1, r0, r7
 80003be:	d90b      	bls.n	80003d8 <__udivmoddi4+0x1b0>
 80003c0:	eb1e 0303 	adds.w	r3, lr, r3
 80003c4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003c8:	f080 8087 	bcs.w	80004da <__udivmoddi4+0x2b2>
 80003cc:	429c      	cmp	r4, r3
 80003ce:	f240 8084 	bls.w	80004da <__udivmoddi4+0x2b2>
 80003d2:	f1a9 0902 	sub.w	r9, r9, #2
 80003d6:	4473      	add	r3, lr
 80003d8:	1b1b      	subs	r3, r3, r4
 80003da:	b2ad      	uxth	r5, r5
 80003dc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003e0:	fb08 3310 	mls	r3, r8, r0, r3
 80003e4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003e8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003ec:	45a2      	cmp	sl, r4
 80003ee:	d908      	bls.n	8000402 <__udivmoddi4+0x1da>
 80003f0:	eb1e 0404 	adds.w	r4, lr, r4
 80003f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f8:	d26b      	bcs.n	80004d2 <__udivmoddi4+0x2aa>
 80003fa:	45a2      	cmp	sl, r4
 80003fc:	d969      	bls.n	80004d2 <__udivmoddi4+0x2aa>
 80003fe:	3802      	subs	r0, #2
 8000400:	4474      	add	r4, lr
 8000402:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000406:	fba0 8902 	umull	r8, r9, r0, r2
 800040a:	eba4 040a 	sub.w	r4, r4, sl
 800040e:	454c      	cmp	r4, r9
 8000410:	46c2      	mov	sl, r8
 8000412:	464b      	mov	r3, r9
 8000414:	d354      	bcc.n	80004c0 <__udivmoddi4+0x298>
 8000416:	d051      	beq.n	80004bc <__udivmoddi4+0x294>
 8000418:	2e00      	cmp	r6, #0
 800041a:	d069      	beq.n	80004f0 <__udivmoddi4+0x2c8>
 800041c:	ebb1 050a 	subs.w	r5, r1, sl
 8000420:	eb64 0403 	sbc.w	r4, r4, r3
 8000424:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000428:	40fd      	lsrs	r5, r7
 800042a:	40fc      	lsrs	r4, r7
 800042c:	ea4c 0505 	orr.w	r5, ip, r5
 8000430:	e9c6 5400 	strd	r5, r4, [r6]
 8000434:	2700      	movs	r7, #0
 8000436:	e747      	b.n	80002c8 <__udivmoddi4+0xa0>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f703 	lsr.w	r7, r0, r3
 8000440:	4095      	lsls	r5, r2
 8000442:	fa01 f002 	lsl.w	r0, r1, r2
 8000446:	fa21 f303 	lsr.w	r3, r1, r3
 800044a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800044e:	4338      	orrs	r0, r7
 8000450:	0c01      	lsrs	r1, r0, #16
 8000452:	fbb3 f7fe 	udiv	r7, r3, lr
 8000456:	fa1f f885 	uxth.w	r8, r5
 800045a:	fb0e 3317 	mls	r3, lr, r7, r3
 800045e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000462:	fb07 f308 	mul.w	r3, r7, r8
 8000466:	428b      	cmp	r3, r1
 8000468:	fa04 f402 	lsl.w	r4, r4, r2
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x256>
 800046e:	1869      	adds	r1, r5, r1
 8000470:	f107 3cff 	add.w	ip, r7, #4294967295
 8000474:	d22f      	bcs.n	80004d6 <__udivmoddi4+0x2ae>
 8000476:	428b      	cmp	r3, r1
 8000478:	d92d      	bls.n	80004d6 <__udivmoddi4+0x2ae>
 800047a:	3f02      	subs	r7, #2
 800047c:	4429      	add	r1, r5
 800047e:	1acb      	subs	r3, r1, r3
 8000480:	b281      	uxth	r1, r0
 8000482:	fbb3 f0fe 	udiv	r0, r3, lr
 8000486:	fb0e 3310 	mls	r3, lr, r0, r3
 800048a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048e:	fb00 f308 	mul.w	r3, r0, r8
 8000492:	428b      	cmp	r3, r1
 8000494:	d907      	bls.n	80004a6 <__udivmoddi4+0x27e>
 8000496:	1869      	adds	r1, r5, r1
 8000498:	f100 3cff 	add.w	ip, r0, #4294967295
 800049c:	d217      	bcs.n	80004ce <__udivmoddi4+0x2a6>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d915      	bls.n	80004ce <__udivmoddi4+0x2a6>
 80004a2:	3802      	subs	r0, #2
 80004a4:	4429      	add	r1, r5
 80004a6:	1ac9      	subs	r1, r1, r3
 80004a8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004ac:	e73b      	b.n	8000326 <__udivmoddi4+0xfe>
 80004ae:	4637      	mov	r7, r6
 80004b0:	4630      	mov	r0, r6
 80004b2:	e709      	b.n	80002c8 <__udivmoddi4+0xa0>
 80004b4:	4607      	mov	r7, r0
 80004b6:	e6e7      	b.n	8000288 <__udivmoddi4+0x60>
 80004b8:	4618      	mov	r0, r3
 80004ba:	e6fb      	b.n	80002b4 <__udivmoddi4+0x8c>
 80004bc:	4541      	cmp	r1, r8
 80004be:	d2ab      	bcs.n	8000418 <__udivmoddi4+0x1f0>
 80004c0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004c4:	eb69 020e 	sbc.w	r2, r9, lr
 80004c8:	3801      	subs	r0, #1
 80004ca:	4613      	mov	r3, r2
 80004cc:	e7a4      	b.n	8000418 <__udivmoddi4+0x1f0>
 80004ce:	4660      	mov	r0, ip
 80004d0:	e7e9      	b.n	80004a6 <__udivmoddi4+0x27e>
 80004d2:	4618      	mov	r0, r3
 80004d4:	e795      	b.n	8000402 <__udivmoddi4+0x1da>
 80004d6:	4667      	mov	r7, ip
 80004d8:	e7d1      	b.n	800047e <__udivmoddi4+0x256>
 80004da:	4681      	mov	r9, r0
 80004dc:	e77c      	b.n	80003d8 <__udivmoddi4+0x1b0>
 80004de:	3802      	subs	r0, #2
 80004e0:	442c      	add	r4, r5
 80004e2:	e747      	b.n	8000374 <__udivmoddi4+0x14c>
 80004e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e8:	442b      	add	r3, r5
 80004ea:	e72f      	b.n	800034c <__udivmoddi4+0x124>
 80004ec:	4638      	mov	r0, r7
 80004ee:	e708      	b.n	8000302 <__udivmoddi4+0xda>
 80004f0:	4637      	mov	r7, r6
 80004f2:	e6e9      	b.n	80002c8 <__udivmoddi4+0xa0>

080004f4 <__aeabi_idiv0>:
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop

080004f8 <InitAlarm>:
 * correttamente, durante questo tempo viene proiettata sul display
 * un'animazione. Successivamente viene mostrata la scritta "Ready"
 *
 */

void InitAlarm(void){
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b082      	sub	sp, #8
 80004fc:	af00      	add	r7, sp, #0
	for(int i=0; i<15; i++){
 80004fe:	2300      	movs	r3, #0
 8000500:	607b      	str	r3, [r7, #4]
 8000502:	e02b      	b.n	800055c <InitAlarm+0x64>
		if(i%3==0){
 8000504:	6879      	ldr	r1, [r7, #4]
 8000506:	4b1c      	ldr	r3, [pc, #112]	; (8000578 <InitAlarm+0x80>)
 8000508:	fb83 3201 	smull	r3, r2, r3, r1
 800050c:	17cb      	asrs	r3, r1, #31
 800050e:	1ad2      	subs	r2, r2, r3
 8000510:	4613      	mov	r3, r2
 8000512:	005b      	lsls	r3, r3, #1
 8000514:	4413      	add	r3, r2
 8000516:	1aca      	subs	r2, r1, r3
 8000518:	2a00      	cmp	r2, #0
 800051a:	d101      	bne.n	8000520 <InitAlarm+0x28>
			PulisciSchermo();
 800051c:	f000 fae0 	bl	8000ae0 <PulisciSchermo>
		}

		StampaStringaSuLCD(0, 0, "Initializing");
 8000520:	4a16      	ldr	r2, [pc, #88]	; (800057c <InitAlarm+0x84>)
 8000522:	2100      	movs	r1, #0
 8000524:	2000      	movs	r0, #0
 8000526:	f000 fb22 	bl	8000b6e <StampaStringaSuLCD>
		StampaStringaSuLCD(i%3+12, 0, ".");
 800052a:	687a      	ldr	r2, [r7, #4]
 800052c:	4b12      	ldr	r3, [pc, #72]	; (8000578 <InitAlarm+0x80>)
 800052e:	fb83 3102 	smull	r3, r1, r3, r2
 8000532:	17d3      	asrs	r3, r2, #31
 8000534:	1ac9      	subs	r1, r1, r3
 8000536:	460b      	mov	r3, r1
 8000538:	005b      	lsls	r3, r3, #1
 800053a:	440b      	add	r3, r1
 800053c:	1ad1      	subs	r1, r2, r3
 800053e:	b2cb      	uxtb	r3, r1
 8000540:	330c      	adds	r3, #12
 8000542:	b2db      	uxtb	r3, r3
 8000544:	4a0e      	ldr	r2, [pc, #56]	; (8000580 <InitAlarm+0x88>)
 8000546:	2100      	movs	r1, #0
 8000548:	4618      	mov	r0, r3
 800054a:	f000 fb10 	bl	8000b6e <StampaStringaSuLCD>

		HAL_Delay(1000);
 800054e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000552:	f001 f98f 	bl	8001874 <HAL_Delay>
	for(int i=0; i<15; i++){
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	3301      	adds	r3, #1
 800055a:	607b      	str	r3, [r7, #4]
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	2b0e      	cmp	r3, #14
 8000560:	ddd0      	ble.n	8000504 <InitAlarm+0xc>
	}
	PulisciSchermo();
 8000562:	f000 fabd 	bl	8000ae0 <PulisciSchermo>
	StampaStringaSuLCD(0, 0, "Ready");
 8000566:	4a07      	ldr	r2, [pc, #28]	; (8000584 <InitAlarm+0x8c>)
 8000568:	2100      	movs	r1, #0
 800056a:	2000      	movs	r0, #0
 800056c:	f000 faff 	bl	8000b6e <StampaStringaSuLCD>
}
 8000570:	bf00      	nop
 8000572:	3708      	adds	r7, #8
 8000574:	46bd      	mov	sp, r7
 8000576:	bd80      	pop	{r7, pc}
 8000578:	55555556 	.word	0x55555556
 800057c:	08003b78 	.word	0x08003b78
 8000580:	08003b88 	.word	0x08003b88
 8000584:	08003b8c 	.word	0x08003b8c

08000588 <CheckPassword>:
 * Nel caso in cui l'allarme fosse inserito viene richiamata la funzione per disinserirlo
 *
 *
 */

void CheckPassword(void){
 8000588:	b580      	push	{r7, lr}
 800058a:	af00      	add	r7, sp, #0
	if(strcmp(lettera,"123456")==0){
 800058c:	4931      	ldr	r1, [pc, #196]	; (8000654 <CheckPassword+0xcc>)
 800058e:	4832      	ldr	r0, [pc, #200]	; (8000658 <CheckPassword+0xd0>)
 8000590:	f7ff fe20 	bl	80001d4 <strcmp>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d127      	bne.n	80005ea <CheckPassword+0x62>
		memset(lettera,0,strlen(lettera));
 800059a:	482f      	ldr	r0, [pc, #188]	; (8000658 <CheckPassword+0xd0>)
 800059c:	f7ff fe24 	bl	80001e8 <strlen>
 80005a0:	4603      	mov	r3, r0
 80005a2:	461a      	mov	r2, r3
 80005a4:	2100      	movs	r1, #0
 80005a6:	482c      	ldr	r0, [pc, #176]	; (8000658 <CheckPassword+0xd0>)
 80005a8:	f003 fa94 	bl	8003ad4 <memset>
		memset(password,0,strlen(password));
 80005ac:	482b      	ldr	r0, [pc, #172]	; (800065c <CheckPassword+0xd4>)
 80005ae:	f7ff fe1b 	bl	80001e8 <strlen>
 80005b2:	4603      	mov	r3, r0
 80005b4:	461a      	mov	r2, r3
 80005b6:	2100      	movs	r1, #0
 80005b8:	4828      	ldr	r0, [pc, #160]	; (800065c <CheckPassword+0xd4>)
 80005ba:	f003 fa8b 	bl	8003ad4 <memset>
		cursore=-1;
 80005be:	4b28      	ldr	r3, [pc, #160]	; (8000660 <CheckPassword+0xd8>)
 80005c0:	22ff      	movs	r2, #255	; 0xff
 80005c2:	701a      	strb	r2, [r3, #0]
		tentativi=0;
 80005c4:	4b27      	ldr	r3, [pc, #156]	; (8000664 <CheckPassword+0xdc>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	701a      	strb	r2, [r3, #0]
		if(allarme==0 && intrusion==0){
 80005ca:	4b27      	ldr	r3, [pc, #156]	; (8000668 <CheckPassword+0xe0>)
 80005cc:	781b      	ldrb	r3, [r3, #0]
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d106      	bne.n	80005e0 <CheckPassword+0x58>
 80005d2:	4b26      	ldr	r3, [pc, #152]	; (800066c <CheckPassword+0xe4>)
 80005d4:	781b      	ldrb	r3, [r3, #0]
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d102      	bne.n	80005e0 <CheckPassword+0x58>
			AllarmeAttivo();
 80005da:	f000 f84b 	bl	8000674 <AllarmeAttivo>
 80005de:	e001      	b.n	80005e4 <CheckPassword+0x5c>
		}
		else {
			AllarmeDisattivato();
 80005e0:	f000 f85a 	bl	8000698 <AllarmeDisattivato>
		}
		LedAlarm();
 80005e4:	f000 f8ce 	bl	8000784 <LedAlarm>
		memset(lettera,0,strlen(lettera));
		memset(password,0,strlen(password));
		cursore=-1;
	}

}
 80005e8:	e031      	b.n	800064e <CheckPassword+0xc6>
		PulisciSchermo();
 80005ea:	f000 fa79 	bl	8000ae0 <PulisciSchermo>
		StampaStringaSuLCD(0, 1, "Wrong code");
 80005ee:	4a20      	ldr	r2, [pc, #128]	; (8000670 <CheckPassword+0xe8>)
 80005f0:	2101      	movs	r1, #1
 80005f2:	2000      	movs	r0, #0
 80005f4:	f000 fabb 	bl	8000b6e <StampaStringaSuLCD>
		tentativi++;
 80005f8:	4b1a      	ldr	r3, [pc, #104]	; (8000664 <CheckPassword+0xdc>)
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	3301      	adds	r3, #1
 80005fe:	b2da      	uxtb	r2, r3
 8000600:	4b18      	ldr	r3, [pc, #96]	; (8000664 <CheckPassword+0xdc>)
 8000602:	701a      	strb	r2, [r3, #0]
		if(tentativi==3 && !intrusion){
 8000604:	4b17      	ldr	r3, [pc, #92]	; (8000664 <CheckPassword+0xdc>)
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	2b03      	cmp	r3, #3
 800060a:	d10b      	bne.n	8000624 <CheckPassword+0x9c>
 800060c:	4b17      	ldr	r3, [pc, #92]	; (800066c <CheckPassword+0xe4>)
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	2b00      	cmp	r3, #0
 8000612:	d107      	bne.n	8000624 <CheckPassword+0x9c>
			allarme=1;
 8000614:	4b14      	ldr	r3, [pc, #80]	; (8000668 <CheckPassword+0xe0>)
 8000616:	2201      	movs	r2, #1
 8000618:	701a      	strb	r2, [r3, #0]
			CheckIntrusion();
 800061a:	f000 f897 	bl	800074c <CheckIntrusion>
			tentativi=0;
 800061e:	4b11      	ldr	r3, [pc, #68]	; (8000664 <CheckPassword+0xdc>)
 8000620:	2200      	movs	r2, #0
 8000622:	701a      	strb	r2, [r3, #0]
		memset(lettera,0,strlen(lettera));
 8000624:	480c      	ldr	r0, [pc, #48]	; (8000658 <CheckPassword+0xd0>)
 8000626:	f7ff fddf 	bl	80001e8 <strlen>
 800062a:	4603      	mov	r3, r0
 800062c:	461a      	mov	r2, r3
 800062e:	2100      	movs	r1, #0
 8000630:	4809      	ldr	r0, [pc, #36]	; (8000658 <CheckPassword+0xd0>)
 8000632:	f003 fa4f 	bl	8003ad4 <memset>
		memset(password,0,strlen(password));
 8000636:	4809      	ldr	r0, [pc, #36]	; (800065c <CheckPassword+0xd4>)
 8000638:	f7ff fdd6 	bl	80001e8 <strlen>
 800063c:	4603      	mov	r3, r0
 800063e:	461a      	mov	r2, r3
 8000640:	2100      	movs	r1, #0
 8000642:	4806      	ldr	r0, [pc, #24]	; (800065c <CheckPassword+0xd4>)
 8000644:	f003 fa46 	bl	8003ad4 <memset>
		cursore=-1;
 8000648:	4b05      	ldr	r3, [pc, #20]	; (8000660 <CheckPassword+0xd8>)
 800064a:	22ff      	movs	r2, #255	; 0xff
 800064c:	701a      	strb	r2, [r3, #0]
}
 800064e:	bf00      	nop
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	08003b94 	.word	0x08003b94
 8000658:	2000004c 	.word	0x2000004c
 800065c:	20000040 	.word	0x20000040
 8000660:	20000000 	.word	0x20000000
 8000664:	20000038 	.word	0x20000038
 8000668:	20000034 	.word	0x20000034
 800066c:	2000002c 	.word	0x2000002c
 8000670:	08003b9c 	.word	0x08003b9c

08000674 <AllarmeAttivo>:
 * abilita le interruzioni del sensore PIR e comunica grazie al display
 * l'attivazione dell'allarme
 *
 */

void AllarmeAttivo(void){
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
	allarme=1;
 8000678:	4b05      	ldr	r3, [pc, #20]	; (8000690 <AllarmeAttivo+0x1c>)
 800067a:	2201      	movs	r2, #1
 800067c:	701a      	strb	r2, [r3, #0]
	PulisciSchermo();
 800067e:	f000 fa2f 	bl	8000ae0 <PulisciSchermo>
	StampaStringaSuLCD(0, 0, "Alarm on");
 8000682:	4a04      	ldr	r2, [pc, #16]	; (8000694 <AllarmeAttivo+0x20>)
 8000684:	2100      	movs	r1, #0
 8000686:	2000      	movs	r0, #0
 8000688:	f000 fa71 	bl	8000b6e <StampaStringaSuLCD>
}
 800068c:	bf00      	nop
 800068e:	bd80      	pop	{r7, pc}
 8000690:	20000034 	.word	0x20000034
 8000694:	08003ba8 	.word	0x08003ba8

08000698 <AllarmeDisattivato>:
 * per il lampeggio e viene comunicato grazie al display la disattivazione
 * dell'allarme
 *
 */

void AllarmeDisattivato(void){
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
	allarme=0;
 800069c:	4b0f      	ldr	r3, [pc, #60]	; (80006dc <AllarmeDisattivato+0x44>)
 800069e:	2200      	movs	r2, #0
 80006a0:	701a      	strb	r2, [r3, #0]
	intrusion=0;
 80006a2:	4b0f      	ldr	r3, [pc, #60]	; (80006e0 <AllarmeDisattivato+0x48>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	701a      	strb	r2, [r3, #0]
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 80006a8:	2100      	movs	r1, #0
 80006aa:	480e      	ldr	r0, [pc, #56]	; (80006e4 <AllarmeDisattivato+0x4c>)
 80006ac:	f002 f906 	bl	80028bc <HAL_TIM_PWM_Stop>
	HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, 0);
 80006b0:	2200      	movs	r2, #0
 80006b2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006b6:	480c      	ldr	r0, [pc, #48]	; (80006e8 <AllarmeDisattivato+0x50>)
 80006b8:	f001 fbda 	bl	8001e70 <HAL_GPIO_WritePin>
	PulisciSchermo();
 80006bc:	f000 fa10 	bl	8000ae0 <PulisciSchermo>
	StampaStringaSuLCD(0, 0, "Alarm off");
 80006c0:	4a0a      	ldr	r2, [pc, #40]	; (80006ec <AllarmeDisattivato+0x54>)
 80006c2:	2100      	movs	r1, #0
 80006c4:	2000      	movs	r0, #0
 80006c6:	f000 fa52 	bl	8000b6e <StampaStringaSuLCD>
	strobeBuffer=0;
 80006ca:	4b09      	ldr	r3, [pc, #36]	; (80006f0 <AllarmeDisattivato+0x58>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	601a      	str	r2, [r3, #0]
	strobe = 1;
 80006d0:	4b08      	ldr	r3, [pc, #32]	; (80006f4 <AllarmeDisattivato+0x5c>)
 80006d2:	2201      	movs	r2, #1
 80006d4:	701a      	strb	r2, [r3, #0]
}
 80006d6:	bf00      	nop
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	20000034 	.word	0x20000034
 80006e0:	2000002c 	.word	0x2000002c
 80006e4:	20000054 	.word	0x20000054
 80006e8:	40020400 	.word	0x40020400
 80006ec:	08003bb4 	.word	0x08003bb4
 80006f0:	20000048 	.word	0x20000048
 80006f4:	20000001 	.word	0x20000001

080006f8 <Sound>:
 * Grazie ad un boolean viene attuata l'intermittenza dell'allarme
 * e del lampeggio
 *
 */

void Sound(int strobe){
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
	if(intrusion){
 8000700:	4b0f      	ldr	r3, [pc, #60]	; (8000740 <Sound+0x48>)
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	2b00      	cmp	r3, #0
 8000706:	d017      	beq.n	8000738 <Sound+0x40>
		if(strobe)
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	2b00      	cmp	r3, #0
 800070c:	d00a      	beq.n	8000724 <Sound+0x2c>
		{
			HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800070e:	2100      	movs	r1, #0
 8000710:	480c      	ldr	r0, [pc, #48]	; (8000744 <Sound+0x4c>)
 8000712:	f002 f8a1 	bl	8002858 <HAL_TIM_PWM_Start>
			HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, 1);
 8000716:	2201      	movs	r2, #1
 8000718:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800071c:	480a      	ldr	r0, [pc, #40]	; (8000748 <Sound+0x50>)
 800071e:	f001 fba7 	bl	8001e70 <HAL_GPIO_WritePin>
			HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
			HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, 0);

		}
	}
}
 8000722:	e009      	b.n	8000738 <Sound+0x40>
			HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 8000724:	2100      	movs	r1, #0
 8000726:	4807      	ldr	r0, [pc, #28]	; (8000744 <Sound+0x4c>)
 8000728:	f002 f8c8 	bl	80028bc <HAL_TIM_PWM_Stop>
			HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, 0);
 800072c:	2200      	movs	r2, #0
 800072e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000732:	4805      	ldr	r0, [pc, #20]	; (8000748 <Sound+0x50>)
 8000734:	f001 fb9c 	bl	8001e70 <HAL_GPIO_WritePin>
}
 8000738:	bf00      	nop
 800073a:	3708      	adds	r7, #8
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}
 8000740:	2000002c 	.word	0x2000002c
 8000744:	20000054 	.word	0x20000054
 8000748:	40020400 	.word	0x40020400

0800074c <CheckIntrusion>:
 * attivare l'allarme) e richiama la funzione di Sound() per
 * l'allarme
 *
 */

void CheckIntrusion(void){
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
	strobeBuffer = TEMPO_STROBE;
 8000750:	4b08      	ldr	r3, [pc, #32]	; (8000774 <CheckIntrusion+0x28>)
 8000752:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000756:	601a      	str	r2, [r3, #0]
	intrusion=1;
 8000758:	4b07      	ldr	r3, [pc, #28]	; (8000778 <CheckIntrusion+0x2c>)
 800075a:	2201      	movs	r2, #1
 800075c:	701a      	strb	r2, [r3, #0]
	allarme = 0;
 800075e:	4b07      	ldr	r3, [pc, #28]	; (800077c <CheckIntrusion+0x30>)
 8000760:	2200      	movs	r2, #0
 8000762:	701a      	strb	r2, [r3, #0]
	Sound(strobe);
 8000764:	4b06      	ldr	r3, [pc, #24]	; (8000780 <CheckIntrusion+0x34>)
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	4618      	mov	r0, r3
 800076a:	f7ff ffc5 	bl	80006f8 <Sound>
}
 800076e:	bf00      	nop
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	20000048 	.word	0x20000048
 8000778:	2000002c 	.word	0x2000002c
 800077c:	20000034 	.word	0x20000034
 8000780:	20000001 	.word	0x20000001

08000784 <LedAlarm>:
 * Il led giallo indica allarme non inserito
 * Il led verde indica allarme inserito ma non ancora scattato
 *
 */

void LedAlarm(void){
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
	if(intrusion){
 8000788:	4b22      	ldr	r3, [pc, #136]	; (8000814 <LedAlarm+0x90>)
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	2b00      	cmp	r3, #0
 800078e:	d011      	beq.n	80007b4 <LedAlarm+0x30>
		HAL_GPIO_WritePin(WHITE_LED_GPIO_Port, WHITE_LED_Pin, 1);
 8000790:	2201      	movs	r2, #1
 8000792:	2140      	movs	r1, #64	; 0x40
 8000794:	4820      	ldr	r0, [pc, #128]	; (8000818 <LedAlarm+0x94>)
 8000796:	f001 fb6b 	bl	8001e70 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW_LED_GPIO_Port, YELLOW_LED_Pin, 0);
 800079a:	2200      	movs	r2, #0
 800079c:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007a0:	481e      	ldr	r0, [pc, #120]	; (800081c <LedAlarm+0x98>)
 80007a2:	f001 fb65 	bl	8001e70 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, 0);
 80007a6:	2200      	movs	r2, #0
 80007a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007ac:	481b      	ldr	r0, [pc, #108]	; (800081c <LedAlarm+0x98>)
 80007ae:	f001 fb5f 	bl	8001e70 <HAL_GPIO_WritePin>
 80007b2:	e004      	b.n	80007be <LedAlarm+0x3a>
	}
	else
	    HAL_GPIO_WritePin(WHITE_LED_GPIO_Port, WHITE_LED_Pin, 0);
 80007b4:	2200      	movs	r2, #0
 80007b6:	2140      	movs	r1, #64	; 0x40
 80007b8:	4817      	ldr	r0, [pc, #92]	; (8000818 <LedAlarm+0x94>)
 80007ba:	f001 fb59 	bl	8001e70 <HAL_GPIO_WritePin>
	if(!allarme && !intrusion)
 80007be:	4b18      	ldr	r3, [pc, #96]	; (8000820 <LedAlarm+0x9c>)
 80007c0:	781b      	ldrb	r3, [r3, #0]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d110      	bne.n	80007e8 <LedAlarm+0x64>
 80007c6:	4b13      	ldr	r3, [pc, #76]	; (8000814 <LedAlarm+0x90>)
 80007c8:	781b      	ldrb	r3, [r3, #0]
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d10c      	bne.n	80007e8 <LedAlarm+0x64>
	{
    	HAL_GPIO_WritePin(YELLOW_LED_GPIO_Port, YELLOW_LED_Pin, 1);
 80007ce:	2201      	movs	r2, #1
 80007d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007d4:	4811      	ldr	r0, [pc, #68]	; (800081c <LedAlarm+0x98>)
 80007d6:	f001 fb4b 	bl	8001e70 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, 0);
 80007da:	2200      	movs	r2, #0
 80007dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007e0:	480e      	ldr	r0, [pc, #56]	; (800081c <LedAlarm+0x98>)
 80007e2:	f001 fb45 	bl	8001e70 <HAL_GPIO_WritePin>
	{
		HAL_GPIO_WritePin(YELLOW_LED_GPIO_Port, YELLOW_LED_Pin, 0);
		HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, 1);
	}

}
 80007e6:	e013      	b.n	8000810 <LedAlarm+0x8c>
	else if(allarme && !intrusion)
 80007e8:	4b0d      	ldr	r3, [pc, #52]	; (8000820 <LedAlarm+0x9c>)
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d00f      	beq.n	8000810 <LedAlarm+0x8c>
 80007f0:	4b08      	ldr	r3, [pc, #32]	; (8000814 <LedAlarm+0x90>)
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d10b      	bne.n	8000810 <LedAlarm+0x8c>
		HAL_GPIO_WritePin(YELLOW_LED_GPIO_Port, YELLOW_LED_Pin, 0);
 80007f8:	2200      	movs	r2, #0
 80007fa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007fe:	4807      	ldr	r0, [pc, #28]	; (800081c <LedAlarm+0x98>)
 8000800:	f001 fb36 	bl	8001e70 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, 1);
 8000804:	2201      	movs	r2, #1
 8000806:	f44f 7180 	mov.w	r1, #256	; 0x100
 800080a:	4804      	ldr	r0, [pc, #16]	; (800081c <LedAlarm+0x98>)
 800080c:	f001 fb30 	bl	8001e70 <HAL_GPIO_WritePin>
}
 8000810:	bf00      	nop
 8000812:	bd80      	pop	{r7, pc}
 8000814:	2000002c 	.word	0x2000002c
 8000818:	40020000 	.word	0x40020000
 800081c:	40020400 	.word	0x40020400
 8000820:	20000034 	.word	0x20000034

08000824 <init_LCD>:

/*
 * Funzione di inizializzazione display lcd
 */
void init_LCD(void)
	{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
	init_modo_4bit();
 8000828:	f000 f808 	bl	800083c <init_modo_4bit>
	SetLCD ();
 800082c:	f000 f84a 	bl	80008c4 <SetLCD>
	go_xy(0,0);
 8000830:	2100      	movs	r1, #0
 8000832:	2000      	movs	r0, #0
 8000834:	f000 f976 	bl	8000b24 <go_xy>
	}
 8000838:	bf00      	nop
 800083a:	bd80      	pop	{r7, pc}

0800083c <init_modo_4bit>:
 * 2 di controllo RS e EN   con clock
 * 4 di dati D4,D5,D6,D7
 *
 */
void init_modo_4bit(void)
	{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
	HAL_Delay(50);
 8000840:	2032      	movs	r0, #50	; 0x32
 8000842:	f001 f817 	bl	8001874 <HAL_Delay>
    //0011xxxx
	HAL_GPIO_WritePin(PIN_D7_GPIO_Port,PIN_D7_Pin,GPIO_PIN_RESET);
 8000846:	2200      	movs	r2, #0
 8000848:	2120      	movs	r1, #32
 800084a:	481b      	ldr	r0, [pc, #108]	; (80008b8 <init_modo_4bit+0x7c>)
 800084c:	f001 fb10 	bl	8001e70 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PIN_D6_GPIO_Port,PIN_D6_Pin,GPIO_PIN_RESET);
 8000850:	2200      	movs	r2, #0
 8000852:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000856:	4819      	ldr	r0, [pc, #100]	; (80008bc <init_modo_4bit+0x80>)
 8000858:	f001 fb0a 	bl	8001e70 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PIN_D5_GPIO_Port,PIN_D5_Pin,GPIO_PIN_SET);
 800085c:	2201      	movs	r2, #1
 800085e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000862:	4816      	ldr	r0, [pc, #88]	; (80008bc <init_modo_4bit+0x80>)
 8000864:	f001 fb04 	bl	8001e70 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PIN_D4_GPIO_Port,PIN_D4_Pin,GPIO_PIN_SET);
 8000868:	2201      	movs	r2, #1
 800086a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800086e:	4814      	ldr	r0, [pc, #80]	; (80008c0 <init_modo_4bit+0x84>)
 8000870:	f001 fafe 	bl	8001e70 <HAL_GPIO_WritePin>
    //spedizione del dato 0x33 attraveso 2 nibble 0x03 e 0x03
	LcdStrobe();
 8000874:	f000 f852 	bl	800091c <LcdStrobe>
	HAL_Delay(10);          //questi ritardi possono diminuire
 8000878:	200a      	movs	r0, #10
 800087a:	f000 fffb 	bl	8001874 <HAL_Delay>
	LcdStrobe();
 800087e:	f000 f84d 	bl	800091c <LcdStrobe>
	HAL_Delay(10);
 8000882:	200a      	movs	r0, #10
 8000884:	f000 fff6 	bl	8001874 <HAL_Delay>
	//spedizione del dato 0x32 attraveso 2 nibble 0x03 e 0x02
	LcdStrobe();
 8000888:	f000 f848 	bl	800091c <LcdStrobe>
	HAL_Delay(10);
 800088c:	200a      	movs	r0, #10
 800088e:	f000 fff1 	bl	8001874 <HAL_Delay>
    //0010xxxx
	HAL_GPIO_WritePin(PIN_D4_GPIO_Port,PIN_D4_Pin,GPIO_PIN_RESET);
 8000892:	2200      	movs	r2, #0
 8000894:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000898:	4809      	ldr	r0, [pc, #36]	; (80008c0 <init_modo_4bit+0x84>)
 800089a:	f001 fae9 	bl	8001e70 <HAL_GPIO_WritePin>
	LcdStrobe();
 800089e:	f000 f83d 	bl	800091c <LcdStrobe>
	HAL_Delay(10);
 80008a2:	200a      	movs	r0, #10
 80008a4:	f000 ffe6 	bl	8001874 <HAL_Delay>
	HAL_GPIO_WritePin(PIN_D5_GPIO_Port,PIN_D5_Pin,GPIO_PIN_RESET);
 80008a8:	2200      	movs	r2, #0
 80008aa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008ae:	4803      	ldr	r0, [pc, #12]	; (80008bc <init_modo_4bit+0x80>)
 80008b0:	f001 fade 	bl	8001e70 <HAL_GPIO_WritePin>
	//il display ha acquisito la modalit� 4 bit;
	}
 80008b4:	bf00      	nop
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	40020800 	.word	0x40020800
 80008bc:	40020000 	.word	0x40020000
 80008c0:	40020400 	.word	0x40020400

080008c4 <SetLCD>:

void SetLCD (void)
 	 {
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
	//Initializza LCD  vedi DisplayTech 204_a_serie.pdf pag 5
	HAL_Delay(10);
 80008c8:	200a      	movs	r0, #10
 80008ca:	f000 ffd3 	bl	8001874 <HAL_Delay>
	lcd_cmd(0x28); //0010 1000 Function Set:  4 bit, 2 linee, 5x7
 80008ce:	2028      	movs	r0, #40	; 0x28
 80008d0:	f000 f840 	bl	8000954 <lcd_cmd>

	HAL_Delay(10);
 80008d4:	200a      	movs	r0, #10
 80008d6:	f000 ffcd 	bl	8001874 <HAL_Delay>
	lcd_cmd(0xC);  //0000 1100  Display On, Cursor Off, No Cursor Blink
 80008da:	200c      	movs	r0, #12
 80008dc:	f000 f83a 	bl	8000954 <lcd_cmd>

	HAL_Delay(10);
 80008e0:	200a      	movs	r0, #10
 80008e2:	f000 ffc7 	bl	8001874 <HAL_Delay>
	lcd_cmd(0x6);  //0000 0110 Entry Mode  cursore avanti
 80008e6:	2006      	movs	r0, #6
 80008e8:	f000 f834 	bl	8000954 <lcd_cmd>

	HAL_Delay(10);
 80008ec:	200a      	movs	r0, #10
 80008ee:	f000 ffc1 	bl	8001874 <HAL_Delay>
	lcd_cmd(0x80); //Initialize DDRAM address to zero
 80008f2:	2080      	movs	r0, #128	; 0x80
 80008f4:	f000 f82e 	bl	8000954 <lcd_cmd>

	HAL_Delay(10);
 80008f8:	200a      	movs	r0, #10
 80008fa:	f000 ffbb 	bl	8001874 <HAL_Delay>
	lcd_cmd(0x1);  //0000 0001 Display Clear
 80008fe:	2001      	movs	r0, #1
 8000900:	f000 f828 	bl	8000954 <lcd_cmd>

	HAL_Delay(10);
 8000904:	200a      	movs	r0, #10
 8000906:	f000 ffb5 	bl	8001874 <HAL_Delay>
	lcd_cmd(0x2);  //0000 0010 prima posizione
 800090a:	2002      	movs	r0, #2
 800090c:	f000 f822 	bl	8000954 <lcd_cmd>

	HAL_Delay(20); //perchè sia chiaro che sto partendo/ripartendo
 8000910:	2014      	movs	r0, #20
 8000912:	f000 ffaf 	bl	8001874 <HAL_Delay>
 }
 8000916:	bf00      	nop
 8000918:	bd80      	pop	{r7, pc}
	...

0800091c <LcdStrobe>:




void LcdStrobe(void)
	{
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0
	uint8_t i;
	HAL_GPIO_WritePin(PIN_EN_GPIO_Port,PIN_EN_Pin,GPIO_PIN_SET);
 8000922:	2201      	movs	r2, #1
 8000924:	2140      	movs	r1, #64	; 0x40
 8000926:	480a      	ldr	r0, [pc, #40]	; (8000950 <LcdStrobe+0x34>)
 8000928:	f001 faa2 	bl	8001e70 <HAL_GPIO_WritePin>
	for (i=0;i < CICLI_ATTESA_PER_LCD;i++);
 800092c:	2300      	movs	r3, #0
 800092e:	71fb      	strb	r3, [r7, #7]
 8000930:	e002      	b.n	8000938 <LcdStrobe+0x1c>
 8000932:	79fb      	ldrb	r3, [r7, #7]
 8000934:	3301      	adds	r3, #1
 8000936:	71fb      	strb	r3, [r7, #7]
 8000938:	79fb      	ldrb	r3, [r7, #7]
 800093a:	2b09      	cmp	r3, #9
 800093c:	d9f9      	bls.n	8000932 <LcdStrobe+0x16>
	HAL_GPIO_WritePin(PIN_EN_GPIO_Port,PIN_EN_Pin,GPIO_PIN_RESET);
 800093e:	2200      	movs	r2, #0
 8000940:	2140      	movs	r1, #64	; 0x40
 8000942:	4803      	ldr	r0, [pc, #12]	; (8000950 <LcdStrobe+0x34>)
 8000944:	f001 fa94 	bl	8001e70 <HAL_GPIO_WritePin>
	}
 8000948:	bf00      	nop
 800094a:	3708      	adds	r7, #8
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	40020800 	.word	0x40020800

08000954 <lcd_cmd>:

void lcd_cmd(uint8_t c)
	{
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0
 800095a:	4603      	mov	r3, r0
 800095c:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(2);
 800095e:	2002      	movs	r0, #2
 8000960:	f000 ff88 	bl	8001874 <HAL_Delay>
	//HAL_Delay(0);
	HAL_GPIO_WritePin(PIN_RS_GPIO_Port,PIN_RS_Pin,GPIO_PIN_RESET);
 8000964:	2200      	movs	r2, #0
 8000966:	f44f 7180 	mov.w	r1, #256	; 0x100
 800096a:	4805      	ldr	r0, [pc, #20]	; (8000980 <lcd_cmd+0x2c>)
 800096c:	f001 fa80 	bl	8001e70 <HAL_GPIO_WritePin>
	CodeOut(c);
 8000970:	79fb      	ldrb	r3, [r7, #7]
 8000972:	4618      	mov	r0, r3
 8000974:	f000 f806 	bl	8000984 <CodeOut>
	}
 8000978:	bf00      	nop
 800097a:	3708      	adds	r7, #8
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}
 8000980:	40020800 	.word	0x40020800

08000984 <CodeOut>:

void CodeOut(uint8_t c)
	{
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af00      	add	r7, sp, #0
 800098a:	4603      	mov	r3, r0
 800098c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(PIN_D7_GPIO_Port,PIN_D7_Pin,GPIO_PIN_RESET);
 800098e:	2200      	movs	r2, #0
 8000990:	2120      	movs	r1, #32
 8000992:	4850      	ldr	r0, [pc, #320]	; (8000ad4 <CodeOut+0x150>)
 8000994:	f001 fa6c 	bl	8001e70 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PIN_D6_GPIO_Port,PIN_D6_Pin,GPIO_PIN_RESET);
 8000998:	2200      	movs	r2, #0
 800099a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800099e:	484e      	ldr	r0, [pc, #312]	; (8000ad8 <CodeOut+0x154>)
 80009a0:	f001 fa66 	bl	8001e70 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PIN_D5_GPIO_Port,PIN_D5_Pin,GPIO_PIN_RESET);
 80009a4:	2200      	movs	r2, #0
 80009a6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009aa:	484b      	ldr	r0, [pc, #300]	; (8000ad8 <CodeOut+0x154>)
 80009ac:	f001 fa60 	bl	8001e70 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PIN_D4_GPIO_Port,PIN_D4_Pin,GPIO_PIN_RESET);
 80009b0:	2200      	movs	r2, #0
 80009b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009b6:	4849      	ldr	r0, [pc, #292]	; (8000adc <CodeOut+0x158>)
 80009b8:	f001 fa5a 	bl	8001e70 <HAL_GPIO_WritePin>

	if(c&0x80)
 80009bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	da04      	bge.n	80009ce <CodeOut+0x4a>
		HAL_GPIO_WritePin(PIN_D7_GPIO_Port,PIN_D7_Pin,GPIO_PIN_SET);
 80009c4:	2201      	movs	r2, #1
 80009c6:	2120      	movs	r1, #32
 80009c8:	4842      	ldr	r0, [pc, #264]	; (8000ad4 <CodeOut+0x150>)
 80009ca:	f001 fa51 	bl	8001e70 <HAL_GPIO_WritePin>
	if(c&0x40)
 80009ce:	79fb      	ldrb	r3, [r7, #7]
 80009d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d005      	beq.n	80009e4 <CodeOut+0x60>
		HAL_GPIO_WritePin(PIN_D6_GPIO_Port,PIN_D6_Pin,GPIO_PIN_SET);
 80009d8:	2201      	movs	r2, #1
 80009da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009de:	483e      	ldr	r0, [pc, #248]	; (8000ad8 <CodeOut+0x154>)
 80009e0:	f001 fa46 	bl	8001e70 <HAL_GPIO_WritePin>
	if(c&0x20)
 80009e4:	79fb      	ldrb	r3, [r7, #7]
 80009e6:	f003 0320 	and.w	r3, r3, #32
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d005      	beq.n	80009fa <CodeOut+0x76>
		HAL_GPIO_WritePin(PIN_D5_GPIO_Port,PIN_D5_Pin,GPIO_PIN_SET);
 80009ee:	2201      	movs	r2, #1
 80009f0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009f4:	4838      	ldr	r0, [pc, #224]	; (8000ad8 <CodeOut+0x154>)
 80009f6:	f001 fa3b 	bl	8001e70 <HAL_GPIO_WritePin>
	if(c&0x10)
 80009fa:	79fb      	ldrb	r3, [r7, #7]
 80009fc:	f003 0310 	and.w	r3, r3, #16
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d005      	beq.n	8000a10 <CodeOut+0x8c>
		HAL_GPIO_WritePin(PIN_D4_GPIO_Port,PIN_D4_Pin,GPIO_PIN_SET);
 8000a04:	2201      	movs	r2, #1
 8000a06:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a0a:	4834      	ldr	r0, [pc, #208]	; (8000adc <CodeOut+0x158>)
 8000a0c:	f001 fa30 	bl	8001e70 <HAL_GPIO_WritePin>
	LcdStrobe();
 8000a10:	f7ff ff84 	bl	800091c <LcdStrobe>

	HAL_GPIO_WritePin(PIN_D7_GPIO_Port,PIN_D7_Pin,GPIO_PIN_RESET);
 8000a14:	2200      	movs	r2, #0
 8000a16:	2120      	movs	r1, #32
 8000a18:	482e      	ldr	r0, [pc, #184]	; (8000ad4 <CodeOut+0x150>)
 8000a1a:	f001 fa29 	bl	8001e70 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PIN_D6_GPIO_Port,PIN_D6_Pin,GPIO_PIN_RESET);
 8000a1e:	2200      	movs	r2, #0
 8000a20:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a24:	482c      	ldr	r0, [pc, #176]	; (8000ad8 <CodeOut+0x154>)
 8000a26:	f001 fa23 	bl	8001e70 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PIN_D5_GPIO_Port,PIN_D5_Pin,GPIO_PIN_RESET);
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a30:	4829      	ldr	r0, [pc, #164]	; (8000ad8 <CodeOut+0x154>)
 8000a32:	f001 fa1d 	bl	8001e70 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PIN_D4_GPIO_Port,PIN_D4_Pin,GPIO_PIN_RESET);
 8000a36:	2200      	movs	r2, #0
 8000a38:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a3c:	4827      	ldr	r0, [pc, #156]	; (8000adc <CodeOut+0x158>)
 8000a3e:	f001 fa17 	bl	8001e70 <HAL_GPIO_WritePin>

	if(c&0x8)
 8000a42:	79fb      	ldrb	r3, [r7, #7]
 8000a44:	f003 0308 	and.w	r3, r3, #8
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d004      	beq.n	8000a56 <CodeOut+0xd2>
		HAL_GPIO_WritePin(PIN_D7_GPIO_Port,PIN_D7_Pin,GPIO_PIN_SET);
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	2120      	movs	r1, #32
 8000a50:	4820      	ldr	r0, [pc, #128]	; (8000ad4 <CodeOut+0x150>)
 8000a52:	f001 fa0d 	bl	8001e70 <HAL_GPIO_WritePin>
	if(c&0x4)
 8000a56:	79fb      	ldrb	r3, [r7, #7]
 8000a58:	f003 0304 	and.w	r3, r3, #4
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d005      	beq.n	8000a6c <CodeOut+0xe8>
		HAL_GPIO_WritePin(PIN_D6_GPIO_Port,PIN_D6_Pin,GPIO_PIN_SET);
 8000a60:	2201      	movs	r2, #1
 8000a62:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a66:	481c      	ldr	r0, [pc, #112]	; (8000ad8 <CodeOut+0x154>)
 8000a68:	f001 fa02 	bl	8001e70 <HAL_GPIO_WritePin>
	if(c&0x2)
 8000a6c:	79fb      	ldrb	r3, [r7, #7]
 8000a6e:	f003 0302 	and.w	r3, r3, #2
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d005      	beq.n	8000a82 <CodeOut+0xfe>
		HAL_GPIO_WritePin(PIN_D5_GPIO_Port,PIN_D5_Pin,GPIO_PIN_SET);
 8000a76:	2201      	movs	r2, #1
 8000a78:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a7c:	4816      	ldr	r0, [pc, #88]	; (8000ad8 <CodeOut+0x154>)
 8000a7e:	f001 f9f7 	bl	8001e70 <HAL_GPIO_WritePin>
	if(c&0x1)
 8000a82:	79fb      	ldrb	r3, [r7, #7]
 8000a84:	f003 0301 	and.w	r3, r3, #1
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d005      	beq.n	8000a98 <CodeOut+0x114>
		HAL_GPIO_WritePin(PIN_D4_GPIO_Port,PIN_D4_Pin,GPIO_PIN_SET);
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a92:	4812      	ldr	r0, [pc, #72]	; (8000adc <CodeOut+0x158>)
 8000a94:	f001 f9ec 	bl	8001e70 <HAL_GPIO_WritePin>
	LcdStrobe();
 8000a98:	f7ff ff40 	bl	800091c <LcdStrobe>

	HAL_GPIO_WritePin(PIN_D7_GPIO_Port,PIN_D7_Pin,GPIO_PIN_RESET);
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	2120      	movs	r1, #32
 8000aa0:	480c      	ldr	r0, [pc, #48]	; (8000ad4 <CodeOut+0x150>)
 8000aa2:	f001 f9e5 	bl	8001e70 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PIN_D6_GPIO_Port,PIN_D6_Pin,GPIO_PIN_RESET);
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000aac:	480a      	ldr	r0, [pc, #40]	; (8000ad8 <CodeOut+0x154>)
 8000aae:	f001 f9df 	bl	8001e70 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PIN_D5_GPIO_Port,PIN_D5_Pin,GPIO_PIN_RESET);
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ab8:	4807      	ldr	r0, [pc, #28]	; (8000ad8 <CodeOut+0x154>)
 8000aba:	f001 f9d9 	bl	8001e70 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PIN_D4_GPIO_Port,PIN_D4_Pin,GPIO_PIN_RESET);
 8000abe:	2200      	movs	r2, #0
 8000ac0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ac4:	4805      	ldr	r0, [pc, #20]	; (8000adc <CodeOut+0x158>)
 8000ac6:	f001 f9d3 	bl	8001e70 <HAL_GPIO_WritePin>
	}
 8000aca:	bf00      	nop
 8000acc:	3708      	adds	r7, #8
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	40020800 	.word	0x40020800
 8000ad8:	40020000 	.word	0x40020000
 8000adc:	40020400 	.word	0x40020400

08000ae0 <PulisciSchermo>:


void PulisciSchermo(void)   //testata
  	{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
   	lcd_cmd(0x1);
 8000ae4:	2001      	movs	r0, #1
 8000ae6:	f7ff ff35 	bl	8000954 <lcd_cmd>
  	}
 8000aea:	bf00      	nop
 8000aec:	bd80      	pop	{r7, pc}

08000aee <StampaInteroSuLCD>:

/*
 Stampa un intero nella posizione Colonna Riga
 */
void StampaInteroSuLCD(unsigned char Colonna,unsigned char Riga,uint16_t valore)
	{
 8000aee:	b580      	push	{r7, lr}
 8000af0:	b086      	sub	sp, #24
 8000af2:	af00      	add	r7, sp, #0
 8000af4:	4603      	mov	r3, r0
 8000af6:	71fb      	strb	r3, [r7, #7]
 8000af8:	460b      	mov	r3, r1
 8000afa:	71bb      	strb	r3, [r7, #6]
 8000afc:	4613      	mov	r3, r2
 8000afe:	80bb      	strh	r3, [r7, #4]
	char str[10];
	itoa(valore,str,10);
 8000b00:	88bb      	ldrh	r3, [r7, #4]
 8000b02:	f107 010c 	add.w	r1, r7, #12
 8000b06:	220a      	movs	r2, #10
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f002 ffe1 	bl	8003ad0 <itoa>
	StampaStringaSuLCD(Colonna,Riga,str);
 8000b0e:	f107 020c 	add.w	r2, r7, #12
 8000b12:	79b9      	ldrb	r1, [r7, #6]
 8000b14:	79fb      	ldrb	r3, [r7, #7]
 8000b16:	4618      	mov	r0, r3
 8000b18:	f000 f829 	bl	8000b6e <StampaStringaSuLCD>
	}
 8000b1c:	bf00      	nop
 8000b1e:	3718      	adds	r7, #24
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}

08000b24 <go_xy>:

/*sposta il cursore su x=colonna, y=riga */
void go_xy(char x,char y)
	{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b084      	sub	sp, #16
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	460a      	mov	r2, r1
 8000b2e:	71fb      	strb	r3, [r7, #7]
 8000b30:	4613      	mov	r3, r2
 8000b32:	71bb      	strb	r3, [r7, #6]
	unsigned char base=0;
 8000b34:	2300      	movs	r3, #0
 8000b36:	73fb      	strb	r3, [r7, #15]
	switch(y)
 8000b38:	79bb      	ldrb	r3, [r7, #6]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d002      	beq.n	8000b44 <go_xy+0x20>
 8000b3e:	2b01      	cmp	r3, #1
 8000b40:	d003      	beq.n	8000b4a <go_xy+0x26>
 8000b42:	e005      	b.n	8000b50 <go_xy+0x2c>
    	{
    	case 0:
    		base=MIN_PRIMA_RIGA;
 8000b44:	2300      	movs	r3, #0
 8000b46:	73fb      	strb	r3, [r7, #15]
    	break;
 8000b48:	e002      	b.n	8000b50 <go_xy+0x2c>
    	case 1:
    		base=MIN_SECONDA_RIGA;
 8000b4a:	2340      	movs	r3, #64	; 0x40
 8000b4c:	73fb      	strb	r3, [r7, #15]
    	break;
 8000b4e:	bf00      	nop
    	}
    x+=base;
 8000b50:	79fa      	ldrb	r2, [r7, #7]
 8000b52:	7bfb      	ldrb	r3, [r7, #15]
 8000b54:	4413      	add	r3, r2
 8000b56:	71fb      	strb	r3, [r7, #7]
    lcd_cmd(x|0X80);
 8000b58:	79fb      	ldrb	r3, [r7, #7]
 8000b5a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000b5e:	b2db      	uxtb	r3, r3
 8000b60:	4618      	mov	r0, r3
 8000b62:	f7ff fef7 	bl	8000954 <lcd_cmd>
    }
 8000b66:	bf00      	nop
 8000b68:	3710      	adds	r7, #16
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}

08000b6e <StampaStringaSuLCD>:
 * Stampa una stringa nella posizione colonna, riga (la stringa non deve oltrepassare
 * il bordo
 *
 */
void StampaStringaSuLCD(uint8_t colonna,uint8_t riga, char *p)   //riga e colonna poi stringa
  	{
 8000b6e:	b580      	push	{r7, lr}
 8000b70:	b082      	sub	sp, #8
 8000b72:	af00      	add	r7, sp, #0
 8000b74:	4603      	mov	r3, r0
 8000b76:	603a      	str	r2, [r7, #0]
 8000b78:	71fb      	strb	r3, [r7, #7]
 8000b7a:	460b      	mov	r3, r1
 8000b7c:	71bb      	strb	r3, [r7, #6]
   	go_xy(colonna,riga) ;
 8000b7e:	79ba      	ldrb	r2, [r7, #6]
 8000b80:	79fb      	ldrb	r3, [r7, #7]
 8000b82:	4611      	mov	r1, r2
 8000b84:	4618      	mov	r0, r3
 8000b86:	f7ff ffcd 	bl	8000b24 <go_xy>
   	lcd_puts(p);
 8000b8a:	6838      	ldr	r0, [r7, #0]
 8000b8c:	f000 f804 	bl	8000b98 <lcd_puts>
  	}
 8000b90:	bf00      	nop
 8000b92:	3708      	adds	r7, #8
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}

08000b98 <lcd_puts>:
	lcd_data(c);
	}

/* stampa il carattere *s*/
void lcd_puts(char * s)
	{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
	while(*s)
 8000ba0:	e006      	b.n	8000bb0 <lcd_puts+0x18>
		lcd_data(*s++);
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	1c5a      	adds	r2, r3, #1
 8000ba6:	607a      	str	r2, [r7, #4]
 8000ba8:	781b      	ldrb	r3, [r3, #0]
 8000baa:	4618      	mov	r0, r3
 8000bac:	f000 f808 	bl	8000bc0 <lcd_data>
	while(*s)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d1f4      	bne.n	8000ba2 <lcd_puts+0xa>
	}
 8000bb8:	bf00      	nop
 8000bba:	3708      	adds	r7, #8
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}

08000bc0 <lcd_data>:

/* Invia un carattere all'LCD */
void lcd_data(unsigned char c)
	{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(0);
 8000bca:	2000      	movs	r0, #0
 8000bcc:	f000 fe52 	bl	8001874 <HAL_Delay>
	HAL_GPIO_WritePin(PIN_RS_GPIO_Port,PIN_RS_Pin,GPIO_PIN_SET);
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bd6:	4808      	ldr	r0, [pc, #32]	; (8000bf8 <lcd_data+0x38>)
 8000bd8:	f001 f94a 	bl	8001e70 <HAL_GPIO_WritePin>
	CodeOut(c);
 8000bdc:	79fb      	ldrb	r3, [r7, #7]
 8000bde:	4618      	mov	r0, r3
 8000be0:	f7ff fed0 	bl	8000984 <CodeOut>
	HAL_GPIO_WritePin(PIN_RS_GPIO_Port,PIN_RS_Pin,GPIO_PIN_RESET);
 8000be4:	2200      	movs	r2, #0
 8000be6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bea:	4803      	ldr	r0, [pc, #12]	; (8000bf8 <lcd_data+0x38>)
 8000bec:	f001 f940 	bl	8001e70 <HAL_GPIO_WritePin>
	}
 8000bf0:	bf00      	nop
 8000bf2:	3708      	adds	r7, #8
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	40020800 	.word	0x40020800

08000bfc <AttivaPinKeyb4x4>:

/*
 * Funzione che provoca la rotazione di '0' tra le varie righe
 */
void AttivaPinKeyb4x4(uint8_t index)
	{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	4603      	mov	r3, r0
 8000c04:	71fb      	strb	r3, [r7, #7]


	HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin,GPIO_PIN_SET);
 8000c06:	2201      	movs	r2, #1
 8000c08:	2101      	movs	r1, #1
 8000c0a:	481e      	ldr	r0, [pc, #120]	; (8000c84 <AttivaPinKeyb4x4+0x88>)
 8000c0c:	f001 f930 	bl	8001e70 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin,GPIO_PIN_SET);
 8000c10:	2201      	movs	r2, #1
 8000c12:	2102      	movs	r1, #2
 8000c14:	481b      	ldr	r0, [pc, #108]	; (8000c84 <AttivaPinKeyb4x4+0x88>)
 8000c16:	f001 f92b 	bl	8001e70 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R3_GPIO_Port, R3_Pin,GPIO_PIN_SET);
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	2101      	movs	r1, #1
 8000c1e:	481a      	ldr	r0, [pc, #104]	; (8000c88 <AttivaPinKeyb4x4+0x8c>)
 8000c20:	f001 f926 	bl	8001e70 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R4_GPIO_Port, R4_Pin,GPIO_PIN_SET);
 8000c24:	2201      	movs	r2, #1
 8000c26:	2110      	movs	r1, #16
 8000c28:	4818      	ldr	r0, [pc, #96]	; (8000c8c <AttivaPinKeyb4x4+0x90>)
 8000c2a:	f001 f921 	bl	8001e70 <HAL_GPIO_WritePin>
	switch(index)
 8000c2e:	79fb      	ldrb	r3, [r7, #7]
 8000c30:	2b03      	cmp	r3, #3
 8000c32:	d823      	bhi.n	8000c7c <AttivaPinKeyb4x4+0x80>
 8000c34:	a201      	add	r2, pc, #4	; (adr r2, 8000c3c <AttivaPinKeyb4x4+0x40>)
 8000c36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c3a:	bf00      	nop
 8000c3c:	08000c4d 	.word	0x08000c4d
 8000c40:	08000c59 	.word	0x08000c59
 8000c44:	08000c65 	.word	0x08000c65
 8000c48:	08000c71 	.word	0x08000c71
		{
		case 0:
			HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin,GPIO_PIN_RESET);
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	2101      	movs	r1, #1
 8000c50:	480c      	ldr	r0, [pc, #48]	; (8000c84 <AttivaPinKeyb4x4+0x88>)
 8000c52:	f001 f90d 	bl	8001e70 <HAL_GPIO_WritePin>
		break;
 8000c56:	e011      	b.n	8000c7c <AttivaPinKeyb4x4+0x80>
		case 1:
			HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin,GPIO_PIN_RESET);
 8000c58:	2200      	movs	r2, #0
 8000c5a:	2102      	movs	r1, #2
 8000c5c:	4809      	ldr	r0, [pc, #36]	; (8000c84 <AttivaPinKeyb4x4+0x88>)
 8000c5e:	f001 f907 	bl	8001e70 <HAL_GPIO_WritePin>
		break;
 8000c62:	e00b      	b.n	8000c7c <AttivaPinKeyb4x4+0x80>
		case 2:
			HAL_GPIO_WritePin(R3_GPIO_Port, R3_Pin,GPIO_PIN_RESET);
 8000c64:	2200      	movs	r2, #0
 8000c66:	2101      	movs	r1, #1
 8000c68:	4807      	ldr	r0, [pc, #28]	; (8000c88 <AttivaPinKeyb4x4+0x8c>)
 8000c6a:	f001 f901 	bl	8001e70 <HAL_GPIO_WritePin>
		break;
 8000c6e:	e005      	b.n	8000c7c <AttivaPinKeyb4x4+0x80>
		case 3:
			HAL_GPIO_WritePin(R4_GPIO_Port, R4_Pin,GPIO_PIN_RESET);
 8000c70:	2200      	movs	r2, #0
 8000c72:	2110      	movs	r1, #16
 8000c74:	4805      	ldr	r0, [pc, #20]	; (8000c8c <AttivaPinKeyb4x4+0x90>)
 8000c76:	f001 f8fb 	bl	8001e70 <HAL_GPIO_WritePin>
		break;
 8000c7a:	bf00      	nop
		}

	}
 8000c7c:	bf00      	nop
 8000c7e:	3708      	adds	r7, #8
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	40020800 	.word	0x40020800
 8000c88:	40020400 	.word	0x40020400
 8000c8c:	40020000 	.word	0x40020000

08000c90 <StartKeyb4x4>:
/*
 * Funzione di inizializzazione della tastiera
 * Rendiamo attivo il ciclo, impostiamo la durata dello '0' nelle righe
 */
void StartKeyb4x4(void)
	{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
    CicloKeyb4x4Attivo=1;
 8000c94:	4b06      	ldr	r3, [pc, #24]	; (8000cb0 <StartKeyb4x4+0x20>)
 8000c96:	2201      	movs	r2, #1
 8000c98:	701a      	strb	r2, [r3, #0]
    DurataValoreBasso=DURATA_VALORE_BASSO;
 8000c9a:	4b06      	ldr	r3, [pc, #24]	; (8000cb4 <StartKeyb4x4+0x24>)
 8000c9c:	220a      	movs	r2, #10
 8000c9e:	801a      	strh	r2, [r3, #0]
    AttivaPinKeyb4x4(IndiceCicloKeyb4x4);
 8000ca0:	4b05      	ldr	r3, [pc, #20]	; (8000cb8 <StartKeyb4x4+0x28>)
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f7ff ffa9 	bl	8000bfc <AttivaPinKeyb4x4>
	}
 8000caa:	bf00      	nop
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	2000002e 	.word	0x2000002e
 8000cb4:	2000003c 	.word	0x2000003c
 8000cb8:	2000002d 	.word	0x2000002d

08000cbc <GestioneRigheMatriceKeyb4x4>:
/*
 * Funzione utilizzata per i tempi di antirimbalzo
 *  e per la rotazione dello '0' sulle varie righe
 */
void GestioneRigheMatriceKeyb4x4(void)
	{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0

	if(TempoAR_Keyb4x4)   //se è attivo un tempo antirimbalzo
 8000cc0:	4b1c      	ldr	r3, [pc, #112]	; (8000d34 <GestioneRigheMatriceKeyb4x4+0x78>)
 8000cc2:	881b      	ldrh	r3, [r3, #0]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d00f      	beq.n	8000ce8 <GestioneRigheMatriceKeyb4x4+0x2c>
		{
		TempoAR_Keyb4x4--;
 8000cc8:	4b1a      	ldr	r3, [pc, #104]	; (8000d34 <GestioneRigheMatriceKeyb4x4+0x78>)
 8000cca:	881b      	ldrh	r3, [r3, #0]
 8000ccc:	3b01      	subs	r3, #1
 8000cce:	b29a      	uxth	r2, r3
 8000cd0:	4b18      	ldr	r3, [pc, #96]	; (8000d34 <GestioneRigheMatriceKeyb4x4+0x78>)
 8000cd2:	801a      	strh	r2, [r3, #0]
		if(!TempoAR_Keyb4x4)
 8000cd4:	4b17      	ldr	r3, [pc, #92]	; (8000d34 <GestioneRigheMatriceKeyb4x4+0x78>)
 8000cd6:	881b      	ldrh	r3, [r3, #0]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d105      	bne.n	8000ce8 <GestioneRigheMatriceKeyb4x4+0x2c>
			{
			RiconosciTastoAttivato();
 8000cdc:	f000 f832 	bl	8000d44 <RiconosciTastoAttivato>
			HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000ce0:	2017      	movs	r0, #23
 8000ce2:	f000 ff02 	bl	8001aea <HAL_NVIC_EnableIRQ>
			return;
 8000ce6:	e024      	b.n	8000d32 <GestioneRigheMatriceKeyb4x4+0x76>
			}
		}

	if(!CicloKeyb4x4Attivo) return;   //se NON devo far ruotare lo '0',esco
 8000ce8:	4b13      	ldr	r3, [pc, #76]	; (8000d38 <GestioneRigheMatriceKeyb4x4+0x7c>)
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d01f      	beq.n	8000d30 <GestioneRigheMatriceKeyb4x4+0x74>
	DurataValoreBasso--;
 8000cf0:	4b12      	ldr	r3, [pc, #72]	; (8000d3c <GestioneRigheMatriceKeyb4x4+0x80>)
 8000cf2:	881b      	ldrh	r3, [r3, #0]
 8000cf4:	3b01      	subs	r3, #1
 8000cf6:	b29a      	uxth	r2, r3
 8000cf8:	4b10      	ldr	r3, [pc, #64]	; (8000d3c <GestioneRigheMatriceKeyb4x4+0x80>)
 8000cfa:	801a      	strh	r2, [r3, #0]
	if(!DurataValoreBasso)
 8000cfc:	4b0f      	ldr	r3, [pc, #60]	; (8000d3c <GestioneRigheMatriceKeyb4x4+0x80>)
 8000cfe:	881b      	ldrh	r3, [r3, #0]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d116      	bne.n	8000d32 <GestioneRigheMatriceKeyb4x4+0x76>
		{
		IndiceCicloKeyb4x4++;
 8000d04:	4b0e      	ldr	r3, [pc, #56]	; (8000d40 <GestioneRigheMatriceKeyb4x4+0x84>)
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	3301      	adds	r3, #1
 8000d0a:	b2da      	uxtb	r2, r3
 8000d0c:	4b0c      	ldr	r3, [pc, #48]	; (8000d40 <GestioneRigheMatriceKeyb4x4+0x84>)
 8000d0e:	701a      	strb	r2, [r3, #0]
		if (IndiceCicloKeyb4x4>3)
 8000d10:	4b0b      	ldr	r3, [pc, #44]	; (8000d40 <GestioneRigheMatriceKeyb4x4+0x84>)
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	2b03      	cmp	r3, #3
 8000d16:	d902      	bls.n	8000d1e <GestioneRigheMatriceKeyb4x4+0x62>
				IndiceCicloKeyb4x4=0;
 8000d18:	4b09      	ldr	r3, [pc, #36]	; (8000d40 <GestioneRigheMatriceKeyb4x4+0x84>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	701a      	strb	r2, [r3, #0]
		AttivaPinKeyb4x4(IndiceCicloKeyb4x4);
 8000d1e:	4b08      	ldr	r3, [pc, #32]	; (8000d40 <GestioneRigheMatriceKeyb4x4+0x84>)
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	4618      	mov	r0, r3
 8000d24:	f7ff ff6a 	bl	8000bfc <AttivaPinKeyb4x4>
		DurataValoreBasso=DURATA_VALORE_BASSO;
 8000d28:	4b04      	ldr	r3, [pc, #16]	; (8000d3c <GestioneRigheMatriceKeyb4x4+0x80>)
 8000d2a:	220a      	movs	r2, #10
 8000d2c:	801a      	strh	r2, [r3, #0]
 8000d2e:	e000      	b.n	8000d32 <GestioneRigheMatriceKeyb4x4+0x76>
	if(!CicloKeyb4x4Attivo) return;   //se NON devo far ruotare lo '0',esco
 8000d30:	bf00      	nop
		}
	}
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	2000003a 	.word	0x2000003a
 8000d38:	2000002e 	.word	0x2000002e
 8000d3c:	2000003c 	.word	0x2000003c
 8000d40:	2000002d 	.word	0x2000002d

08000d44 <RiconosciTastoAttivato>:
 * e inserimento del tasto premuto nella stringa
 * Cripting password, per ogni tasto premuto mostro un '*'
 */

void RiconosciTastoAttivato(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
	uint8_t TastoAttivo=0;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	71fb      	strb	r3, [r7, #7]
	static uint8_t TastoAttivoPrec=0;
	static int8_t nTasti=0;
	switch(PinAttivato) //riconosco eventuale tasto premuto
 8000d4e:	4b5e      	ldr	r3, [pc, #376]	; (8000ec8 <RiconosciTastoAttivato+0x184>)
 8000d50:	881b      	ldrh	r3, [r3, #0]
 8000d52:	2b40      	cmp	r3, #64	; 0x40
 8000d54:	d019      	beq.n	8000d8a <RiconosciTastoAttivato+0x46>
 8000d56:	2b40      	cmp	r3, #64	; 0x40
 8000d58:	dc02      	bgt.n	8000d60 <RiconosciTastoAttivato+0x1c>
 8000d5a:	2b20      	cmp	r3, #32
 8000d5c:	d006      	beq.n	8000d6c <RiconosciTastoAttivato+0x28>
 8000d5e:	e049      	b.n	8000df4 <RiconosciTastoAttivato+0xb0>
 8000d60:	2b80      	cmp	r3, #128	; 0x80
 8000d62:	d021      	beq.n	8000da8 <RiconosciTastoAttivato+0x64>
 8000d64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000d68:	d02d      	beq.n	8000dc6 <RiconosciTastoAttivato+0x82>
 8000d6a:	e043      	b.n	8000df4 <RiconosciTastoAttivato+0xb0>
		{
		case C1_Pin:
			if(!HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin))
 8000d6c:	2120      	movs	r1, #32
 8000d6e:	4857      	ldr	r0, [pc, #348]	; (8000ecc <RiconosciTastoAttivato+0x188>)
 8000d70:	f001 f866 	bl	8001e40 <HAL_GPIO_ReadPin>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d135      	bne.n	8000de6 <RiconosciTastoAttivato+0xa2>
				TastoAttivo=TastiKeyb4x4[IndiceCicloKeyb4x4][0];
 8000d7a:	4b55      	ldr	r3, [pc, #340]	; (8000ed0 <RiconosciTastoAttivato+0x18c>)
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	461a      	mov	r2, r3
 8000d80:	4b54      	ldr	r3, [pc, #336]	; (8000ed4 <RiconosciTastoAttivato+0x190>)
 8000d82:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 8000d86:	71fb      	strb	r3, [r7, #7]

		break;
 8000d88:	e02d      	b.n	8000de6 <RiconosciTastoAttivato+0xa2>
		case C2_Pin:
			if(!HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin))
 8000d8a:	2140      	movs	r1, #64	; 0x40
 8000d8c:	4852      	ldr	r0, [pc, #328]	; (8000ed8 <RiconosciTastoAttivato+0x194>)
 8000d8e:	f001 f857 	bl	8001e40 <HAL_GPIO_ReadPin>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d128      	bne.n	8000dea <RiconosciTastoAttivato+0xa6>
				TastoAttivo=TastiKeyb4x4[IndiceCicloKeyb4x4][1];
 8000d98:	4b4d      	ldr	r3, [pc, #308]	; (8000ed0 <RiconosciTastoAttivato+0x18c>)
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	4a4d      	ldr	r2, [pc, #308]	; (8000ed4 <RiconosciTastoAttivato+0x190>)
 8000d9e:	009b      	lsls	r3, r3, #2
 8000da0:	4413      	add	r3, r2
 8000da2:	785b      	ldrb	r3, [r3, #1]
 8000da4:	71fb      	strb	r3, [r7, #7]
		break;
 8000da6:	e020      	b.n	8000dea <RiconosciTastoAttivato+0xa6>
		case C3_Pin:
			if(!HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin))
 8000da8:	2180      	movs	r1, #128	; 0x80
 8000daa:	484c      	ldr	r0, [pc, #304]	; (8000edc <RiconosciTastoAttivato+0x198>)
 8000dac:	f001 f848 	bl	8001e40 <HAL_GPIO_ReadPin>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d11b      	bne.n	8000dee <RiconosciTastoAttivato+0xaa>
				TastoAttivo=TastiKeyb4x4[IndiceCicloKeyb4x4][2];
 8000db6:	4b46      	ldr	r3, [pc, #280]	; (8000ed0 <RiconosciTastoAttivato+0x18c>)
 8000db8:	781b      	ldrb	r3, [r3, #0]
 8000dba:	4a46      	ldr	r2, [pc, #280]	; (8000ed4 <RiconosciTastoAttivato+0x190>)
 8000dbc:	009b      	lsls	r3, r3, #2
 8000dbe:	4413      	add	r3, r2
 8000dc0:	789b      	ldrb	r3, [r3, #2]
 8000dc2:	71fb      	strb	r3, [r7, #7]
		break;
 8000dc4:	e013      	b.n	8000dee <RiconosciTastoAttivato+0xaa>
		case C4_Pin:
			if(!HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin))
 8000dc6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000dca:	4840      	ldr	r0, [pc, #256]	; (8000ecc <RiconosciTastoAttivato+0x188>)
 8000dcc:	f001 f838 	bl	8001e40 <HAL_GPIO_ReadPin>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d10d      	bne.n	8000df2 <RiconosciTastoAttivato+0xae>
				TastoAttivo=TastiKeyb4x4[IndiceCicloKeyb4x4][3];
 8000dd6:	4b3e      	ldr	r3, [pc, #248]	; (8000ed0 <RiconosciTastoAttivato+0x18c>)
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	4a3e      	ldr	r2, [pc, #248]	; (8000ed4 <RiconosciTastoAttivato+0x190>)
 8000ddc:	009b      	lsls	r3, r3, #2
 8000dde:	4413      	add	r3, r2
 8000de0:	78db      	ldrb	r3, [r3, #3]
 8000de2:	71fb      	strb	r3, [r7, #7]
		break;
 8000de4:	e005      	b.n	8000df2 <RiconosciTastoAttivato+0xae>
		break;
 8000de6:	bf00      	nop
 8000de8:	e004      	b.n	8000df4 <RiconosciTastoAttivato+0xb0>
		break;
 8000dea:	bf00      	nop
 8000dec:	e002      	b.n	8000df4 <RiconosciTastoAttivato+0xb0>
		break;
 8000dee:	bf00      	nop
 8000df0:	e000      	b.n	8000df4 <RiconosciTastoAttivato+0xb0>
		break;
 8000df2:	bf00      	nop
		}

	 if(!TastoAttivo)  //era un rilascio
 8000df4:	79fb      	ldrb	r3, [r7, #7]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d11c      	bne.n	8000e34 <RiconosciTastoAttivato+0xf0>
	 	{
		if(nTasti)     //
 8000dfa:	4b39      	ldr	r3, [pc, #228]	; (8000ee0 <RiconosciTastoAttivato+0x19c>)
 8000dfc:	f993 3000 	ldrsb.w	r3, [r3]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d008      	beq.n	8000e16 <RiconosciTastoAttivato+0xd2>
			nTasti--;
 8000e04:	4b36      	ldr	r3, [pc, #216]	; (8000ee0 <RiconosciTastoAttivato+0x19c>)
 8000e06:	f993 3000 	ldrsb.w	r3, [r3]
 8000e0a:	b2db      	uxtb	r3, r3
 8000e0c:	3b01      	subs	r3, #1
 8000e0e:	b2db      	uxtb	r3, r3
 8000e10:	b25a      	sxtb	r2, r3
 8000e12:	4b33      	ldr	r3, [pc, #204]	; (8000ee0 <RiconosciTastoAttivato+0x19c>)
 8000e14:	701a      	strb	r2, [r3, #0]
	 	if(!nTasti)
 8000e16:	4b32      	ldr	r3, [pc, #200]	; (8000ee0 <RiconosciTastoAttivato+0x19c>)
 8000e18:	f993 3000 	ldrsb.w	r3, [r3]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d14e      	bne.n	8000ebe <RiconosciTastoAttivato+0x17a>
	 		{
	 		DurataValoreBasso=DURATA_VALORE_BASSO;
 8000e20:	4b30      	ldr	r3, [pc, #192]	; (8000ee4 <RiconosciTastoAttivato+0x1a0>)
 8000e22:	220a      	movs	r2, #10
 8000e24:	801a      	strh	r2, [r3, #0]
	 		CicloKeyb4x4Attivo=1;   // al rilascio, riattivo il ciclo
 8000e26:	4b30      	ldr	r3, [pc, #192]	; (8000ee8 <RiconosciTastoAttivato+0x1a4>)
 8000e28:	2201      	movs	r2, #1
 8000e2a:	701a      	strb	r2, [r3, #0]
	 		TastoAttivoPrec=0;
 8000e2c:	4b2f      	ldr	r3, [pc, #188]	; (8000eec <RiconosciTastoAttivato+0x1a8>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	701a      	strb	r2, [r3, #0]
	 	}//pubblico il tasto primario su una  riga
	 	if(TastoAttivo!=TastoAttivoPrec)   //conteggio di tasti premuti sulla
	 		nTasti++;                      //sulla stessa riga anche diversi dal primario
	 	TastoAttivoPrec=TastoAttivo;       //su questo devo ripensarci bene....
	 	}
	}
 8000e32:	e044      	b.n	8000ebe <RiconosciTastoAttivato+0x17a>
	 	if(!nTasti){
 8000e34:	4b2a      	ldr	r3, [pc, #168]	; (8000ee0 <RiconosciTastoAttivato+0x19c>)
 8000e36:	f993 3000 	ldrsb.w	r3, [r3]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d12e      	bne.n	8000e9c <RiconosciTastoAttivato+0x158>
	 		TastoPremuto=TastoAttivo;
 8000e3e:	4a2c      	ldr	r2, [pc, #176]	; (8000ef0 <RiconosciTastoAttivato+0x1ac>)
 8000e40:	79fb      	ldrb	r3, [r7, #7]
 8000e42:	7013      	strb	r3, [r2, #0]
	 		cursore++;
 8000e44:	4b2b      	ldr	r3, [pc, #172]	; (8000ef4 <RiconosciTastoAttivato+0x1b0>)
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	3301      	adds	r3, #1
 8000e4a:	b2da      	uxtb	r2, r3
 8000e4c:	4b29      	ldr	r3, [pc, #164]	; (8000ef4 <RiconosciTastoAttivato+0x1b0>)
 8000e4e:	701a      	strb	r2, [r3, #0]
	 		if(cursore!=6){
 8000e50:	4b28      	ldr	r3, [pc, #160]	; (8000ef4 <RiconosciTastoAttivato+0x1b0>)
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	2b06      	cmp	r3, #6
 8000e56:	d00c      	beq.n	8000e72 <RiconosciTastoAttivato+0x12e>
	 			lettera[cursore]=TastoAttivo;
 8000e58:	4b26      	ldr	r3, [pc, #152]	; (8000ef4 <RiconosciTastoAttivato+0x1b0>)
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	4a26      	ldr	r2, [pc, #152]	; (8000ef8 <RiconosciTastoAttivato+0x1b4>)
 8000e60:	79fb      	ldrb	r3, [r7, #7]
 8000e62:	5453      	strb	r3, [r2, r1]
	 			password[cursore] = TastiKeyb4x4[3][0];
 8000e64:	4b23      	ldr	r3, [pc, #140]	; (8000ef4 <RiconosciTastoAttivato+0x1b0>)
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	461a      	mov	r2, r3
 8000e6a:	212a      	movs	r1, #42	; 0x2a
 8000e6c:	4b23      	ldr	r3, [pc, #140]	; (8000efc <RiconosciTastoAttivato+0x1b8>)
 8000e6e:	5499      	strb	r1, [r3, r2]
 8000e70:	e014      	b.n	8000e9c <RiconosciTastoAttivato+0x158>
	 			cursore=-1;
 8000e72:	4b20      	ldr	r3, [pc, #128]	; (8000ef4 <RiconosciTastoAttivato+0x1b0>)
 8000e74:	22ff      	movs	r2, #255	; 0xff
 8000e76:	701a      	strb	r2, [r3, #0]
	 			memset(lettera,0,strlen(lettera));
 8000e78:	481f      	ldr	r0, [pc, #124]	; (8000ef8 <RiconosciTastoAttivato+0x1b4>)
 8000e7a:	f7ff f9b5 	bl	80001e8 <strlen>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	461a      	mov	r2, r3
 8000e82:	2100      	movs	r1, #0
 8000e84:	481c      	ldr	r0, [pc, #112]	; (8000ef8 <RiconosciTastoAttivato+0x1b4>)
 8000e86:	f002 fe25 	bl	8003ad4 <memset>
	 			memset(password,0,strlen(password));
 8000e8a:	481c      	ldr	r0, [pc, #112]	; (8000efc <RiconosciTastoAttivato+0x1b8>)
 8000e8c:	f7ff f9ac 	bl	80001e8 <strlen>
 8000e90:	4603      	mov	r3, r0
 8000e92:	461a      	mov	r2, r3
 8000e94:	2100      	movs	r1, #0
 8000e96:	4819      	ldr	r0, [pc, #100]	; (8000efc <RiconosciTastoAttivato+0x1b8>)
 8000e98:	f002 fe1c 	bl	8003ad4 <memset>
	 	if(TastoAttivo!=TastoAttivoPrec)   //conteggio di tasti premuti sulla
 8000e9c:	4b13      	ldr	r3, [pc, #76]	; (8000eec <RiconosciTastoAttivato+0x1a8>)
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	79fa      	ldrb	r2, [r7, #7]
 8000ea2:	429a      	cmp	r2, r3
 8000ea4:	d008      	beq.n	8000eb8 <RiconosciTastoAttivato+0x174>
	 		nTasti++;                      //sulla stessa riga anche diversi dal primario
 8000ea6:	4b0e      	ldr	r3, [pc, #56]	; (8000ee0 <RiconosciTastoAttivato+0x19c>)
 8000ea8:	f993 3000 	ldrsb.w	r3, [r3]
 8000eac:	b2db      	uxtb	r3, r3
 8000eae:	3301      	adds	r3, #1
 8000eb0:	b2db      	uxtb	r3, r3
 8000eb2:	b25a      	sxtb	r2, r3
 8000eb4:	4b0a      	ldr	r3, [pc, #40]	; (8000ee0 <RiconosciTastoAttivato+0x19c>)
 8000eb6:	701a      	strb	r2, [r3, #0]
	 	TastoAttivoPrec=TastoAttivo;       //su questo devo ripensarci bene....
 8000eb8:	4a0c      	ldr	r2, [pc, #48]	; (8000eec <RiconosciTastoAttivato+0x1a8>)
 8000eba:	79fb      	ldrb	r3, [r7, #7]
 8000ebc:	7013      	strb	r3, [r2, #0]
	}
 8000ebe:	bf00      	nop
 8000ec0:	3708      	adds	r7, #8
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	2000003e 	.word	0x2000003e
 8000ecc:	40020000 	.word	0x40020000
 8000ed0:	2000002d 	.word	0x2000002d
 8000ed4:	08003bd8 	.word	0x08003bd8
 8000ed8:	40020400 	.word	0x40020400
 8000edc:	40020800 	.word	0x40020800
 8000ee0:	20000030 	.word	0x20000030
 8000ee4:	2000003c 	.word	0x2000003c
 8000ee8:	2000002e 	.word	0x2000002e
 8000eec:	20000031 	.word	0x20000031
 8000ef0:	2000002f 	.word	0x2000002f
 8000ef4:	20000000 	.word	0x20000000
 8000ef8:	2000004c 	.word	0x2000004c
 8000efc:	20000040 	.word	0x20000040

08000f00 <GestioneEXTI_Keyb4x4>:
 * Gestione del tasto premuto, disabilitazione del ciclo
 * e disabilitazione interruzioni per un
 * tempo di antirimbalzo
 */
void GestioneEXTI_Keyb4x4(uint16_t GPIO_Pin)
	{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	4603      	mov	r3, r0
 8000f08:	80fb      	strh	r3, [r7, #6]
	CicloKeyb4x4Attivo=0;
 8000f0a:	4b08      	ldr	r3, [pc, #32]	; (8000f2c <GestioneEXTI_Keyb4x4+0x2c>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	701a      	strb	r2, [r3, #0]
	HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 8000f10:	2017      	movs	r0, #23
 8000f12:	f000 fdf8 	bl	8001b06 <HAL_NVIC_DisableIRQ>
	TempoAR_Keyb4x4=TEMPO_AR_KEYB4x4;
 8000f16:	4b06      	ldr	r3, [pc, #24]	; (8000f30 <GestioneEXTI_Keyb4x4+0x30>)
 8000f18:	2264      	movs	r2, #100	; 0x64
 8000f1a:	801a      	strh	r2, [r3, #0]
	PinAttivato= GPIO_Pin;
 8000f1c:	4a05      	ldr	r2, [pc, #20]	; (8000f34 <GestioneEXTI_Keyb4x4+0x34>)
 8000f1e:	88fb      	ldrh	r3, [r7, #6]
 8000f20:	8013      	strh	r3, [r2, #0]
	}
 8000f22:	bf00      	nop
 8000f24:	3708      	adds	r7, #8
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	2000002e 	.word	0x2000002e
 8000f30:	2000003a 	.word	0x2000003a
 8000f34:	2000003e 	.word	0x2000003e

08000f38 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b08a      	sub	sp, #40	; 0x28
 8000f3c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f3e:	f107 0314 	add.w	r3, r7, #20
 8000f42:	2200      	movs	r2, #0
 8000f44:	601a      	str	r2, [r3, #0]
 8000f46:	605a      	str	r2, [r3, #4]
 8000f48:	609a      	str	r2, [r3, #8]
 8000f4a:	60da      	str	r2, [r3, #12]
 8000f4c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f4e:	2300      	movs	r3, #0
 8000f50:	613b      	str	r3, [r7, #16]
 8000f52:	4b6f      	ldr	r3, [pc, #444]	; (8001110 <MX_GPIO_Init+0x1d8>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f56:	4a6e      	ldr	r2, [pc, #440]	; (8001110 <MX_GPIO_Init+0x1d8>)
 8000f58:	f043 0304 	orr.w	r3, r3, #4
 8000f5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f5e:	4b6c      	ldr	r3, [pc, #432]	; (8001110 <MX_GPIO_Init+0x1d8>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f62:	f003 0304 	and.w	r3, r3, #4
 8000f66:	613b      	str	r3, [r7, #16]
 8000f68:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	60fb      	str	r3, [r7, #12]
 8000f6e:	4b68      	ldr	r3, [pc, #416]	; (8001110 <MX_GPIO_Init+0x1d8>)
 8000f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f72:	4a67      	ldr	r2, [pc, #412]	; (8001110 <MX_GPIO_Init+0x1d8>)
 8000f74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f78:	6313      	str	r3, [r2, #48]	; 0x30
 8000f7a:	4b65      	ldr	r3, [pc, #404]	; (8001110 <MX_GPIO_Init+0x1d8>)
 8000f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f82:	60fb      	str	r3, [r7, #12]
 8000f84:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f86:	2300      	movs	r3, #0
 8000f88:	60bb      	str	r3, [r7, #8]
 8000f8a:	4b61      	ldr	r3, [pc, #388]	; (8001110 <MX_GPIO_Init+0x1d8>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8e:	4a60      	ldr	r2, [pc, #384]	; (8001110 <MX_GPIO_Init+0x1d8>)
 8000f90:	f043 0301 	orr.w	r3, r3, #1
 8000f94:	6313      	str	r3, [r2, #48]	; 0x30
 8000f96:	4b5e      	ldr	r3, [pc, #376]	; (8001110 <MX_GPIO_Init+0x1d8>)
 8000f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9a:	f003 0301 	and.w	r3, r3, #1
 8000f9e:	60bb      	str	r3, [r7, #8]
 8000fa0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	607b      	str	r3, [r7, #4]
 8000fa6:	4b5a      	ldr	r3, [pc, #360]	; (8001110 <MX_GPIO_Init+0x1d8>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000faa:	4a59      	ldr	r2, [pc, #356]	; (8001110 <MX_GPIO_Init+0x1d8>)
 8000fac:	f043 0302 	orr.w	r3, r3, #2
 8000fb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fb2:	4b57      	ldr	r3, [pc, #348]	; (8001110 <MX_GPIO_Init+0x1d8>)
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb6:	f003 0302 	and.w	r3, r3, #2
 8000fba:	607b      	str	r3, [r7, #4]
 8000fbc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, R1_Pin|R2_Pin, GPIO_PIN_SET);
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	2103      	movs	r1, #3
 8000fc2:	4854      	ldr	r0, [pc, #336]	; (8001114 <MX_GPIO_Init+0x1dc>)
 8000fc4:	f000 ff54 	bl	8001e70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(R4_GPIO_Port, R4_Pin, GPIO_PIN_SET);
 8000fc8:	2201      	movs	r2, #1
 8000fca:	2110      	movs	r1, #16
 8000fcc:	4852      	ldr	r0, [pc, #328]	; (8001118 <MX_GPIO_Init+0x1e0>)
 8000fce:	f000 ff4f 	bl	8001e70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, WHITE_LED_Pin|PIN_D5_Pin|PIN_D6_Pin, GPIO_PIN_RESET);
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 8000fd8:	484f      	ldr	r0, [pc, #316]	; (8001118 <MX_GPIO_Init+0x1e0>)
 8000fda:	f000 ff49 	bl	8001e70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, PIN_D7_Pin|PIN_EN_Pin|PIN_RS_Pin, GPIO_PIN_RESET);
 8000fde:	2200      	movs	r2, #0
 8000fe0:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8000fe4:	484b      	ldr	r0, [pc, #300]	; (8001114 <MX_GPIO_Init+0x1dc>)
 8000fe6:	f000 ff43 	bl	8001e70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(R3_GPIO_Port, R3_Pin, GPIO_PIN_SET);
 8000fea:	2201      	movs	r2, #1
 8000fec:	2101      	movs	r1, #1
 8000fee:	484b      	ldr	r0, [pc, #300]	; (800111c <MX_GPIO_Init+0x1e4>)
 8000ff0:	f000 ff3e 	bl	8001e70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RED_LED_Pin|PIN_D4_Pin|GREEN_LED_Pin|YELLOW_LED_Pin, GPIO_PIN_RESET);
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	f44f 51b8 	mov.w	r1, #5888	; 0x1700
 8000ffa:	4848      	ldr	r0, [pc, #288]	; (800111c <MX_GPIO_Init+0x1e4>)
 8000ffc:	f000 ff38 	bl	8001e70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001000:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001004:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001006:	4b46      	ldr	r3, [pc, #280]	; (8001120 <MX_GPIO_Init+0x1e8>)
 8001008:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800100a:	2301      	movs	r3, #1
 800100c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800100e:	f107 0314 	add.w	r3, r7, #20
 8001012:	4619      	mov	r1, r3
 8001014:	483f      	ldr	r0, [pc, #252]	; (8001114 <MX_GPIO_Init+0x1dc>)
 8001016:	f000 fd91 	bl	8001b3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin 
                           PCPin */
  GPIO_InitStruct.Pin = R1_Pin|R2_Pin|PIN_D7_Pin|PIN_EN_Pin 
 800101a:	f240 1363 	movw	r3, #355	; 0x163
 800101e:	617b      	str	r3, [r7, #20]
                          |PIN_RS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001020:	2301      	movs	r3, #1
 8001022:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001024:	2300      	movs	r3, #0
 8001026:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001028:	2300      	movs	r3, #0
 800102a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800102c:	f107 0314 	add.w	r3, r7, #20
 8001030:	4619      	mov	r1, r3
 8001032:	4838      	ldr	r0, [pc, #224]	; (8001114 <MX_GPIO_Init+0x1dc>)
 8001034:	f000 fd82 	bl	8001b3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PIR_Pin;
 8001038:	2308      	movs	r3, #8
 800103a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800103c:	4b39      	ldr	r3, [pc, #228]	; (8001124 <MX_GPIO_Init+0x1ec>)
 800103e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001040:	2301      	movs	r3, #1
 8001042:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PIR_GPIO_Port, &GPIO_InitStruct);
 8001044:	f107 0314 	add.w	r3, r7, #20
 8001048:	4619      	mov	r1, r3
 800104a:	4832      	ldr	r0, [pc, #200]	; (8001114 <MX_GPIO_Init+0x1dc>)
 800104c:	f000 fd76 	bl	8001b3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = R4_Pin|WHITE_LED_Pin|PIN_D5_Pin|PIN_D6_Pin;
 8001050:	f641 0350 	movw	r3, #6224	; 0x1850
 8001054:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001056:	2301      	movs	r3, #1
 8001058:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105a:	2300      	movs	r3, #0
 800105c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800105e:	2300      	movs	r3, #0
 8001060:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001062:	f107 0314 	add.w	r3, r7, #20
 8001066:	4619      	mov	r1, r3
 8001068:	482b      	ldr	r0, [pc, #172]	; (8001118 <MX_GPIO_Init+0x1e0>)
 800106a:	f000 fd67 	bl	8001b3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = C1_Pin|C4_Pin;
 800106e:	f44f 7308 	mov.w	r3, #544	; 0x220
 8001072:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001074:	4b2c      	ldr	r3, [pc, #176]	; (8001128 <MX_GPIO_Init+0x1f0>)
 8001076:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001078:	2301      	movs	r3, #1
 800107a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800107c:	f107 0314 	add.w	r3, r7, #20
 8001080:	4619      	mov	r1, r3
 8001082:	4825      	ldr	r0, [pc, #148]	; (8001118 <MX_GPIO_Init+0x1e0>)
 8001084:	f000 fd5a 	bl	8001b3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin 
                           PBPin */
  GPIO_InitStruct.Pin = R3_Pin|RED_LED_Pin|PIN_D4_Pin|GREEN_LED_Pin 
 8001088:	f241 7301 	movw	r3, #5889	; 0x1701
 800108c:	617b      	str	r3, [r7, #20]
                          |YELLOW_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800108e:	2301      	movs	r3, #1
 8001090:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001092:	2300      	movs	r3, #0
 8001094:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001096:	2300      	movs	r3, #0
 8001098:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800109a:	f107 0314 	add.w	r3, r7, #20
 800109e:	4619      	mov	r1, r3
 80010a0:	481e      	ldr	r0, [pc, #120]	; (800111c <MX_GPIO_Init+0x1e4>)
 80010a2:	f000 fd4b 	bl	8001b3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = C3_Pin;
 80010a6:	2380      	movs	r3, #128	; 0x80
 80010a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80010aa:	4b1f      	ldr	r3, [pc, #124]	; (8001128 <MX_GPIO_Init+0x1f0>)
 80010ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010ae:	2301      	movs	r3, #1
 80010b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(C3_GPIO_Port, &GPIO_InitStruct);
 80010b2:	f107 0314 	add.w	r3, r7, #20
 80010b6:	4619      	mov	r1, r3
 80010b8:	4816      	ldr	r0, [pc, #88]	; (8001114 <MX_GPIO_Init+0x1dc>)
 80010ba:	f000 fd3f 	bl	8001b3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = C2_Pin;
 80010be:	2340      	movs	r3, #64	; 0x40
 80010c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80010c2:	4b19      	ldr	r3, [pc, #100]	; (8001128 <MX_GPIO_Init+0x1f0>)
 80010c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010c6:	2301      	movs	r3, #1
 80010c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(C2_GPIO_Port, &GPIO_InitStruct);
 80010ca:	f107 0314 	add.w	r3, r7, #20
 80010ce:	4619      	mov	r1, r3
 80010d0:	4812      	ldr	r0, [pc, #72]	; (800111c <MX_GPIO_Init+0x1e4>)
 80010d2:	f000 fd33 	bl	8001b3c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 6, 1);
 80010d6:	2201      	movs	r2, #1
 80010d8:	2106      	movs	r1, #6
 80010da:	2009      	movs	r0, #9
 80010dc:	f000 fce9 	bl	8001ab2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80010e0:	2009      	movs	r0, #9
 80010e2:	f000 fd02 	bl	8001aea <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 6, 1);
 80010e6:	2201      	movs	r2, #1
 80010e8:	2106      	movs	r1, #6
 80010ea:	2017      	movs	r0, #23
 80010ec:	f000 fce1 	bl	8001ab2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80010f0:	2017      	movs	r0, #23
 80010f2:	f000 fcfa 	bl	8001aea <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 6, 1);
 80010f6:	2201      	movs	r2, #1
 80010f8:	2106      	movs	r1, #6
 80010fa:	2028      	movs	r0, #40	; 0x28
 80010fc:	f000 fcd9 	bl	8001ab2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001100:	2028      	movs	r0, #40	; 0x28
 8001102:	f000 fcf2 	bl	8001aea <HAL_NVIC_EnableIRQ>

}
 8001106:	bf00      	nop
 8001108:	3728      	adds	r7, #40	; 0x28
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	40023800 	.word	0x40023800
 8001114:	40020800 	.word	0x40020800
 8001118:	40020000 	.word	0x40020000
 800111c:	40020400 	.word	0x40020400
 8001120:	10210000 	.word	0x10210000
 8001124:	10110000 	.word	0x10110000
 8001128:	10310000 	.word	0x10310000

0800112c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001130:	f000 fb2e 	bl	8001790 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001134:	f000 f83a 	bl	80011ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001138:	f7ff fefe 	bl	8000f38 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800113c:	f000 fa8c 	bl	8001658 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8001140:	f000 f9be 	bl	80014c0 <MX_TIM2_Init>

  /* USER CODE BEGIN 2
   * Inizializzazione dei dispositivi Display, Tastiera, Allarme
   * e disabilitazione interruzioni sensore di movimento PIR */

  init_LCD();
 8001144:	f7ff fb6e 	bl	8000824 <init_LCD>

  StartKeyb4x4();
 8001148:	f7ff fda2 	bl	8000c90 <StartKeyb4x4>
  InitAlarm();
 800114c:	f7ff f9d4 	bl	80004f8 <InitAlarm>
    /* USER CODE END WHILE */

	  /* USER CODE BEGIN 3
	   * Nel loop infinito aggiorniamo i led e mostriamo sul display
	   * una simil interfaccia per comunicare con la scheda */
	  	LedAlarm();
 8001150:	f7ff fb18 	bl	8000784 <LedAlarm>
		if(TastoPremuto)
 8001154:	4b10      	ldr	r3, [pc, #64]	; (8001198 <main+0x6c>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d0f9      	beq.n	8001150 <main+0x24>
			{
			PulisciSchermo();
 800115c:	f7ff fcc0 	bl	8000ae0 <PulisciSchermo>
			StampaStringaSuLCD(0, 0, "Password:");
 8001160:	4a0e      	ldr	r2, [pc, #56]	; (800119c <main+0x70>)
 8001162:	2100      	movs	r1, #0
 8001164:	2000      	movs	r0, #0
 8001166:	f7ff fd02 	bl	8000b6e <StampaStringaSuLCD>
			StampaStringaSuLCD(10, 0, password);
 800116a:	4a0d      	ldr	r2, [pc, #52]	; (80011a0 <main+0x74>)
 800116c:	2100      	movs	r1, #0
 800116e:	200a      	movs	r0, #10
 8001170:	f7ff fcfd 	bl	8000b6e <StampaStringaSuLCD>
			StampaStringaSuLCD(0,1,"Tentativi:");
 8001174:	4a0b      	ldr	r2, [pc, #44]	; (80011a4 <main+0x78>)
 8001176:	2101      	movs	r1, #1
 8001178:	2000      	movs	r0, #0
 800117a:	f7ff fcf8 	bl	8000b6e <StampaStringaSuLCD>
			StampaInteroSuLCD(10, 1, tentativi);
 800117e:	4b0a      	ldr	r3, [pc, #40]	; (80011a8 <main+0x7c>)
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	b29b      	uxth	r3, r3
 8001184:	461a      	mov	r2, r3
 8001186:	2101      	movs	r1, #1
 8001188:	200a      	movs	r0, #10
 800118a:	f7ff fcb0 	bl	8000aee <StampaInteroSuLCD>
			TastoPremuto=0;
 800118e:	4b02      	ldr	r3, [pc, #8]	; (8001198 <main+0x6c>)
 8001190:	2200      	movs	r2, #0
 8001192:	701a      	strb	r2, [r3, #0]
	  	LedAlarm();
 8001194:	e7dc      	b.n	8001150 <main+0x24>
 8001196:	bf00      	nop
 8001198:	2000002f 	.word	0x2000002f
 800119c:	08003bc0 	.word	0x08003bc0
 80011a0:	20000040 	.word	0x20000040
 80011a4:	08003bcc 	.word	0x08003bcc
 80011a8:	20000038 	.word	0x20000038

080011ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b094      	sub	sp, #80	; 0x50
 80011b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011b2:	f107 0320 	add.w	r3, r7, #32
 80011b6:	2230      	movs	r2, #48	; 0x30
 80011b8:	2100      	movs	r1, #0
 80011ba:	4618      	mov	r0, r3
 80011bc:	f002 fc8a 	bl	8003ad4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011c0:	f107 030c 	add.w	r3, r7, #12
 80011c4:	2200      	movs	r2, #0
 80011c6:	601a      	str	r2, [r3, #0]
 80011c8:	605a      	str	r2, [r3, #4]
 80011ca:	609a      	str	r2, [r3, #8]
 80011cc:	60da      	str	r2, [r3, #12]
 80011ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011d0:	2300      	movs	r3, #0
 80011d2:	60bb      	str	r3, [r7, #8]
 80011d4:	4b29      	ldr	r3, [pc, #164]	; (800127c <SystemClock_Config+0xd0>)
 80011d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d8:	4a28      	ldr	r2, [pc, #160]	; (800127c <SystemClock_Config+0xd0>)
 80011da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011de:	6413      	str	r3, [r2, #64]	; 0x40
 80011e0:	4b26      	ldr	r3, [pc, #152]	; (800127c <SystemClock_Config+0xd0>)
 80011e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011e8:	60bb      	str	r3, [r7, #8]
 80011ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80011ec:	2300      	movs	r3, #0
 80011ee:	607b      	str	r3, [r7, #4]
 80011f0:	4b23      	ldr	r3, [pc, #140]	; (8001280 <SystemClock_Config+0xd4>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80011f8:	4a21      	ldr	r2, [pc, #132]	; (8001280 <SystemClock_Config+0xd4>)
 80011fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80011fe:	6013      	str	r3, [r2, #0]
 8001200:	4b1f      	ldr	r3, [pc, #124]	; (8001280 <SystemClock_Config+0xd4>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001208:	607b      	str	r3, [r7, #4]
 800120a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800120c:	2302      	movs	r3, #2
 800120e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001210:	2301      	movs	r3, #1
 8001212:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001214:	2310      	movs	r3, #16
 8001216:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001218:	2302      	movs	r3, #2
 800121a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800121c:	2300      	movs	r3, #0
 800121e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001220:	2310      	movs	r3, #16
 8001222:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001224:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001228:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800122a:	2304      	movs	r3, #4
 800122c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800122e:	2307      	movs	r3, #7
 8001230:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001232:	f107 0320 	add.w	r3, r7, #32
 8001236:	4618      	mov	r0, r3
 8001238:	f000 fe4c 	bl	8001ed4 <HAL_RCC_OscConfig>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001242:	f000 f81f 	bl	8001284 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001246:	230f      	movs	r3, #15
 8001248:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800124a:	2302      	movs	r3, #2
 800124c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800124e:	2300      	movs	r3, #0
 8001250:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001252:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001256:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001258:	2300      	movs	r3, #0
 800125a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800125c:	f107 030c 	add.w	r3, r7, #12
 8001260:	2102      	movs	r1, #2
 8001262:	4618      	mov	r0, r3
 8001264:	f001 f8a6 	bl	80023b4 <HAL_RCC_ClockConfig>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800126e:	f000 f809 	bl	8001284 <Error_Handler>
  }
}
 8001272:	bf00      	nop
 8001274:	3750      	adds	r7, #80	; 0x50
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	40023800 	.word	0x40023800
 8001280:	40007000 	.word	0x40007000

08001284 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001288:	bf00      	nop
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
	...

08001294 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800129a:	2300      	movs	r3, #0
 800129c:	607b      	str	r3, [r7, #4]
 800129e:	4b10      	ldr	r3, [pc, #64]	; (80012e0 <HAL_MspInit+0x4c>)
 80012a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012a2:	4a0f      	ldr	r2, [pc, #60]	; (80012e0 <HAL_MspInit+0x4c>)
 80012a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012a8:	6453      	str	r3, [r2, #68]	; 0x44
 80012aa:	4b0d      	ldr	r3, [pc, #52]	; (80012e0 <HAL_MspInit+0x4c>)
 80012ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012b2:	607b      	str	r3, [r7, #4]
 80012b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012b6:	2300      	movs	r3, #0
 80012b8:	603b      	str	r3, [r7, #0]
 80012ba:	4b09      	ldr	r3, [pc, #36]	; (80012e0 <HAL_MspInit+0x4c>)
 80012bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012be:	4a08      	ldr	r2, [pc, #32]	; (80012e0 <HAL_MspInit+0x4c>)
 80012c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012c4:	6413      	str	r3, [r2, #64]	; 0x40
 80012c6:	4b06      	ldr	r3, [pc, #24]	; (80012e0 <HAL_MspInit+0x4c>)
 80012c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ce:	603b      	str	r3, [r7, #0]
 80012d0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 80012d2:	2004      	movs	r0, #4
 80012d4:	f000 fbe2 	bl	8001a9c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012d8:	bf00      	nop
 80012da:	3708      	adds	r7, #8
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	40023800 	.word	0x40023800

080012e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80012e8:	bf00      	nop
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr

080012f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012f2:	b480      	push	{r7}
 80012f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012f6:	e7fe      	b.n	80012f6 <HardFault_Handler+0x4>

080012f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012fc:	e7fe      	b.n	80012fc <MemManage_Handler+0x4>

080012fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012fe:	b480      	push	{r7}
 8001300:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001302:	e7fe      	b.n	8001302 <BusFault_Handler+0x4>

08001304 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001308:	e7fe      	b.n	8001308 <UsageFault_Handler+0x4>

0800130a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800130a:	b480      	push	{r7}
 800130c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800130e:	bf00      	nop
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr

08001318 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800131c:	bf00      	nop
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr

08001326 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001326:	b480      	push	{r7}
 8001328:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800132a:	bf00      	nop
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr

08001334 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001338:	f000 fa7c 	bl	8001834 <HAL_IncTick>

  /*
   * Utilizziamo il timer della scheda per gestire il ciclo
   * delle righe della tastiera
   */
  GestioneRigheMatriceKeyb4x4();
 800133c:	f7ff fcbe 	bl	8000cbc <GestioneRigheMatriceKeyb4x4>
  /*
   * Utilizziamo il timer della scheda per attuare il lampeggio
   * del led rosso e della sirena di allarme
   */

  if(intrusion){
 8001340:	4b1d      	ldr	r3, [pc, #116]	; (80013b8 <SysTick_Handler+0x84>)
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d024      	beq.n	8001392 <SysTick_Handler+0x5e>
  if(strobeBuffer)   //se è attivo un tempo antirimbalzo
 8001348:	4b1c      	ldr	r3, [pc, #112]	; (80013bc <SysTick_Handler+0x88>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d020      	beq.n	8001392 <SysTick_Handler+0x5e>
  		{
  		strobeBuffer--;
 8001350:	4b1a      	ldr	r3, [pc, #104]	; (80013bc <SysTick_Handler+0x88>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	3b01      	subs	r3, #1
 8001356:	4a19      	ldr	r2, [pc, #100]	; (80013bc <SysTick_Handler+0x88>)
 8001358:	6013      	str	r3, [r2, #0]
  		if(!strobeBuffer)
 800135a:	4b18      	ldr	r3, [pc, #96]	; (80013bc <SysTick_Handler+0x88>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d117      	bne.n	8001392 <SysTick_Handler+0x5e>
  			{
  			if(strobe==0)
 8001362:	4b17      	ldr	r3, [pc, #92]	; (80013c0 <SysTick_Handler+0x8c>)
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d103      	bne.n	8001372 <SysTick_Handler+0x3e>
  				strobe=1;
 800136a:	4b15      	ldr	r3, [pc, #84]	; (80013c0 <SysTick_Handler+0x8c>)
 800136c:	2201      	movs	r2, #1
 800136e:	701a      	strb	r2, [r3, #0]
 8001370:	e006      	b.n	8001380 <SysTick_Handler+0x4c>
  			else if(strobe==1)
 8001372:	4b13      	ldr	r3, [pc, #76]	; (80013c0 <SysTick_Handler+0x8c>)
 8001374:	781b      	ldrb	r3, [r3, #0]
 8001376:	2b01      	cmp	r3, #1
 8001378:	d102      	bne.n	8001380 <SysTick_Handler+0x4c>
  				strobe=0;
 800137a:	4b11      	ldr	r3, [pc, #68]	; (80013c0 <SysTick_Handler+0x8c>)
 800137c:	2200      	movs	r2, #0
 800137e:	701a      	strb	r2, [r3, #0]
  			Sound(strobe);
 8001380:	4b0f      	ldr	r3, [pc, #60]	; (80013c0 <SysTick_Handler+0x8c>)
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	4618      	mov	r0, r3
 8001386:	f7ff f9b7 	bl	80006f8 <Sound>
  			strobeBuffer = TEMPO_STROBE;
 800138a:	4b0c      	ldr	r3, [pc, #48]	; (80013bc <SysTick_Handler+0x88>)
 800138c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001390:	601a      	str	r2, [r3, #0]
  			}
  		}

  }

  if(tempoAR_Button)   //se è attivo un tempo antirimbalzo
 8001392:	4b0c      	ldr	r3, [pc, #48]	; (80013c4 <SysTick_Handler+0x90>)
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d00c      	beq.n	80013b4 <SysTick_Handler+0x80>
    	{
    		tempoAR_Button--;
 800139a:	4b0a      	ldr	r3, [pc, #40]	; (80013c4 <SysTick_Handler+0x90>)
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	3b01      	subs	r3, #1
 80013a0:	b2da      	uxtb	r2, r3
 80013a2:	4b08      	ldr	r3, [pc, #32]	; (80013c4 <SysTick_Handler+0x90>)
 80013a4:	701a      	strb	r2, [r3, #0]
    		if(!tempoAR_Button){
 80013a6:	4b07      	ldr	r3, [pc, #28]	; (80013c4 <SysTick_Handler+0x90>)
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d102      	bne.n	80013b4 <SysTick_Handler+0x80>
    			HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80013ae:	2028      	movs	r0, #40	; 0x28
 80013b0:	f000 fb9b 	bl	8001aea <HAL_NVIC_EnableIRQ>
    		}
    	}

  /* USER CODE END SysTick_IRQn 1 */
}
 80013b4:	bf00      	nop
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	2000002c 	.word	0x2000002c
 80013bc:	20000048 	.word	0x20000048
 80013c0:	20000001 	.word	0x20000001
 80013c4:	20000053 	.word	0x20000053

080013c8 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PIR_Pin);
 80013cc:	2008      	movs	r0, #8
 80013ce:	f000 fd69 	bl	8001ea4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80013d2:	bf00      	nop
 80013d4:	bd80      	pop	{r7, pc}

080013d6 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80013d6:	b580      	push	{r7, lr}
 80013d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(C1_Pin);
 80013da:	2020      	movs	r0, #32
 80013dc:	f000 fd62 	bl	8001ea4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(C2_Pin);
 80013e0:	2040      	movs	r0, #64	; 0x40
 80013e2:	f000 fd5f 	bl	8001ea4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(C3_Pin);
 80013e6:	2080      	movs	r0, #128	; 0x80
 80013e8:	f000 fd5c 	bl	8001ea4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(C4_Pin);
 80013ec:	f44f 7000 	mov.w	r0, #512	; 0x200
 80013f0:	f000 fd58 	bl	8001ea4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80013f4:	bf00      	nop
 80013f6:	bd80      	pop	{r7, pc}

080013f8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80013fc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001400:	f000 fd50 	bl	8001ea4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001404:	bf00      	nop
 8001406:	bd80      	pop	{r7, pc}

08001408 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 1
 * Gestione delle interruzioni*/

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
 800140e:	4603      	mov	r3, r0
 8001410:	80fb      	strh	r3, [r7, #6]
	/* Interruzioni generate dalla tastiera richiamano la funzione di gestione
	 * dei tasti premuti
	 */
	if((GPIO_Pin==C1_Pin)||(GPIO_Pin==C2_Pin)||(GPIO_Pin==C3_Pin)||(GPIO_Pin==C4_Pin))
 8001412:	88fb      	ldrh	r3, [r7, #6]
 8001414:	2b20      	cmp	r3, #32
 8001416:	d009      	beq.n	800142c <HAL_GPIO_EXTI_Callback+0x24>
 8001418:	88fb      	ldrh	r3, [r7, #6]
 800141a:	2b40      	cmp	r3, #64	; 0x40
 800141c:	d006      	beq.n	800142c <HAL_GPIO_EXTI_Callback+0x24>
 800141e:	88fb      	ldrh	r3, [r7, #6]
 8001420:	2b80      	cmp	r3, #128	; 0x80
 8001422:	d003      	beq.n	800142c <HAL_GPIO_EXTI_Callback+0x24>
 8001424:	88fb      	ldrh	r3, [r7, #6]
 8001426:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800142a:	d103      	bne.n	8001434 <HAL_GPIO_EXTI_Callback+0x2c>
		GestioneEXTI_Keyb4x4(GPIO_Pin);
 800142c:	88fb      	ldrh	r3, [r7, #6]
 800142e:	4618      	mov	r0, r3
 8001430:	f7ff fd66 	bl	8000f00 <GestioneEXTI_Keyb4x4>
	/* Interruzione generata dal pulsante di invio (pulsante blu della scheda)
	 * che viene attivata sul fronte di discesa (schema antirimbalzo) e richiama
	 * il controllo della password inserita
	 * Settaggio di 20ms per la gestione dell'antirimbalzo
	 */
	if(GPIO_Pin==B1_Pin){
 8001434:	88fb      	ldrh	r3, [r7, #6]
 8001436:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800143a:	d10f      	bne.n	800145c <HAL_GPIO_EXTI_Callback+0x54>
		if(!HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin))
 800143c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001440:	4811      	ldr	r0, [pc, #68]	; (8001488 <HAL_GPIO_EXTI_Callback+0x80>)
 8001442:	f000 fcfd 	bl	8001e40 <HAL_GPIO_ReadPin>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d101      	bne.n	8001450 <HAL_GPIO_EXTI_Callback+0x48>
			CheckPassword();
 800144c:	f7ff f89c 	bl	8000588 <CheckPassword>
		tempoAR_Button = TEMPO_AR_BUTTON;
 8001450:	4b0e      	ldr	r3, [pc, #56]	; (800148c <HAL_GPIO_EXTI_Callback+0x84>)
 8001452:	2214      	movs	r2, #20
 8001454:	701a      	strb	r2, [r3, #0]
		HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 8001456:	2028      	movs	r0, #40	; 0x28
 8001458:	f000 fb55 	bl	8001b06 <HAL_NVIC_DisableIRQ>
	/* Interruzione generata dal sensore di movimento PIR
	 * che viene attivato sul fronte di discesa e richiama
	 * la funzione di gestione dell'allarme
	 */

	if(GPIO_Pin==PIR_Pin){
 800145c:	88fb      	ldrh	r3, [r7, #6]
 800145e:	2b08      	cmp	r3, #8
 8001460:	d10d      	bne.n	800147e <HAL_GPIO_EXTI_Callback+0x76>
		if(allarme){
 8001462:	4b0b      	ldr	r3, [pc, #44]	; (8001490 <HAL_GPIO_EXTI_Callback+0x88>)
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d009      	beq.n	800147e <HAL_GPIO_EXTI_Callback+0x76>
			while(!HAL_GPIO_ReadPin(PIR_GPIO_Port,PIR_Pin));
 800146a:	bf00      	nop
 800146c:	2108      	movs	r1, #8
 800146e:	4806      	ldr	r0, [pc, #24]	; (8001488 <HAL_GPIO_EXTI_Callback+0x80>)
 8001470:	f000 fce6 	bl	8001e40 <HAL_GPIO_ReadPin>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d0f8      	beq.n	800146c <HAL_GPIO_EXTI_Callback+0x64>
			CheckIntrusion();
 800147a:	f7ff f967 	bl	800074c <CheckIntrusion>
		}
	}

}
 800147e:	bf00      	nop
 8001480:	3708      	adds	r7, #8
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	40020800 	.word	0x40020800
 800148c:	20000053 	.word	0x20000053
 8001490:	20000034 	.word	0x20000034

08001494 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001498:	4b08      	ldr	r3, [pc, #32]	; (80014bc <SystemInit+0x28>)
 800149a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800149e:	4a07      	ldr	r2, [pc, #28]	; (80014bc <SystemInit+0x28>)
 80014a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80014a8:	4b04      	ldr	r3, [pc, #16]	; (80014bc <SystemInit+0x28>)
 80014aa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80014ae:	609a      	str	r2, [r3, #8]
#endif
}
 80014b0:	bf00      	nop
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	e000ed00 	.word	0xe000ed00

080014c0 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b08e      	sub	sp, #56	; 0x38
 80014c4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014ca:	2200      	movs	r2, #0
 80014cc:	601a      	str	r2, [r3, #0]
 80014ce:	605a      	str	r2, [r3, #4]
 80014d0:	609a      	str	r2, [r3, #8]
 80014d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014d4:	f107 0320 	add.w	r3, r7, #32
 80014d8:	2200      	movs	r2, #0
 80014da:	601a      	str	r2, [r3, #0]
 80014dc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014de:	1d3b      	adds	r3, r7, #4
 80014e0:	2200      	movs	r2, #0
 80014e2:	601a      	str	r2, [r3, #0]
 80014e4:	605a      	str	r2, [r3, #4]
 80014e6:	609a      	str	r2, [r3, #8]
 80014e8:	60da      	str	r2, [r3, #12]
 80014ea:	611a      	str	r2, [r3, #16]
 80014ec:	615a      	str	r2, [r3, #20]
 80014ee:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 80014f0:	4b2c      	ldr	r3, [pc, #176]	; (80015a4 <MX_TIM2_Init+0xe4>)
 80014f2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014f6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 42-1;
 80014f8:	4b2a      	ldr	r3, [pc, #168]	; (80015a4 <MX_TIM2_Init+0xe4>)
 80014fa:	2229      	movs	r2, #41	; 0x29
 80014fc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014fe:	4b29      	ldr	r3, [pc, #164]	; (80015a4 <MX_TIM2_Init+0xe4>)
 8001500:	2200      	movs	r2, #0
 8001502:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 200-1;
 8001504:	4b27      	ldr	r3, [pc, #156]	; (80015a4 <MX_TIM2_Init+0xe4>)
 8001506:	22c7      	movs	r2, #199	; 0xc7
 8001508:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800150a:	4b26      	ldr	r3, [pc, #152]	; (80015a4 <MX_TIM2_Init+0xe4>)
 800150c:	2200      	movs	r2, #0
 800150e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001510:	4b24      	ldr	r3, [pc, #144]	; (80015a4 <MX_TIM2_Init+0xe4>)
 8001512:	2200      	movs	r2, #0
 8001514:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001516:	4823      	ldr	r0, [pc, #140]	; (80015a4 <MX_TIM2_Init+0xe4>)
 8001518:	f001 f93e 	bl	8002798 <HAL_TIM_Base_Init>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8001522:	f7ff feaf 	bl	8001284 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001526:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800152a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800152c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001530:	4619      	mov	r1, r3
 8001532:	481c      	ldr	r0, [pc, #112]	; (80015a4 <MX_TIM2_Init+0xe4>)
 8001534:	f001 fad4 	bl	8002ae0 <HAL_TIM_ConfigClockSource>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 800153e:	f7ff fea1 	bl	8001284 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001542:	4818      	ldr	r0, [pc, #96]	; (80015a4 <MX_TIM2_Init+0xe4>)
 8001544:	f001 f953 	bl	80027ee <HAL_TIM_PWM_Init>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 800154e:	f7ff fe99 	bl	8001284 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001552:	2300      	movs	r3, #0
 8001554:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001556:	2300      	movs	r3, #0
 8001558:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800155a:	f107 0320 	add.w	r3, r7, #32
 800155e:	4619      	mov	r1, r3
 8001560:	4810      	ldr	r0, [pc, #64]	; (80015a4 <MX_TIM2_Init+0xe4>)
 8001562:	f001 fe41 	bl	80031e8 <HAL_TIMEx_MasterConfigSynchronization>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d001      	beq.n	8001570 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 800156c:	f7ff fe8a 	bl	8001284 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001570:	2360      	movs	r3, #96	; 0x60
 8001572:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 100;
 8001574:	2364      	movs	r3, #100	; 0x64
 8001576:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001578:	2300      	movs	r3, #0
 800157a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800157c:	2300      	movs	r3, #0
 800157e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001580:	1d3b      	adds	r3, r7, #4
 8001582:	2200      	movs	r2, #0
 8001584:	4619      	mov	r1, r3
 8001586:	4807      	ldr	r0, [pc, #28]	; (80015a4 <MX_TIM2_Init+0xe4>)
 8001588:	f001 f9e4 	bl	8002954 <HAL_TIM_PWM_ConfigChannel>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8001592:	f7ff fe77 	bl	8001284 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 8001596:	4803      	ldr	r0, [pc, #12]	; (80015a4 <MX_TIM2_Init+0xe4>)
 8001598:	f000 f826 	bl	80015e8 <HAL_TIM_MspPostInit>

}
 800159c:	bf00      	nop
 800159e:	3738      	adds	r7, #56	; 0x38
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	20000054 	.word	0x20000054

080015a8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b085      	sub	sp, #20
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015b8:	d10d      	bne.n	80015d6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80015ba:	2300      	movs	r3, #0
 80015bc:	60fb      	str	r3, [r7, #12]
 80015be:	4b09      	ldr	r3, [pc, #36]	; (80015e4 <HAL_TIM_Base_MspInit+0x3c>)
 80015c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c2:	4a08      	ldr	r2, [pc, #32]	; (80015e4 <HAL_TIM_Base_MspInit+0x3c>)
 80015c4:	f043 0301 	orr.w	r3, r3, #1
 80015c8:	6413      	str	r3, [r2, #64]	; 0x40
 80015ca:	4b06      	ldr	r3, [pc, #24]	; (80015e4 <HAL_TIM_Base_MspInit+0x3c>)
 80015cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ce:	f003 0301 	and.w	r3, r3, #1
 80015d2:	60fb      	str	r3, [r7, #12]
 80015d4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80015d6:	bf00      	nop
 80015d8:	3714      	adds	r7, #20
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
 80015e4:	40023800 	.word	0x40023800

080015e8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b088      	sub	sp, #32
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f0:	f107 030c 	add.w	r3, r7, #12
 80015f4:	2200      	movs	r2, #0
 80015f6:	601a      	str	r2, [r3, #0]
 80015f8:	605a      	str	r2, [r3, #4]
 80015fa:	609a      	str	r2, [r3, #8]
 80015fc:	60da      	str	r2, [r3, #12]
 80015fe:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001608:	d11e      	bne.n	8001648 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800160a:	2300      	movs	r3, #0
 800160c:	60bb      	str	r3, [r7, #8]
 800160e:	4b10      	ldr	r3, [pc, #64]	; (8001650 <HAL_TIM_MspPostInit+0x68>)
 8001610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001612:	4a0f      	ldr	r2, [pc, #60]	; (8001650 <HAL_TIM_MspPostInit+0x68>)
 8001614:	f043 0301 	orr.w	r3, r3, #1
 8001618:	6313      	str	r3, [r2, #48]	; 0x30
 800161a:	4b0d      	ldr	r3, [pc, #52]	; (8001650 <HAL_TIM_MspPostInit+0x68>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161e:	f003 0301 	and.w	r3, r3, #1
 8001622:	60bb      	str	r3, [r7, #8]
 8001624:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration    
    PA15     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001626:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800162a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800162c:	2302      	movs	r3, #2
 800162e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001630:	2300      	movs	r3, #0
 8001632:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001634:	2300      	movs	r3, #0
 8001636:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001638:	2301      	movs	r3, #1
 800163a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800163c:	f107 030c 	add.w	r3, r7, #12
 8001640:	4619      	mov	r1, r3
 8001642:	4804      	ldr	r0, [pc, #16]	; (8001654 <HAL_TIM_MspPostInit+0x6c>)
 8001644:	f000 fa7a 	bl	8001b3c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001648:	bf00      	nop
 800164a:	3720      	adds	r7, #32
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	40023800 	.word	0x40023800
 8001654:	40020000 	.word	0x40020000

08001658 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 800165c:	4b11      	ldr	r3, [pc, #68]	; (80016a4 <MX_USART2_UART_Init+0x4c>)
 800165e:	4a12      	ldr	r2, [pc, #72]	; (80016a8 <MX_USART2_UART_Init+0x50>)
 8001660:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001662:	4b10      	ldr	r3, [pc, #64]	; (80016a4 <MX_USART2_UART_Init+0x4c>)
 8001664:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001668:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800166a:	4b0e      	ldr	r3, [pc, #56]	; (80016a4 <MX_USART2_UART_Init+0x4c>)
 800166c:	2200      	movs	r2, #0
 800166e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001670:	4b0c      	ldr	r3, [pc, #48]	; (80016a4 <MX_USART2_UART_Init+0x4c>)
 8001672:	2200      	movs	r2, #0
 8001674:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001676:	4b0b      	ldr	r3, [pc, #44]	; (80016a4 <MX_USART2_UART_Init+0x4c>)
 8001678:	2200      	movs	r2, #0
 800167a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800167c:	4b09      	ldr	r3, [pc, #36]	; (80016a4 <MX_USART2_UART_Init+0x4c>)
 800167e:	220c      	movs	r2, #12
 8001680:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001682:	4b08      	ldr	r3, [pc, #32]	; (80016a4 <MX_USART2_UART_Init+0x4c>)
 8001684:	2200      	movs	r2, #0
 8001686:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001688:	4b06      	ldr	r3, [pc, #24]	; (80016a4 <MX_USART2_UART_Init+0x4c>)
 800168a:	2200      	movs	r2, #0
 800168c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800168e:	4805      	ldr	r0, [pc, #20]	; (80016a4 <MX_USART2_UART_Init+0x4c>)
 8001690:	f001 fe18 	bl	80032c4 <HAL_UART_Init>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d001      	beq.n	800169e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800169a:	f7ff fdf3 	bl	8001284 <Error_Handler>
  }

}
 800169e:	bf00      	nop
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	20000094 	.word	0x20000094
 80016a8:	40004400 	.word	0x40004400

080016ac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b08a      	sub	sp, #40	; 0x28
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b4:	f107 0314 	add.w	r3, r7, #20
 80016b8:	2200      	movs	r2, #0
 80016ba:	601a      	str	r2, [r3, #0]
 80016bc:	605a      	str	r2, [r3, #4]
 80016be:	609a      	str	r2, [r3, #8]
 80016c0:	60da      	str	r2, [r3, #12]
 80016c2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a19      	ldr	r2, [pc, #100]	; (8001730 <HAL_UART_MspInit+0x84>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d12b      	bne.n	8001726 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80016ce:	2300      	movs	r3, #0
 80016d0:	613b      	str	r3, [r7, #16]
 80016d2:	4b18      	ldr	r3, [pc, #96]	; (8001734 <HAL_UART_MspInit+0x88>)
 80016d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d6:	4a17      	ldr	r2, [pc, #92]	; (8001734 <HAL_UART_MspInit+0x88>)
 80016d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016dc:	6413      	str	r3, [r2, #64]	; 0x40
 80016de:	4b15      	ldr	r3, [pc, #84]	; (8001734 <HAL_UART_MspInit+0x88>)
 80016e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016e6:	613b      	str	r3, [r7, #16]
 80016e8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ea:	2300      	movs	r3, #0
 80016ec:	60fb      	str	r3, [r7, #12]
 80016ee:	4b11      	ldr	r3, [pc, #68]	; (8001734 <HAL_UART_MspInit+0x88>)
 80016f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f2:	4a10      	ldr	r2, [pc, #64]	; (8001734 <HAL_UART_MspInit+0x88>)
 80016f4:	f043 0301 	orr.w	r3, r3, #1
 80016f8:	6313      	str	r3, [r2, #48]	; 0x30
 80016fa:	4b0e      	ldr	r3, [pc, #56]	; (8001734 <HAL_UART_MspInit+0x88>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fe:	f003 0301 	and.w	r3, r3, #1
 8001702:	60fb      	str	r3, [r7, #12]
 8001704:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001706:	230c      	movs	r3, #12
 8001708:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800170a:	2302      	movs	r3, #2
 800170c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170e:	2300      	movs	r3, #0
 8001710:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001712:	2300      	movs	r3, #0
 8001714:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001716:	2307      	movs	r3, #7
 8001718:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800171a:	f107 0314 	add.w	r3, r7, #20
 800171e:	4619      	mov	r1, r3
 8001720:	4805      	ldr	r0, [pc, #20]	; (8001738 <HAL_UART_MspInit+0x8c>)
 8001722:	f000 fa0b 	bl	8001b3c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001726:	bf00      	nop
 8001728:	3728      	adds	r7, #40	; 0x28
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	40004400 	.word	0x40004400
 8001734:	40023800 	.word	0x40023800
 8001738:	40020000 	.word	0x40020000

0800173c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800173c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001774 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001740:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001742:	e003      	b.n	800174c <LoopCopyDataInit>

08001744 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001744:	4b0c      	ldr	r3, [pc, #48]	; (8001778 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001746:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001748:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800174a:	3104      	adds	r1, #4

0800174c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800174c:	480b      	ldr	r0, [pc, #44]	; (800177c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800174e:	4b0c      	ldr	r3, [pc, #48]	; (8001780 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001750:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001752:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001754:	d3f6      	bcc.n	8001744 <CopyDataInit>
  ldr  r2, =_sbss
 8001756:	4a0b      	ldr	r2, [pc, #44]	; (8001784 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001758:	e002      	b.n	8001760 <LoopFillZerobss>

0800175a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800175a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800175c:	f842 3b04 	str.w	r3, [r2], #4

08001760 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001760:	4b09      	ldr	r3, [pc, #36]	; (8001788 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001762:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001764:	d3f9      	bcc.n	800175a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001766:	f7ff fe95 	bl	8001494 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800176a:	f002 f975 	bl	8003a58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800176e:	f7ff fcdd 	bl	800112c <main>
  bx  lr    
 8001772:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001774:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8001778:	08003c38 	.word	0x08003c38
  ldr  r0, =_sdata
 800177c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001780:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8001784:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8001788:	200000d8 	.word	0x200000d8

0800178c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800178c:	e7fe      	b.n	800178c <ADC_IRQHandler>
	...

08001790 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001794:	4b0e      	ldr	r3, [pc, #56]	; (80017d0 <HAL_Init+0x40>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a0d      	ldr	r2, [pc, #52]	; (80017d0 <HAL_Init+0x40>)
 800179a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800179e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80017a0:	4b0b      	ldr	r3, [pc, #44]	; (80017d0 <HAL_Init+0x40>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a0a      	ldr	r2, [pc, #40]	; (80017d0 <HAL_Init+0x40>)
 80017a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017ac:	4b08      	ldr	r3, [pc, #32]	; (80017d0 <HAL_Init+0x40>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a07      	ldr	r2, [pc, #28]	; (80017d0 <HAL_Init+0x40>)
 80017b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017b8:	2003      	movs	r0, #3
 80017ba:	f000 f96f 	bl	8001a9c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017be:	2000      	movs	r0, #0
 80017c0:	f000 f808 	bl	80017d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017c4:	f7ff fd66 	bl	8001294 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017c8:	2300      	movs	r3, #0
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	40023c00 	.word	0x40023c00

080017d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017dc:	4b12      	ldr	r3, [pc, #72]	; (8001828 <HAL_InitTick+0x54>)
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	4b12      	ldr	r3, [pc, #72]	; (800182c <HAL_InitTick+0x58>)
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	4619      	mov	r1, r3
 80017e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80017ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80017f2:	4618      	mov	r0, r3
 80017f4:	f000 f995 	bl	8001b22 <HAL_SYSTICK_Config>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d001      	beq.n	8001802 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	e00e      	b.n	8001820 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2b0f      	cmp	r3, #15
 8001806:	d80a      	bhi.n	800181e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001808:	2200      	movs	r2, #0
 800180a:	6879      	ldr	r1, [r7, #4]
 800180c:	f04f 30ff 	mov.w	r0, #4294967295
 8001810:	f000 f94f 	bl	8001ab2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001814:	4a06      	ldr	r2, [pc, #24]	; (8001830 <HAL_InitTick+0x5c>)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800181a:	2300      	movs	r3, #0
 800181c:	e000      	b.n	8001820 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
}
 8001820:	4618      	mov	r0, r3
 8001822:	3708      	adds	r7, #8
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	20000004 	.word	0x20000004
 800182c:	2000000c 	.word	0x2000000c
 8001830:	20000008 	.word	0x20000008

08001834 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001838:	4b06      	ldr	r3, [pc, #24]	; (8001854 <HAL_IncTick+0x20>)
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	461a      	mov	r2, r3
 800183e:	4b06      	ldr	r3, [pc, #24]	; (8001858 <HAL_IncTick+0x24>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4413      	add	r3, r2
 8001844:	4a04      	ldr	r2, [pc, #16]	; (8001858 <HAL_IncTick+0x24>)
 8001846:	6013      	str	r3, [r2, #0]
}
 8001848:	bf00      	nop
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop
 8001854:	2000000c 	.word	0x2000000c
 8001858:	200000d4 	.word	0x200000d4

0800185c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0
  return uwTick;
 8001860:	4b03      	ldr	r3, [pc, #12]	; (8001870 <HAL_GetTick+0x14>)
 8001862:	681b      	ldr	r3, [r3, #0]
}
 8001864:	4618      	mov	r0, r3
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr
 800186e:	bf00      	nop
 8001870:	200000d4 	.word	0x200000d4

08001874 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b084      	sub	sp, #16
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800187c:	f7ff ffee 	bl	800185c <HAL_GetTick>
 8001880:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	f1b3 3fff 	cmp.w	r3, #4294967295
 800188c:	d005      	beq.n	800189a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800188e:	4b09      	ldr	r3, [pc, #36]	; (80018b4 <HAL_Delay+0x40>)
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	461a      	mov	r2, r3
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	4413      	add	r3, r2
 8001898:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800189a:	bf00      	nop
 800189c:	f7ff ffde 	bl	800185c <HAL_GetTick>
 80018a0:	4602      	mov	r2, r0
 80018a2:	68bb      	ldr	r3, [r7, #8]
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	68fa      	ldr	r2, [r7, #12]
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d8f7      	bhi.n	800189c <HAL_Delay+0x28>
  {
  }
}
 80018ac:	bf00      	nop
 80018ae:	3710      	adds	r7, #16
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	2000000c 	.word	0x2000000c

080018b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b085      	sub	sp, #20
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	f003 0307 	and.w	r3, r3, #7
 80018c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018c8:	4b0c      	ldr	r3, [pc, #48]	; (80018fc <__NVIC_SetPriorityGrouping+0x44>)
 80018ca:	68db      	ldr	r3, [r3, #12]
 80018cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018ce:	68ba      	ldr	r2, [r7, #8]
 80018d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018d4:	4013      	ands	r3, r2
 80018d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018ea:	4a04      	ldr	r2, [pc, #16]	; (80018fc <__NVIC_SetPriorityGrouping+0x44>)
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	60d3      	str	r3, [r2, #12]
}
 80018f0:	bf00      	nop
 80018f2:	3714      	adds	r7, #20
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr
 80018fc:	e000ed00 	.word	0xe000ed00

08001900 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001904:	4b04      	ldr	r3, [pc, #16]	; (8001918 <__NVIC_GetPriorityGrouping+0x18>)
 8001906:	68db      	ldr	r3, [r3, #12]
 8001908:	0a1b      	lsrs	r3, r3, #8
 800190a:	f003 0307 	and.w	r3, r3, #7
}
 800190e:	4618      	mov	r0, r3
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr
 8001918:	e000ed00 	.word	0xe000ed00

0800191c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800191c:	b480      	push	{r7}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0
 8001922:	4603      	mov	r3, r0
 8001924:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800192a:	2b00      	cmp	r3, #0
 800192c:	db0b      	blt.n	8001946 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800192e:	79fb      	ldrb	r3, [r7, #7]
 8001930:	f003 021f 	and.w	r2, r3, #31
 8001934:	4907      	ldr	r1, [pc, #28]	; (8001954 <__NVIC_EnableIRQ+0x38>)
 8001936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800193a:	095b      	lsrs	r3, r3, #5
 800193c:	2001      	movs	r0, #1
 800193e:	fa00 f202 	lsl.w	r2, r0, r2
 8001942:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001946:	bf00      	nop
 8001948:	370c      	adds	r7, #12
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr
 8001952:	bf00      	nop
 8001954:	e000e100 	.word	0xe000e100

08001958 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	4603      	mov	r3, r0
 8001960:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001966:	2b00      	cmp	r3, #0
 8001968:	db10      	blt.n	800198c <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800196a:	79fb      	ldrb	r3, [r7, #7]
 800196c:	f003 021f 	and.w	r2, r3, #31
 8001970:	4909      	ldr	r1, [pc, #36]	; (8001998 <__NVIC_DisableIRQ+0x40>)
 8001972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001976:	095b      	lsrs	r3, r3, #5
 8001978:	2001      	movs	r0, #1
 800197a:	fa00 f202 	lsl.w	r2, r0, r2
 800197e:	3320      	adds	r3, #32
 8001980:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001984:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001988:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 800198c:	bf00      	nop
 800198e:	370c      	adds	r7, #12
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr
 8001998:	e000e100 	.word	0xe000e100

0800199c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	4603      	mov	r3, r0
 80019a4:	6039      	str	r1, [r7, #0]
 80019a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	db0a      	blt.n	80019c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	b2da      	uxtb	r2, r3
 80019b4:	490c      	ldr	r1, [pc, #48]	; (80019e8 <__NVIC_SetPriority+0x4c>)
 80019b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ba:	0112      	lsls	r2, r2, #4
 80019bc:	b2d2      	uxtb	r2, r2
 80019be:	440b      	add	r3, r1
 80019c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019c4:	e00a      	b.n	80019dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	b2da      	uxtb	r2, r3
 80019ca:	4908      	ldr	r1, [pc, #32]	; (80019ec <__NVIC_SetPriority+0x50>)
 80019cc:	79fb      	ldrb	r3, [r7, #7]
 80019ce:	f003 030f 	and.w	r3, r3, #15
 80019d2:	3b04      	subs	r3, #4
 80019d4:	0112      	lsls	r2, r2, #4
 80019d6:	b2d2      	uxtb	r2, r2
 80019d8:	440b      	add	r3, r1
 80019da:	761a      	strb	r2, [r3, #24]
}
 80019dc:	bf00      	nop
 80019de:	370c      	adds	r7, #12
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr
 80019e8:	e000e100 	.word	0xe000e100
 80019ec:	e000ed00 	.word	0xe000ed00

080019f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b089      	sub	sp, #36	; 0x24
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	60f8      	str	r0, [r7, #12]
 80019f8:	60b9      	str	r1, [r7, #8]
 80019fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	f003 0307 	and.w	r3, r3, #7
 8001a02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a04:	69fb      	ldr	r3, [r7, #28]
 8001a06:	f1c3 0307 	rsb	r3, r3, #7
 8001a0a:	2b04      	cmp	r3, #4
 8001a0c:	bf28      	it	cs
 8001a0e:	2304      	movcs	r3, #4
 8001a10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	3304      	adds	r3, #4
 8001a16:	2b06      	cmp	r3, #6
 8001a18:	d902      	bls.n	8001a20 <NVIC_EncodePriority+0x30>
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	3b03      	subs	r3, #3
 8001a1e:	e000      	b.n	8001a22 <NVIC_EncodePriority+0x32>
 8001a20:	2300      	movs	r3, #0
 8001a22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a24:	f04f 32ff 	mov.w	r2, #4294967295
 8001a28:	69bb      	ldr	r3, [r7, #24]
 8001a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2e:	43da      	mvns	r2, r3
 8001a30:	68bb      	ldr	r3, [r7, #8]
 8001a32:	401a      	ands	r2, r3
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a38:	f04f 31ff 	mov.w	r1, #4294967295
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a42:	43d9      	mvns	r1, r3
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a48:	4313      	orrs	r3, r2
         );
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3724      	adds	r7, #36	; 0x24
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr
	...

08001a58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b082      	sub	sp, #8
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	3b01      	subs	r3, #1
 8001a64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a68:	d301      	bcc.n	8001a6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e00f      	b.n	8001a8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a6e:	4a0a      	ldr	r2, [pc, #40]	; (8001a98 <SysTick_Config+0x40>)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	3b01      	subs	r3, #1
 8001a74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a76:	210f      	movs	r1, #15
 8001a78:	f04f 30ff 	mov.w	r0, #4294967295
 8001a7c:	f7ff ff8e 	bl	800199c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a80:	4b05      	ldr	r3, [pc, #20]	; (8001a98 <SysTick_Config+0x40>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a86:	4b04      	ldr	r3, [pc, #16]	; (8001a98 <SysTick_Config+0x40>)
 8001a88:	2207      	movs	r2, #7
 8001a8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a8c:	2300      	movs	r3, #0
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3708      	adds	r7, #8
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	e000e010 	.word	0xe000e010

08001a9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001aa4:	6878      	ldr	r0, [r7, #4]
 8001aa6:	f7ff ff07 	bl	80018b8 <__NVIC_SetPriorityGrouping>
}
 8001aaa:	bf00      	nop
 8001aac:	3708      	adds	r7, #8
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}

08001ab2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ab2:	b580      	push	{r7, lr}
 8001ab4:	b086      	sub	sp, #24
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	4603      	mov	r3, r0
 8001aba:	60b9      	str	r1, [r7, #8]
 8001abc:	607a      	str	r2, [r7, #4]
 8001abe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ac4:	f7ff ff1c 	bl	8001900 <__NVIC_GetPriorityGrouping>
 8001ac8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001aca:	687a      	ldr	r2, [r7, #4]
 8001acc:	68b9      	ldr	r1, [r7, #8]
 8001ace:	6978      	ldr	r0, [r7, #20]
 8001ad0:	f7ff ff8e 	bl	80019f0 <NVIC_EncodePriority>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ada:	4611      	mov	r1, r2
 8001adc:	4618      	mov	r0, r3
 8001ade:	f7ff ff5d 	bl	800199c <__NVIC_SetPriority>
}
 8001ae2:	bf00      	nop
 8001ae4:	3718      	adds	r7, #24
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}

08001aea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aea:	b580      	push	{r7, lr}
 8001aec:	b082      	sub	sp, #8
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	4603      	mov	r3, r0
 8001af2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001af4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001af8:	4618      	mov	r0, r3
 8001afa:	f7ff ff0f 	bl	800191c <__NVIC_EnableIRQ>
}
 8001afe:	bf00      	nop
 8001b00:	3708      	adds	r7, #8
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}

08001b06 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001b06:	b580      	push	{r7, lr}
 8001b08:	b082      	sub	sp, #8
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001b10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b14:	4618      	mov	r0, r3
 8001b16:	f7ff ff1f 	bl	8001958 <__NVIC_DisableIRQ>
}
 8001b1a:	bf00      	nop
 8001b1c:	3708      	adds	r7, #8
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}

08001b22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b22:	b580      	push	{r7, lr}
 8001b24:	b082      	sub	sp, #8
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b2a:	6878      	ldr	r0, [r7, #4]
 8001b2c:	f7ff ff94 	bl	8001a58 <SysTick_Config>
 8001b30:	4603      	mov	r3, r0
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3708      	adds	r7, #8
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
	...

08001b3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b089      	sub	sp, #36	; 0x24
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
 8001b44:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b46:	2300      	movs	r3, #0
 8001b48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b52:	2300      	movs	r3, #0
 8001b54:	61fb      	str	r3, [r7, #28]
 8001b56:	e159      	b.n	8001e0c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b58:	2201      	movs	r2, #1
 8001b5a:	69fb      	ldr	r3, [r7, #28]
 8001b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b60:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	697a      	ldr	r2, [r7, #20]
 8001b68:	4013      	ands	r3, r2
 8001b6a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b6c:	693a      	ldr	r2, [r7, #16]
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	429a      	cmp	r2, r3
 8001b72:	f040 8148 	bne.w	8001e06 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	2b01      	cmp	r3, #1
 8001b7c:	d00b      	beq.n	8001b96 <HAL_GPIO_Init+0x5a>
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	2b02      	cmp	r3, #2
 8001b84:	d007      	beq.n	8001b96 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b8a:	2b11      	cmp	r3, #17
 8001b8c:	d003      	beq.n	8001b96 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	2b12      	cmp	r3, #18
 8001b94:	d130      	bne.n	8001bf8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b9c:	69fb      	ldr	r3, [r7, #28]
 8001b9e:	005b      	lsls	r3, r3, #1
 8001ba0:	2203      	movs	r2, #3
 8001ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba6:	43db      	mvns	r3, r3
 8001ba8:	69ba      	ldr	r2, [r7, #24]
 8001baa:	4013      	ands	r3, r2
 8001bac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	68da      	ldr	r2, [r3, #12]
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	005b      	lsls	r3, r3, #1
 8001bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bba:	69ba      	ldr	r2, [r7, #24]
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	69ba      	ldr	r2, [r7, #24]
 8001bc4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bcc:	2201      	movs	r2, #1
 8001bce:	69fb      	ldr	r3, [r7, #28]
 8001bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd4:	43db      	mvns	r3, r3
 8001bd6:	69ba      	ldr	r2, [r7, #24]
 8001bd8:	4013      	ands	r3, r2
 8001bda:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	091b      	lsrs	r3, r3, #4
 8001be2:	f003 0201 	and.w	r2, r3, #1
 8001be6:	69fb      	ldr	r3, [r7, #28]
 8001be8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bec:	69ba      	ldr	r2, [r7, #24]
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	69ba      	ldr	r2, [r7, #24]
 8001bf6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001bfe:	69fb      	ldr	r3, [r7, #28]
 8001c00:	005b      	lsls	r3, r3, #1
 8001c02:	2203      	movs	r2, #3
 8001c04:	fa02 f303 	lsl.w	r3, r2, r3
 8001c08:	43db      	mvns	r3, r3
 8001c0a:	69ba      	ldr	r2, [r7, #24]
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	689a      	ldr	r2, [r3, #8]
 8001c14:	69fb      	ldr	r3, [r7, #28]
 8001c16:	005b      	lsls	r3, r3, #1
 8001c18:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1c:	69ba      	ldr	r2, [r7, #24]
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	69ba      	ldr	r2, [r7, #24]
 8001c26:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	2b02      	cmp	r3, #2
 8001c2e:	d003      	beq.n	8001c38 <HAL_GPIO_Init+0xfc>
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	2b12      	cmp	r3, #18
 8001c36:	d123      	bne.n	8001c80 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c38:	69fb      	ldr	r3, [r7, #28]
 8001c3a:	08da      	lsrs	r2, r3, #3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	3208      	adds	r2, #8
 8001c40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c44:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	f003 0307 	and.w	r3, r3, #7
 8001c4c:	009b      	lsls	r3, r3, #2
 8001c4e:	220f      	movs	r2, #15
 8001c50:	fa02 f303 	lsl.w	r3, r2, r3
 8001c54:	43db      	mvns	r3, r3
 8001c56:	69ba      	ldr	r2, [r7, #24]
 8001c58:	4013      	ands	r3, r2
 8001c5a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	691a      	ldr	r2, [r3, #16]
 8001c60:	69fb      	ldr	r3, [r7, #28]
 8001c62:	f003 0307 	and.w	r3, r3, #7
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6c:	69ba      	ldr	r2, [r7, #24]
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c72:	69fb      	ldr	r3, [r7, #28]
 8001c74:	08da      	lsrs	r2, r3, #3
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	3208      	adds	r2, #8
 8001c7a:	69b9      	ldr	r1, [r7, #24]
 8001c7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c86:	69fb      	ldr	r3, [r7, #28]
 8001c88:	005b      	lsls	r3, r3, #1
 8001c8a:	2203      	movs	r2, #3
 8001c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c90:	43db      	mvns	r3, r3
 8001c92:	69ba      	ldr	r2, [r7, #24]
 8001c94:	4013      	ands	r3, r2
 8001c96:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f003 0203 	and.w	r2, r3, #3
 8001ca0:	69fb      	ldr	r3, [r7, #28]
 8001ca2:	005b      	lsls	r3, r3, #1
 8001ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca8:	69ba      	ldr	r2, [r7, #24]
 8001caa:	4313      	orrs	r3, r2
 8001cac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	69ba      	ldr	r2, [r7, #24]
 8001cb2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	f000 80a2 	beq.w	8001e06 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	60fb      	str	r3, [r7, #12]
 8001cc6:	4b56      	ldr	r3, [pc, #344]	; (8001e20 <HAL_GPIO_Init+0x2e4>)
 8001cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cca:	4a55      	ldr	r2, [pc, #340]	; (8001e20 <HAL_GPIO_Init+0x2e4>)
 8001ccc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cd0:	6453      	str	r3, [r2, #68]	; 0x44
 8001cd2:	4b53      	ldr	r3, [pc, #332]	; (8001e20 <HAL_GPIO_Init+0x2e4>)
 8001cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cda:	60fb      	str	r3, [r7, #12]
 8001cdc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001cde:	4a51      	ldr	r2, [pc, #324]	; (8001e24 <HAL_GPIO_Init+0x2e8>)
 8001ce0:	69fb      	ldr	r3, [r7, #28]
 8001ce2:	089b      	lsrs	r3, r3, #2
 8001ce4:	3302      	adds	r3, #2
 8001ce6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001cec:	69fb      	ldr	r3, [r7, #28]
 8001cee:	f003 0303 	and.w	r3, r3, #3
 8001cf2:	009b      	lsls	r3, r3, #2
 8001cf4:	220f      	movs	r2, #15
 8001cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfa:	43db      	mvns	r3, r3
 8001cfc:	69ba      	ldr	r2, [r7, #24]
 8001cfe:	4013      	ands	r3, r2
 8001d00:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	4a48      	ldr	r2, [pc, #288]	; (8001e28 <HAL_GPIO_Init+0x2ec>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d019      	beq.n	8001d3e <HAL_GPIO_Init+0x202>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	4a47      	ldr	r2, [pc, #284]	; (8001e2c <HAL_GPIO_Init+0x2f0>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d013      	beq.n	8001d3a <HAL_GPIO_Init+0x1fe>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	4a46      	ldr	r2, [pc, #280]	; (8001e30 <HAL_GPIO_Init+0x2f4>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d00d      	beq.n	8001d36 <HAL_GPIO_Init+0x1fa>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	4a45      	ldr	r2, [pc, #276]	; (8001e34 <HAL_GPIO_Init+0x2f8>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d007      	beq.n	8001d32 <HAL_GPIO_Init+0x1f6>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	4a44      	ldr	r2, [pc, #272]	; (8001e38 <HAL_GPIO_Init+0x2fc>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d101      	bne.n	8001d2e <HAL_GPIO_Init+0x1f2>
 8001d2a:	2304      	movs	r3, #4
 8001d2c:	e008      	b.n	8001d40 <HAL_GPIO_Init+0x204>
 8001d2e:	2307      	movs	r3, #7
 8001d30:	e006      	b.n	8001d40 <HAL_GPIO_Init+0x204>
 8001d32:	2303      	movs	r3, #3
 8001d34:	e004      	b.n	8001d40 <HAL_GPIO_Init+0x204>
 8001d36:	2302      	movs	r3, #2
 8001d38:	e002      	b.n	8001d40 <HAL_GPIO_Init+0x204>
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e000      	b.n	8001d40 <HAL_GPIO_Init+0x204>
 8001d3e:	2300      	movs	r3, #0
 8001d40:	69fa      	ldr	r2, [r7, #28]
 8001d42:	f002 0203 	and.w	r2, r2, #3
 8001d46:	0092      	lsls	r2, r2, #2
 8001d48:	4093      	lsls	r3, r2
 8001d4a:	69ba      	ldr	r2, [r7, #24]
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d50:	4934      	ldr	r1, [pc, #208]	; (8001e24 <HAL_GPIO_Init+0x2e8>)
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	089b      	lsrs	r3, r3, #2
 8001d56:	3302      	adds	r3, #2
 8001d58:	69ba      	ldr	r2, [r7, #24]
 8001d5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d5e:	4b37      	ldr	r3, [pc, #220]	; (8001e3c <HAL_GPIO_Init+0x300>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	43db      	mvns	r3, r3
 8001d68:	69ba      	ldr	r2, [r7, #24]
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d003      	beq.n	8001d82 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001d7a:	69ba      	ldr	r2, [r7, #24]
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d82:	4a2e      	ldr	r2, [pc, #184]	; (8001e3c <HAL_GPIO_Init+0x300>)
 8001d84:	69bb      	ldr	r3, [r7, #24]
 8001d86:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001d88:	4b2c      	ldr	r3, [pc, #176]	; (8001e3c <HAL_GPIO_Init+0x300>)
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	43db      	mvns	r3, r3
 8001d92:	69ba      	ldr	r2, [r7, #24]
 8001d94:	4013      	ands	r3, r2
 8001d96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d003      	beq.n	8001dac <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001da4:	69ba      	ldr	r2, [r7, #24]
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	4313      	orrs	r3, r2
 8001daa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001dac:	4a23      	ldr	r2, [pc, #140]	; (8001e3c <HAL_GPIO_Init+0x300>)
 8001dae:	69bb      	ldr	r3, [r7, #24]
 8001db0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001db2:	4b22      	ldr	r3, [pc, #136]	; (8001e3c <HAL_GPIO_Init+0x300>)
 8001db4:	689b      	ldr	r3, [r3, #8]
 8001db6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	43db      	mvns	r3, r3
 8001dbc:	69ba      	ldr	r2, [r7, #24]
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d003      	beq.n	8001dd6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001dce:	69ba      	ldr	r2, [r7, #24]
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001dd6:	4a19      	ldr	r2, [pc, #100]	; (8001e3c <HAL_GPIO_Init+0x300>)
 8001dd8:	69bb      	ldr	r3, [r7, #24]
 8001dda:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ddc:	4b17      	ldr	r3, [pc, #92]	; (8001e3c <HAL_GPIO_Init+0x300>)
 8001dde:	68db      	ldr	r3, [r3, #12]
 8001de0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	43db      	mvns	r3, r3
 8001de6:	69ba      	ldr	r2, [r7, #24]
 8001de8:	4013      	ands	r3, r2
 8001dea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d003      	beq.n	8001e00 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001df8:	69ba      	ldr	r2, [r7, #24]
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e00:	4a0e      	ldr	r2, [pc, #56]	; (8001e3c <HAL_GPIO_Init+0x300>)
 8001e02:	69bb      	ldr	r3, [r7, #24]
 8001e04:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	3301      	adds	r3, #1
 8001e0a:	61fb      	str	r3, [r7, #28]
 8001e0c:	69fb      	ldr	r3, [r7, #28]
 8001e0e:	2b0f      	cmp	r3, #15
 8001e10:	f67f aea2 	bls.w	8001b58 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e14:	bf00      	nop
 8001e16:	3724      	adds	r7, #36	; 0x24
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr
 8001e20:	40023800 	.word	0x40023800
 8001e24:	40013800 	.word	0x40013800
 8001e28:	40020000 	.word	0x40020000
 8001e2c:	40020400 	.word	0x40020400
 8001e30:	40020800 	.word	0x40020800
 8001e34:	40020c00 	.word	0x40020c00
 8001e38:	40021000 	.word	0x40021000
 8001e3c:	40013c00 	.word	0x40013c00

08001e40 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b085      	sub	sp, #20
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
 8001e48:	460b      	mov	r3, r1
 8001e4a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	691a      	ldr	r2, [r3, #16]
 8001e50:	887b      	ldrh	r3, [r7, #2]
 8001e52:	4013      	ands	r3, r2
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d002      	beq.n	8001e5e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	73fb      	strb	r3, [r7, #15]
 8001e5c:	e001      	b.n	8001e62 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e62:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	3714      	adds	r7, #20
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr

08001e70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b083      	sub	sp, #12
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
 8001e78:	460b      	mov	r3, r1
 8001e7a:	807b      	strh	r3, [r7, #2]
 8001e7c:	4613      	mov	r3, r2
 8001e7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e80:	787b      	ldrb	r3, [r7, #1]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d003      	beq.n	8001e8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e86:	887a      	ldrh	r2, [r7, #2]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e8c:	e003      	b.n	8001e96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e8e:	887b      	ldrh	r3, [r7, #2]
 8001e90:	041a      	lsls	r2, r3, #16
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	619a      	str	r2, [r3, #24]
}
 8001e96:	bf00      	nop
 8001e98:	370c      	adds	r7, #12
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr
	...

08001ea4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	4603      	mov	r3, r0
 8001eac:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001eae:	4b08      	ldr	r3, [pc, #32]	; (8001ed0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001eb0:	695a      	ldr	r2, [r3, #20]
 8001eb2:	88fb      	ldrh	r3, [r7, #6]
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d006      	beq.n	8001ec8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001eba:	4a05      	ldr	r2, [pc, #20]	; (8001ed0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ebc:	88fb      	ldrh	r3, [r7, #6]
 8001ebe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001ec0:	88fb      	ldrh	r3, [r7, #6]
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f7ff faa0 	bl	8001408 <HAL_GPIO_EXTI_Callback>
  }
}
 8001ec8:	bf00      	nop
 8001eca:	3708      	adds	r7, #8
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	40013c00 	.word	0x40013c00

08001ed4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b086      	sub	sp, #24
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d101      	bne.n	8001ee6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e25b      	b.n	800239e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 0301 	and.w	r3, r3, #1
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d075      	beq.n	8001fde <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ef2:	4ba3      	ldr	r3, [pc, #652]	; (8002180 <HAL_RCC_OscConfig+0x2ac>)
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	f003 030c 	and.w	r3, r3, #12
 8001efa:	2b04      	cmp	r3, #4
 8001efc:	d00c      	beq.n	8001f18 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001efe:	4ba0      	ldr	r3, [pc, #640]	; (8002180 <HAL_RCC_OscConfig+0x2ac>)
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f06:	2b08      	cmp	r3, #8
 8001f08:	d112      	bne.n	8001f30 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f0a:	4b9d      	ldr	r3, [pc, #628]	; (8002180 <HAL_RCC_OscConfig+0x2ac>)
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f12:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f16:	d10b      	bne.n	8001f30 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f18:	4b99      	ldr	r3, [pc, #612]	; (8002180 <HAL_RCC_OscConfig+0x2ac>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d05b      	beq.n	8001fdc <HAL_RCC_OscConfig+0x108>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d157      	bne.n	8001fdc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	e236      	b.n	800239e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f38:	d106      	bne.n	8001f48 <HAL_RCC_OscConfig+0x74>
 8001f3a:	4b91      	ldr	r3, [pc, #580]	; (8002180 <HAL_RCC_OscConfig+0x2ac>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a90      	ldr	r2, [pc, #576]	; (8002180 <HAL_RCC_OscConfig+0x2ac>)
 8001f40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f44:	6013      	str	r3, [r2, #0]
 8001f46:	e01d      	b.n	8001f84 <HAL_RCC_OscConfig+0xb0>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f50:	d10c      	bne.n	8001f6c <HAL_RCC_OscConfig+0x98>
 8001f52:	4b8b      	ldr	r3, [pc, #556]	; (8002180 <HAL_RCC_OscConfig+0x2ac>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a8a      	ldr	r2, [pc, #552]	; (8002180 <HAL_RCC_OscConfig+0x2ac>)
 8001f58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f5c:	6013      	str	r3, [r2, #0]
 8001f5e:	4b88      	ldr	r3, [pc, #544]	; (8002180 <HAL_RCC_OscConfig+0x2ac>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a87      	ldr	r2, [pc, #540]	; (8002180 <HAL_RCC_OscConfig+0x2ac>)
 8001f64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f68:	6013      	str	r3, [r2, #0]
 8001f6a:	e00b      	b.n	8001f84 <HAL_RCC_OscConfig+0xb0>
 8001f6c:	4b84      	ldr	r3, [pc, #528]	; (8002180 <HAL_RCC_OscConfig+0x2ac>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a83      	ldr	r2, [pc, #524]	; (8002180 <HAL_RCC_OscConfig+0x2ac>)
 8001f72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f76:	6013      	str	r3, [r2, #0]
 8001f78:	4b81      	ldr	r3, [pc, #516]	; (8002180 <HAL_RCC_OscConfig+0x2ac>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a80      	ldr	r2, [pc, #512]	; (8002180 <HAL_RCC_OscConfig+0x2ac>)
 8001f7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d013      	beq.n	8001fb4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f8c:	f7ff fc66 	bl	800185c <HAL_GetTick>
 8001f90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f92:	e008      	b.n	8001fa6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f94:	f7ff fc62 	bl	800185c <HAL_GetTick>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	2b64      	cmp	r3, #100	; 0x64
 8001fa0:	d901      	bls.n	8001fa6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001fa2:	2303      	movs	r3, #3
 8001fa4:	e1fb      	b.n	800239e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fa6:	4b76      	ldr	r3, [pc, #472]	; (8002180 <HAL_RCC_OscConfig+0x2ac>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d0f0      	beq.n	8001f94 <HAL_RCC_OscConfig+0xc0>
 8001fb2:	e014      	b.n	8001fde <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fb4:	f7ff fc52 	bl	800185c <HAL_GetTick>
 8001fb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fba:	e008      	b.n	8001fce <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fbc:	f7ff fc4e 	bl	800185c <HAL_GetTick>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	1ad3      	subs	r3, r2, r3
 8001fc6:	2b64      	cmp	r3, #100	; 0x64
 8001fc8:	d901      	bls.n	8001fce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001fca:	2303      	movs	r3, #3
 8001fcc:	e1e7      	b.n	800239e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fce:	4b6c      	ldr	r3, [pc, #432]	; (8002180 <HAL_RCC_OscConfig+0x2ac>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d1f0      	bne.n	8001fbc <HAL_RCC_OscConfig+0xe8>
 8001fda:	e000      	b.n	8001fde <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fdc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f003 0302 	and.w	r3, r3, #2
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d063      	beq.n	80020b2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001fea:	4b65      	ldr	r3, [pc, #404]	; (8002180 <HAL_RCC_OscConfig+0x2ac>)
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	f003 030c 	and.w	r3, r3, #12
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d00b      	beq.n	800200e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ff6:	4b62      	ldr	r3, [pc, #392]	; (8002180 <HAL_RCC_OscConfig+0x2ac>)
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001ffe:	2b08      	cmp	r3, #8
 8002000:	d11c      	bne.n	800203c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002002:	4b5f      	ldr	r3, [pc, #380]	; (8002180 <HAL_RCC_OscConfig+0x2ac>)
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800200a:	2b00      	cmp	r3, #0
 800200c:	d116      	bne.n	800203c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800200e:	4b5c      	ldr	r3, [pc, #368]	; (8002180 <HAL_RCC_OscConfig+0x2ac>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 0302 	and.w	r3, r3, #2
 8002016:	2b00      	cmp	r3, #0
 8002018:	d005      	beq.n	8002026 <HAL_RCC_OscConfig+0x152>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	68db      	ldr	r3, [r3, #12]
 800201e:	2b01      	cmp	r3, #1
 8002020:	d001      	beq.n	8002026 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	e1bb      	b.n	800239e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002026:	4b56      	ldr	r3, [pc, #344]	; (8002180 <HAL_RCC_OscConfig+0x2ac>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	691b      	ldr	r3, [r3, #16]
 8002032:	00db      	lsls	r3, r3, #3
 8002034:	4952      	ldr	r1, [pc, #328]	; (8002180 <HAL_RCC_OscConfig+0x2ac>)
 8002036:	4313      	orrs	r3, r2
 8002038:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800203a:	e03a      	b.n	80020b2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d020      	beq.n	8002086 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002044:	4b4f      	ldr	r3, [pc, #316]	; (8002184 <HAL_RCC_OscConfig+0x2b0>)
 8002046:	2201      	movs	r2, #1
 8002048:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800204a:	f7ff fc07 	bl	800185c <HAL_GetTick>
 800204e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002050:	e008      	b.n	8002064 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002052:	f7ff fc03 	bl	800185c <HAL_GetTick>
 8002056:	4602      	mov	r2, r0
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	1ad3      	subs	r3, r2, r3
 800205c:	2b02      	cmp	r3, #2
 800205e:	d901      	bls.n	8002064 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002060:	2303      	movs	r3, #3
 8002062:	e19c      	b.n	800239e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002064:	4b46      	ldr	r3, [pc, #280]	; (8002180 <HAL_RCC_OscConfig+0x2ac>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f003 0302 	and.w	r3, r3, #2
 800206c:	2b00      	cmp	r3, #0
 800206e:	d0f0      	beq.n	8002052 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002070:	4b43      	ldr	r3, [pc, #268]	; (8002180 <HAL_RCC_OscConfig+0x2ac>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	691b      	ldr	r3, [r3, #16]
 800207c:	00db      	lsls	r3, r3, #3
 800207e:	4940      	ldr	r1, [pc, #256]	; (8002180 <HAL_RCC_OscConfig+0x2ac>)
 8002080:	4313      	orrs	r3, r2
 8002082:	600b      	str	r3, [r1, #0]
 8002084:	e015      	b.n	80020b2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002086:	4b3f      	ldr	r3, [pc, #252]	; (8002184 <HAL_RCC_OscConfig+0x2b0>)
 8002088:	2200      	movs	r2, #0
 800208a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800208c:	f7ff fbe6 	bl	800185c <HAL_GetTick>
 8002090:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002092:	e008      	b.n	80020a6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002094:	f7ff fbe2 	bl	800185c <HAL_GetTick>
 8002098:	4602      	mov	r2, r0
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	2b02      	cmp	r3, #2
 80020a0:	d901      	bls.n	80020a6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80020a2:	2303      	movs	r3, #3
 80020a4:	e17b      	b.n	800239e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020a6:	4b36      	ldr	r3, [pc, #216]	; (8002180 <HAL_RCC_OscConfig+0x2ac>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 0302 	and.w	r3, r3, #2
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d1f0      	bne.n	8002094 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 0308 	and.w	r3, r3, #8
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d030      	beq.n	8002120 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	695b      	ldr	r3, [r3, #20]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d016      	beq.n	80020f4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020c6:	4b30      	ldr	r3, [pc, #192]	; (8002188 <HAL_RCC_OscConfig+0x2b4>)
 80020c8:	2201      	movs	r2, #1
 80020ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020cc:	f7ff fbc6 	bl	800185c <HAL_GetTick>
 80020d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020d2:	e008      	b.n	80020e6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020d4:	f7ff fbc2 	bl	800185c <HAL_GetTick>
 80020d8:	4602      	mov	r2, r0
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	2b02      	cmp	r3, #2
 80020e0:	d901      	bls.n	80020e6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80020e2:	2303      	movs	r3, #3
 80020e4:	e15b      	b.n	800239e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020e6:	4b26      	ldr	r3, [pc, #152]	; (8002180 <HAL_RCC_OscConfig+0x2ac>)
 80020e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020ea:	f003 0302 	and.w	r3, r3, #2
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d0f0      	beq.n	80020d4 <HAL_RCC_OscConfig+0x200>
 80020f2:	e015      	b.n	8002120 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020f4:	4b24      	ldr	r3, [pc, #144]	; (8002188 <HAL_RCC_OscConfig+0x2b4>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020fa:	f7ff fbaf 	bl	800185c <HAL_GetTick>
 80020fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002100:	e008      	b.n	8002114 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002102:	f7ff fbab 	bl	800185c <HAL_GetTick>
 8002106:	4602      	mov	r2, r0
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	1ad3      	subs	r3, r2, r3
 800210c:	2b02      	cmp	r3, #2
 800210e:	d901      	bls.n	8002114 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002110:	2303      	movs	r3, #3
 8002112:	e144      	b.n	800239e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002114:	4b1a      	ldr	r3, [pc, #104]	; (8002180 <HAL_RCC_OscConfig+0x2ac>)
 8002116:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002118:	f003 0302 	and.w	r3, r3, #2
 800211c:	2b00      	cmp	r3, #0
 800211e:	d1f0      	bne.n	8002102 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 0304 	and.w	r3, r3, #4
 8002128:	2b00      	cmp	r3, #0
 800212a:	f000 80a0 	beq.w	800226e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800212e:	2300      	movs	r3, #0
 8002130:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002132:	4b13      	ldr	r3, [pc, #76]	; (8002180 <HAL_RCC_OscConfig+0x2ac>)
 8002134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002136:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800213a:	2b00      	cmp	r3, #0
 800213c:	d10f      	bne.n	800215e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800213e:	2300      	movs	r3, #0
 8002140:	60bb      	str	r3, [r7, #8]
 8002142:	4b0f      	ldr	r3, [pc, #60]	; (8002180 <HAL_RCC_OscConfig+0x2ac>)
 8002144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002146:	4a0e      	ldr	r2, [pc, #56]	; (8002180 <HAL_RCC_OscConfig+0x2ac>)
 8002148:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800214c:	6413      	str	r3, [r2, #64]	; 0x40
 800214e:	4b0c      	ldr	r3, [pc, #48]	; (8002180 <HAL_RCC_OscConfig+0x2ac>)
 8002150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002152:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002156:	60bb      	str	r3, [r7, #8]
 8002158:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800215a:	2301      	movs	r3, #1
 800215c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800215e:	4b0b      	ldr	r3, [pc, #44]	; (800218c <HAL_RCC_OscConfig+0x2b8>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002166:	2b00      	cmp	r3, #0
 8002168:	d121      	bne.n	80021ae <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800216a:	4b08      	ldr	r3, [pc, #32]	; (800218c <HAL_RCC_OscConfig+0x2b8>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a07      	ldr	r2, [pc, #28]	; (800218c <HAL_RCC_OscConfig+0x2b8>)
 8002170:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002174:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002176:	f7ff fb71 	bl	800185c <HAL_GetTick>
 800217a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800217c:	e011      	b.n	80021a2 <HAL_RCC_OscConfig+0x2ce>
 800217e:	bf00      	nop
 8002180:	40023800 	.word	0x40023800
 8002184:	42470000 	.word	0x42470000
 8002188:	42470e80 	.word	0x42470e80
 800218c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002190:	f7ff fb64 	bl	800185c <HAL_GetTick>
 8002194:	4602      	mov	r2, r0
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	1ad3      	subs	r3, r2, r3
 800219a:	2b02      	cmp	r3, #2
 800219c:	d901      	bls.n	80021a2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800219e:	2303      	movs	r3, #3
 80021a0:	e0fd      	b.n	800239e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021a2:	4b81      	ldr	r3, [pc, #516]	; (80023a8 <HAL_RCC_OscConfig+0x4d4>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d0f0      	beq.n	8002190 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	d106      	bne.n	80021c4 <HAL_RCC_OscConfig+0x2f0>
 80021b6:	4b7d      	ldr	r3, [pc, #500]	; (80023ac <HAL_RCC_OscConfig+0x4d8>)
 80021b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ba:	4a7c      	ldr	r2, [pc, #496]	; (80023ac <HAL_RCC_OscConfig+0x4d8>)
 80021bc:	f043 0301 	orr.w	r3, r3, #1
 80021c0:	6713      	str	r3, [r2, #112]	; 0x70
 80021c2:	e01c      	b.n	80021fe <HAL_RCC_OscConfig+0x32a>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	2b05      	cmp	r3, #5
 80021ca:	d10c      	bne.n	80021e6 <HAL_RCC_OscConfig+0x312>
 80021cc:	4b77      	ldr	r3, [pc, #476]	; (80023ac <HAL_RCC_OscConfig+0x4d8>)
 80021ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021d0:	4a76      	ldr	r2, [pc, #472]	; (80023ac <HAL_RCC_OscConfig+0x4d8>)
 80021d2:	f043 0304 	orr.w	r3, r3, #4
 80021d6:	6713      	str	r3, [r2, #112]	; 0x70
 80021d8:	4b74      	ldr	r3, [pc, #464]	; (80023ac <HAL_RCC_OscConfig+0x4d8>)
 80021da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021dc:	4a73      	ldr	r2, [pc, #460]	; (80023ac <HAL_RCC_OscConfig+0x4d8>)
 80021de:	f043 0301 	orr.w	r3, r3, #1
 80021e2:	6713      	str	r3, [r2, #112]	; 0x70
 80021e4:	e00b      	b.n	80021fe <HAL_RCC_OscConfig+0x32a>
 80021e6:	4b71      	ldr	r3, [pc, #452]	; (80023ac <HAL_RCC_OscConfig+0x4d8>)
 80021e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ea:	4a70      	ldr	r2, [pc, #448]	; (80023ac <HAL_RCC_OscConfig+0x4d8>)
 80021ec:	f023 0301 	bic.w	r3, r3, #1
 80021f0:	6713      	str	r3, [r2, #112]	; 0x70
 80021f2:	4b6e      	ldr	r3, [pc, #440]	; (80023ac <HAL_RCC_OscConfig+0x4d8>)
 80021f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021f6:	4a6d      	ldr	r2, [pc, #436]	; (80023ac <HAL_RCC_OscConfig+0x4d8>)
 80021f8:	f023 0304 	bic.w	r3, r3, #4
 80021fc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d015      	beq.n	8002232 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002206:	f7ff fb29 	bl	800185c <HAL_GetTick>
 800220a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800220c:	e00a      	b.n	8002224 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800220e:	f7ff fb25 	bl	800185c <HAL_GetTick>
 8002212:	4602      	mov	r2, r0
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	1ad3      	subs	r3, r2, r3
 8002218:	f241 3288 	movw	r2, #5000	; 0x1388
 800221c:	4293      	cmp	r3, r2
 800221e:	d901      	bls.n	8002224 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002220:	2303      	movs	r3, #3
 8002222:	e0bc      	b.n	800239e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002224:	4b61      	ldr	r3, [pc, #388]	; (80023ac <HAL_RCC_OscConfig+0x4d8>)
 8002226:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002228:	f003 0302 	and.w	r3, r3, #2
 800222c:	2b00      	cmp	r3, #0
 800222e:	d0ee      	beq.n	800220e <HAL_RCC_OscConfig+0x33a>
 8002230:	e014      	b.n	800225c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002232:	f7ff fb13 	bl	800185c <HAL_GetTick>
 8002236:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002238:	e00a      	b.n	8002250 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800223a:	f7ff fb0f 	bl	800185c <HAL_GetTick>
 800223e:	4602      	mov	r2, r0
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	1ad3      	subs	r3, r2, r3
 8002244:	f241 3288 	movw	r2, #5000	; 0x1388
 8002248:	4293      	cmp	r3, r2
 800224a:	d901      	bls.n	8002250 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800224c:	2303      	movs	r3, #3
 800224e:	e0a6      	b.n	800239e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002250:	4b56      	ldr	r3, [pc, #344]	; (80023ac <HAL_RCC_OscConfig+0x4d8>)
 8002252:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002254:	f003 0302 	and.w	r3, r3, #2
 8002258:	2b00      	cmp	r3, #0
 800225a:	d1ee      	bne.n	800223a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800225c:	7dfb      	ldrb	r3, [r7, #23]
 800225e:	2b01      	cmp	r3, #1
 8002260:	d105      	bne.n	800226e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002262:	4b52      	ldr	r3, [pc, #328]	; (80023ac <HAL_RCC_OscConfig+0x4d8>)
 8002264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002266:	4a51      	ldr	r2, [pc, #324]	; (80023ac <HAL_RCC_OscConfig+0x4d8>)
 8002268:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800226c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	699b      	ldr	r3, [r3, #24]
 8002272:	2b00      	cmp	r3, #0
 8002274:	f000 8092 	beq.w	800239c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002278:	4b4c      	ldr	r3, [pc, #304]	; (80023ac <HAL_RCC_OscConfig+0x4d8>)
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	f003 030c 	and.w	r3, r3, #12
 8002280:	2b08      	cmp	r3, #8
 8002282:	d05c      	beq.n	800233e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	699b      	ldr	r3, [r3, #24]
 8002288:	2b02      	cmp	r3, #2
 800228a:	d141      	bne.n	8002310 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800228c:	4b48      	ldr	r3, [pc, #288]	; (80023b0 <HAL_RCC_OscConfig+0x4dc>)
 800228e:	2200      	movs	r2, #0
 8002290:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002292:	f7ff fae3 	bl	800185c <HAL_GetTick>
 8002296:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002298:	e008      	b.n	80022ac <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800229a:	f7ff fadf 	bl	800185c <HAL_GetTick>
 800229e:	4602      	mov	r2, r0
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	1ad3      	subs	r3, r2, r3
 80022a4:	2b02      	cmp	r3, #2
 80022a6:	d901      	bls.n	80022ac <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80022a8:	2303      	movs	r3, #3
 80022aa:	e078      	b.n	800239e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022ac:	4b3f      	ldr	r3, [pc, #252]	; (80023ac <HAL_RCC_OscConfig+0x4d8>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d1f0      	bne.n	800229a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	69da      	ldr	r2, [r3, #28]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6a1b      	ldr	r3, [r3, #32]
 80022c0:	431a      	orrs	r2, r3
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c6:	019b      	lsls	r3, r3, #6
 80022c8:	431a      	orrs	r2, r3
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ce:	085b      	lsrs	r3, r3, #1
 80022d0:	3b01      	subs	r3, #1
 80022d2:	041b      	lsls	r3, r3, #16
 80022d4:	431a      	orrs	r2, r3
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022da:	061b      	lsls	r3, r3, #24
 80022dc:	4933      	ldr	r1, [pc, #204]	; (80023ac <HAL_RCC_OscConfig+0x4d8>)
 80022de:	4313      	orrs	r3, r2
 80022e0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022e2:	4b33      	ldr	r3, [pc, #204]	; (80023b0 <HAL_RCC_OscConfig+0x4dc>)
 80022e4:	2201      	movs	r2, #1
 80022e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022e8:	f7ff fab8 	bl	800185c <HAL_GetTick>
 80022ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022ee:	e008      	b.n	8002302 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022f0:	f7ff fab4 	bl	800185c <HAL_GetTick>
 80022f4:	4602      	mov	r2, r0
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	2b02      	cmp	r3, #2
 80022fc:	d901      	bls.n	8002302 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80022fe:	2303      	movs	r3, #3
 8002300:	e04d      	b.n	800239e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002302:	4b2a      	ldr	r3, [pc, #168]	; (80023ac <HAL_RCC_OscConfig+0x4d8>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800230a:	2b00      	cmp	r3, #0
 800230c:	d0f0      	beq.n	80022f0 <HAL_RCC_OscConfig+0x41c>
 800230e:	e045      	b.n	800239c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002310:	4b27      	ldr	r3, [pc, #156]	; (80023b0 <HAL_RCC_OscConfig+0x4dc>)
 8002312:	2200      	movs	r2, #0
 8002314:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002316:	f7ff faa1 	bl	800185c <HAL_GetTick>
 800231a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800231c:	e008      	b.n	8002330 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800231e:	f7ff fa9d 	bl	800185c <HAL_GetTick>
 8002322:	4602      	mov	r2, r0
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	1ad3      	subs	r3, r2, r3
 8002328:	2b02      	cmp	r3, #2
 800232a:	d901      	bls.n	8002330 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800232c:	2303      	movs	r3, #3
 800232e:	e036      	b.n	800239e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002330:	4b1e      	ldr	r3, [pc, #120]	; (80023ac <HAL_RCC_OscConfig+0x4d8>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002338:	2b00      	cmp	r3, #0
 800233a:	d1f0      	bne.n	800231e <HAL_RCC_OscConfig+0x44a>
 800233c:	e02e      	b.n	800239c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	699b      	ldr	r3, [r3, #24]
 8002342:	2b01      	cmp	r3, #1
 8002344:	d101      	bne.n	800234a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e029      	b.n	800239e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800234a:	4b18      	ldr	r3, [pc, #96]	; (80023ac <HAL_RCC_OscConfig+0x4d8>)
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	69db      	ldr	r3, [r3, #28]
 800235a:	429a      	cmp	r2, r3
 800235c:	d11c      	bne.n	8002398 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002368:	429a      	cmp	r2, r3
 800236a:	d115      	bne.n	8002398 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800236c:	68fa      	ldr	r2, [r7, #12]
 800236e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002372:	4013      	ands	r3, r2
 8002374:	687a      	ldr	r2, [r7, #4]
 8002376:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002378:	4293      	cmp	r3, r2
 800237a:	d10d      	bne.n	8002398 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002386:	429a      	cmp	r2, r3
 8002388:	d106      	bne.n	8002398 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002394:	429a      	cmp	r2, r3
 8002396:	d001      	beq.n	800239c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	e000      	b.n	800239e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800239c:	2300      	movs	r3, #0
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3718      	adds	r7, #24
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	40007000 	.word	0x40007000
 80023ac:	40023800 	.word	0x40023800
 80023b0:	42470060 	.word	0x42470060

080023b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b084      	sub	sp, #16
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
 80023bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d101      	bne.n	80023c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	e0cc      	b.n	8002562 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023c8:	4b68      	ldr	r3, [pc, #416]	; (800256c <HAL_RCC_ClockConfig+0x1b8>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 030f 	and.w	r3, r3, #15
 80023d0:	683a      	ldr	r2, [r7, #0]
 80023d2:	429a      	cmp	r2, r3
 80023d4:	d90c      	bls.n	80023f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023d6:	4b65      	ldr	r3, [pc, #404]	; (800256c <HAL_RCC_ClockConfig+0x1b8>)
 80023d8:	683a      	ldr	r2, [r7, #0]
 80023da:	b2d2      	uxtb	r2, r2
 80023dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023de:	4b63      	ldr	r3, [pc, #396]	; (800256c <HAL_RCC_ClockConfig+0x1b8>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 030f 	and.w	r3, r3, #15
 80023e6:	683a      	ldr	r2, [r7, #0]
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d001      	beq.n	80023f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	e0b8      	b.n	8002562 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f003 0302 	and.w	r3, r3, #2
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d020      	beq.n	800243e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f003 0304 	and.w	r3, r3, #4
 8002404:	2b00      	cmp	r3, #0
 8002406:	d005      	beq.n	8002414 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002408:	4b59      	ldr	r3, [pc, #356]	; (8002570 <HAL_RCC_ClockConfig+0x1bc>)
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	4a58      	ldr	r2, [pc, #352]	; (8002570 <HAL_RCC_ClockConfig+0x1bc>)
 800240e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002412:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f003 0308 	and.w	r3, r3, #8
 800241c:	2b00      	cmp	r3, #0
 800241e:	d005      	beq.n	800242c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002420:	4b53      	ldr	r3, [pc, #332]	; (8002570 <HAL_RCC_ClockConfig+0x1bc>)
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	4a52      	ldr	r2, [pc, #328]	; (8002570 <HAL_RCC_ClockConfig+0x1bc>)
 8002426:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800242a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800242c:	4b50      	ldr	r3, [pc, #320]	; (8002570 <HAL_RCC_ClockConfig+0x1bc>)
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	494d      	ldr	r1, [pc, #308]	; (8002570 <HAL_RCC_ClockConfig+0x1bc>)
 800243a:	4313      	orrs	r3, r2
 800243c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 0301 	and.w	r3, r3, #1
 8002446:	2b00      	cmp	r3, #0
 8002448:	d044      	beq.n	80024d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	2b01      	cmp	r3, #1
 8002450:	d107      	bne.n	8002462 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002452:	4b47      	ldr	r3, [pc, #284]	; (8002570 <HAL_RCC_ClockConfig+0x1bc>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800245a:	2b00      	cmp	r3, #0
 800245c:	d119      	bne.n	8002492 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	e07f      	b.n	8002562 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	2b02      	cmp	r3, #2
 8002468:	d003      	beq.n	8002472 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800246e:	2b03      	cmp	r3, #3
 8002470:	d107      	bne.n	8002482 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002472:	4b3f      	ldr	r3, [pc, #252]	; (8002570 <HAL_RCC_ClockConfig+0x1bc>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800247a:	2b00      	cmp	r3, #0
 800247c:	d109      	bne.n	8002492 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e06f      	b.n	8002562 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002482:	4b3b      	ldr	r3, [pc, #236]	; (8002570 <HAL_RCC_ClockConfig+0x1bc>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 0302 	and.w	r3, r3, #2
 800248a:	2b00      	cmp	r3, #0
 800248c:	d101      	bne.n	8002492 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e067      	b.n	8002562 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002492:	4b37      	ldr	r3, [pc, #220]	; (8002570 <HAL_RCC_ClockConfig+0x1bc>)
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	f023 0203 	bic.w	r2, r3, #3
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	4934      	ldr	r1, [pc, #208]	; (8002570 <HAL_RCC_ClockConfig+0x1bc>)
 80024a0:	4313      	orrs	r3, r2
 80024a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024a4:	f7ff f9da 	bl	800185c <HAL_GetTick>
 80024a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024aa:	e00a      	b.n	80024c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024ac:	f7ff f9d6 	bl	800185c <HAL_GetTick>
 80024b0:	4602      	mov	r2, r0
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d901      	bls.n	80024c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80024be:	2303      	movs	r3, #3
 80024c0:	e04f      	b.n	8002562 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024c2:	4b2b      	ldr	r3, [pc, #172]	; (8002570 <HAL_RCC_ClockConfig+0x1bc>)
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	f003 020c 	and.w	r2, r3, #12
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d1eb      	bne.n	80024ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024d4:	4b25      	ldr	r3, [pc, #148]	; (800256c <HAL_RCC_ClockConfig+0x1b8>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 030f 	and.w	r3, r3, #15
 80024dc:	683a      	ldr	r2, [r7, #0]
 80024de:	429a      	cmp	r2, r3
 80024e0:	d20c      	bcs.n	80024fc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024e2:	4b22      	ldr	r3, [pc, #136]	; (800256c <HAL_RCC_ClockConfig+0x1b8>)
 80024e4:	683a      	ldr	r2, [r7, #0]
 80024e6:	b2d2      	uxtb	r2, r2
 80024e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024ea:	4b20      	ldr	r3, [pc, #128]	; (800256c <HAL_RCC_ClockConfig+0x1b8>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 030f 	and.w	r3, r3, #15
 80024f2:	683a      	ldr	r2, [r7, #0]
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d001      	beq.n	80024fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	e032      	b.n	8002562 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f003 0304 	and.w	r3, r3, #4
 8002504:	2b00      	cmp	r3, #0
 8002506:	d008      	beq.n	800251a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002508:	4b19      	ldr	r3, [pc, #100]	; (8002570 <HAL_RCC_ClockConfig+0x1bc>)
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	68db      	ldr	r3, [r3, #12]
 8002514:	4916      	ldr	r1, [pc, #88]	; (8002570 <HAL_RCC_ClockConfig+0x1bc>)
 8002516:	4313      	orrs	r3, r2
 8002518:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 0308 	and.w	r3, r3, #8
 8002522:	2b00      	cmp	r3, #0
 8002524:	d009      	beq.n	800253a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002526:	4b12      	ldr	r3, [pc, #72]	; (8002570 <HAL_RCC_ClockConfig+0x1bc>)
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	691b      	ldr	r3, [r3, #16]
 8002532:	00db      	lsls	r3, r3, #3
 8002534:	490e      	ldr	r1, [pc, #56]	; (8002570 <HAL_RCC_ClockConfig+0x1bc>)
 8002536:	4313      	orrs	r3, r2
 8002538:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800253a:	f000 f821 	bl	8002580 <HAL_RCC_GetSysClockFreq>
 800253e:	4601      	mov	r1, r0
 8002540:	4b0b      	ldr	r3, [pc, #44]	; (8002570 <HAL_RCC_ClockConfig+0x1bc>)
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	091b      	lsrs	r3, r3, #4
 8002546:	f003 030f 	and.w	r3, r3, #15
 800254a:	4a0a      	ldr	r2, [pc, #40]	; (8002574 <HAL_RCC_ClockConfig+0x1c0>)
 800254c:	5cd3      	ldrb	r3, [r2, r3]
 800254e:	fa21 f303 	lsr.w	r3, r1, r3
 8002552:	4a09      	ldr	r2, [pc, #36]	; (8002578 <HAL_RCC_ClockConfig+0x1c4>)
 8002554:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002556:	4b09      	ldr	r3, [pc, #36]	; (800257c <HAL_RCC_ClockConfig+0x1c8>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4618      	mov	r0, r3
 800255c:	f7ff f93a 	bl	80017d4 <HAL_InitTick>

  return HAL_OK;
 8002560:	2300      	movs	r3, #0
}
 8002562:	4618      	mov	r0, r3
 8002564:	3710      	adds	r7, #16
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	40023c00 	.word	0x40023c00
 8002570:	40023800 	.word	0x40023800
 8002574:	08003be8 	.word	0x08003be8
 8002578:	20000004 	.word	0x20000004
 800257c:	20000008 	.word	0x20000008

08002580 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002580:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002582:	b085      	sub	sp, #20
 8002584:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002586:	2300      	movs	r3, #0
 8002588:	607b      	str	r3, [r7, #4]
 800258a:	2300      	movs	r3, #0
 800258c:	60fb      	str	r3, [r7, #12]
 800258e:	2300      	movs	r3, #0
 8002590:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002592:	2300      	movs	r3, #0
 8002594:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002596:	4b63      	ldr	r3, [pc, #396]	; (8002724 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	f003 030c 	and.w	r3, r3, #12
 800259e:	2b04      	cmp	r3, #4
 80025a0:	d007      	beq.n	80025b2 <HAL_RCC_GetSysClockFreq+0x32>
 80025a2:	2b08      	cmp	r3, #8
 80025a4:	d008      	beq.n	80025b8 <HAL_RCC_GetSysClockFreq+0x38>
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	f040 80b4 	bne.w	8002714 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80025ac:	4b5e      	ldr	r3, [pc, #376]	; (8002728 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80025ae:	60bb      	str	r3, [r7, #8]
       break;
 80025b0:	e0b3      	b.n	800271a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80025b2:	4b5e      	ldr	r3, [pc, #376]	; (800272c <HAL_RCC_GetSysClockFreq+0x1ac>)
 80025b4:	60bb      	str	r3, [r7, #8]
      break;
 80025b6:	e0b0      	b.n	800271a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80025b8:	4b5a      	ldr	r3, [pc, #360]	; (8002724 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80025c0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80025c2:	4b58      	ldr	r3, [pc, #352]	; (8002724 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d04a      	beq.n	8002664 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025ce:	4b55      	ldr	r3, [pc, #340]	; (8002724 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	099b      	lsrs	r3, r3, #6
 80025d4:	f04f 0400 	mov.w	r4, #0
 80025d8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80025dc:	f04f 0200 	mov.w	r2, #0
 80025e0:	ea03 0501 	and.w	r5, r3, r1
 80025e4:	ea04 0602 	and.w	r6, r4, r2
 80025e8:	4629      	mov	r1, r5
 80025ea:	4632      	mov	r2, r6
 80025ec:	f04f 0300 	mov.w	r3, #0
 80025f0:	f04f 0400 	mov.w	r4, #0
 80025f4:	0154      	lsls	r4, r2, #5
 80025f6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80025fa:	014b      	lsls	r3, r1, #5
 80025fc:	4619      	mov	r1, r3
 80025fe:	4622      	mov	r2, r4
 8002600:	1b49      	subs	r1, r1, r5
 8002602:	eb62 0206 	sbc.w	r2, r2, r6
 8002606:	f04f 0300 	mov.w	r3, #0
 800260a:	f04f 0400 	mov.w	r4, #0
 800260e:	0194      	lsls	r4, r2, #6
 8002610:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002614:	018b      	lsls	r3, r1, #6
 8002616:	1a5b      	subs	r3, r3, r1
 8002618:	eb64 0402 	sbc.w	r4, r4, r2
 800261c:	f04f 0100 	mov.w	r1, #0
 8002620:	f04f 0200 	mov.w	r2, #0
 8002624:	00e2      	lsls	r2, r4, #3
 8002626:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800262a:	00d9      	lsls	r1, r3, #3
 800262c:	460b      	mov	r3, r1
 800262e:	4614      	mov	r4, r2
 8002630:	195b      	adds	r3, r3, r5
 8002632:	eb44 0406 	adc.w	r4, r4, r6
 8002636:	f04f 0100 	mov.w	r1, #0
 800263a:	f04f 0200 	mov.w	r2, #0
 800263e:	0262      	lsls	r2, r4, #9
 8002640:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002644:	0259      	lsls	r1, r3, #9
 8002646:	460b      	mov	r3, r1
 8002648:	4614      	mov	r4, r2
 800264a:	4618      	mov	r0, r3
 800264c:	4621      	mov	r1, r4
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	f04f 0400 	mov.w	r4, #0
 8002654:	461a      	mov	r2, r3
 8002656:	4623      	mov	r3, r4
 8002658:	f7fd fdce 	bl	80001f8 <__aeabi_uldivmod>
 800265c:	4603      	mov	r3, r0
 800265e:	460c      	mov	r4, r1
 8002660:	60fb      	str	r3, [r7, #12]
 8002662:	e049      	b.n	80026f8 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002664:	4b2f      	ldr	r3, [pc, #188]	; (8002724 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	099b      	lsrs	r3, r3, #6
 800266a:	f04f 0400 	mov.w	r4, #0
 800266e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002672:	f04f 0200 	mov.w	r2, #0
 8002676:	ea03 0501 	and.w	r5, r3, r1
 800267a:	ea04 0602 	and.w	r6, r4, r2
 800267e:	4629      	mov	r1, r5
 8002680:	4632      	mov	r2, r6
 8002682:	f04f 0300 	mov.w	r3, #0
 8002686:	f04f 0400 	mov.w	r4, #0
 800268a:	0154      	lsls	r4, r2, #5
 800268c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002690:	014b      	lsls	r3, r1, #5
 8002692:	4619      	mov	r1, r3
 8002694:	4622      	mov	r2, r4
 8002696:	1b49      	subs	r1, r1, r5
 8002698:	eb62 0206 	sbc.w	r2, r2, r6
 800269c:	f04f 0300 	mov.w	r3, #0
 80026a0:	f04f 0400 	mov.w	r4, #0
 80026a4:	0194      	lsls	r4, r2, #6
 80026a6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80026aa:	018b      	lsls	r3, r1, #6
 80026ac:	1a5b      	subs	r3, r3, r1
 80026ae:	eb64 0402 	sbc.w	r4, r4, r2
 80026b2:	f04f 0100 	mov.w	r1, #0
 80026b6:	f04f 0200 	mov.w	r2, #0
 80026ba:	00e2      	lsls	r2, r4, #3
 80026bc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80026c0:	00d9      	lsls	r1, r3, #3
 80026c2:	460b      	mov	r3, r1
 80026c4:	4614      	mov	r4, r2
 80026c6:	195b      	adds	r3, r3, r5
 80026c8:	eb44 0406 	adc.w	r4, r4, r6
 80026cc:	f04f 0100 	mov.w	r1, #0
 80026d0:	f04f 0200 	mov.w	r2, #0
 80026d4:	02a2      	lsls	r2, r4, #10
 80026d6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80026da:	0299      	lsls	r1, r3, #10
 80026dc:	460b      	mov	r3, r1
 80026de:	4614      	mov	r4, r2
 80026e0:	4618      	mov	r0, r3
 80026e2:	4621      	mov	r1, r4
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	f04f 0400 	mov.w	r4, #0
 80026ea:	461a      	mov	r2, r3
 80026ec:	4623      	mov	r3, r4
 80026ee:	f7fd fd83 	bl	80001f8 <__aeabi_uldivmod>
 80026f2:	4603      	mov	r3, r0
 80026f4:	460c      	mov	r4, r1
 80026f6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80026f8:	4b0a      	ldr	r3, [pc, #40]	; (8002724 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	0c1b      	lsrs	r3, r3, #16
 80026fe:	f003 0303 	and.w	r3, r3, #3
 8002702:	3301      	adds	r3, #1
 8002704:	005b      	lsls	r3, r3, #1
 8002706:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002708:	68fa      	ldr	r2, [r7, #12]
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002710:	60bb      	str	r3, [r7, #8]
      break;
 8002712:	e002      	b.n	800271a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002714:	4b04      	ldr	r3, [pc, #16]	; (8002728 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002716:	60bb      	str	r3, [r7, #8]
      break;
 8002718:	bf00      	nop
    }
  }
  return sysclockfreq;
 800271a:	68bb      	ldr	r3, [r7, #8]
}
 800271c:	4618      	mov	r0, r3
 800271e:	3714      	adds	r7, #20
 8002720:	46bd      	mov	sp, r7
 8002722:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002724:	40023800 	.word	0x40023800
 8002728:	00f42400 	.word	0x00f42400
 800272c:	007a1200 	.word	0x007a1200

08002730 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002730:	b480      	push	{r7}
 8002732:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002734:	4b03      	ldr	r3, [pc, #12]	; (8002744 <HAL_RCC_GetHCLKFreq+0x14>)
 8002736:	681b      	ldr	r3, [r3, #0]
}
 8002738:	4618      	mov	r0, r3
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr
 8002742:	bf00      	nop
 8002744:	20000004 	.word	0x20000004

08002748 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800274c:	f7ff fff0 	bl	8002730 <HAL_RCC_GetHCLKFreq>
 8002750:	4601      	mov	r1, r0
 8002752:	4b05      	ldr	r3, [pc, #20]	; (8002768 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	0a9b      	lsrs	r3, r3, #10
 8002758:	f003 0307 	and.w	r3, r3, #7
 800275c:	4a03      	ldr	r2, [pc, #12]	; (800276c <HAL_RCC_GetPCLK1Freq+0x24>)
 800275e:	5cd3      	ldrb	r3, [r2, r3]
 8002760:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002764:	4618      	mov	r0, r3
 8002766:	bd80      	pop	{r7, pc}
 8002768:	40023800 	.word	0x40023800
 800276c:	08003bf8 	.word	0x08003bf8

08002770 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002774:	f7ff ffdc 	bl	8002730 <HAL_RCC_GetHCLKFreq>
 8002778:	4601      	mov	r1, r0
 800277a:	4b05      	ldr	r3, [pc, #20]	; (8002790 <HAL_RCC_GetPCLK2Freq+0x20>)
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	0b5b      	lsrs	r3, r3, #13
 8002780:	f003 0307 	and.w	r3, r3, #7
 8002784:	4a03      	ldr	r2, [pc, #12]	; (8002794 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002786:	5cd3      	ldrb	r3, [r2, r3]
 8002788:	fa21 f303 	lsr.w	r3, r1, r3
}
 800278c:	4618      	mov	r0, r3
 800278e:	bd80      	pop	{r7, pc}
 8002790:	40023800 	.word	0x40023800
 8002794:	08003bf8 	.word	0x08003bf8

08002798 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b082      	sub	sp, #8
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d101      	bne.n	80027aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	e01d      	b.n	80027e6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d106      	bne.n	80027c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2200      	movs	r2, #0
 80027ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	f7fe fef2 	bl	80015a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2202      	movs	r2, #2
 80027c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	3304      	adds	r3, #4
 80027d4:	4619      	mov	r1, r3
 80027d6:	4610      	mov	r0, r2
 80027d8:	f000 fa3a 	bl	8002c50 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2201      	movs	r2, #1
 80027e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80027e4:	2300      	movs	r3, #0
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3708      	adds	r7, #8
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}

080027ee <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80027ee:	b580      	push	{r7, lr}
 80027f0:	b082      	sub	sp, #8
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d101      	bne.n	8002800 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	e01d      	b.n	800283c <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002806:	b2db      	uxtb	r3, r3
 8002808:	2b00      	cmp	r3, #0
 800280a:	d106      	bne.n	800281a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2200      	movs	r2, #0
 8002810:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002814:	6878      	ldr	r0, [r7, #4]
 8002816:	f000 f815 	bl	8002844 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2202      	movs	r2, #2
 800281e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	3304      	adds	r3, #4
 800282a:	4619      	mov	r1, r3
 800282c:	4610      	mov	r0, r2
 800282e:	f000 fa0f 	bl	8002c50 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2201      	movs	r2, #1
 8002836:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800283a:	2300      	movs	r3, #0
}
 800283c:	4618      	mov	r0, r3
 800283e:	3708      	adds	r7, #8
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}

08002844 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002844:	b480      	push	{r7}
 8002846:	b083      	sub	sp, #12
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800284c:	bf00      	nop
 800284e:	370c      	adds	r7, #12
 8002850:	46bd      	mov	sp, r7
 8002852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002856:	4770      	bx	lr

08002858 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b084      	sub	sp, #16
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
 8002860:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	2201      	movs	r2, #1
 8002868:	6839      	ldr	r1, [r7, #0]
 800286a:	4618      	mov	r0, r3
 800286c:	f000 fc96 	bl	800319c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a10      	ldr	r2, [pc, #64]	; (80028b8 <HAL_TIM_PWM_Start+0x60>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d107      	bne.n	800288a <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002888:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	f003 0307 	and.w	r3, r3, #7
 8002894:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	2b06      	cmp	r3, #6
 800289a:	d007      	beq.n	80028ac <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f042 0201 	orr.w	r2, r2, #1
 80028aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80028ac:	2300      	movs	r3, #0
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3710      	adds	r7, #16
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}
 80028b6:	bf00      	nop
 80028b8:	40010000 	.word	0x40010000

080028bc <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b082      	sub	sp, #8
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
 80028c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	2200      	movs	r2, #0
 80028cc:	6839      	ldr	r1, [r7, #0]
 80028ce:	4618      	mov	r0, r3
 80028d0:	f000 fc64 	bl	800319c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a1d      	ldr	r2, [pc, #116]	; (8002950 <HAL_TIM_PWM_Stop+0x94>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d117      	bne.n	800290e <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	6a1a      	ldr	r2, [r3, #32]
 80028e4:	f241 1311 	movw	r3, #4369	; 0x1111
 80028e8:	4013      	ands	r3, r2
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d10f      	bne.n	800290e <HAL_TIM_PWM_Stop+0x52>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	6a1a      	ldr	r2, [r3, #32]
 80028f4:	f240 4344 	movw	r3, #1092	; 0x444
 80028f8:	4013      	ands	r3, r2
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d107      	bne.n	800290e <HAL_TIM_PWM_Stop+0x52>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800290c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	6a1a      	ldr	r2, [r3, #32]
 8002914:	f241 1311 	movw	r3, #4369	; 0x1111
 8002918:	4013      	ands	r3, r2
 800291a:	2b00      	cmp	r3, #0
 800291c:	d10f      	bne.n	800293e <HAL_TIM_PWM_Stop+0x82>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	6a1a      	ldr	r2, [r3, #32]
 8002924:	f240 4344 	movw	r3, #1092	; 0x444
 8002928:	4013      	ands	r3, r2
 800292a:	2b00      	cmp	r3, #0
 800292c:	d107      	bne.n	800293e <HAL_TIM_PWM_Stop+0x82>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f022 0201 	bic.w	r2, r2, #1
 800293c:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2201      	movs	r2, #1
 8002942:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002946:	2300      	movs	r3, #0
}
 8002948:	4618      	mov	r0, r3
 800294a:	3708      	adds	r7, #8
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}
 8002950:	40010000 	.word	0x40010000

08002954 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b084      	sub	sp, #16
 8002958:	af00      	add	r7, sp, #0
 800295a:	60f8      	str	r0, [r7, #12]
 800295c:	60b9      	str	r1, [r7, #8]
 800295e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002966:	2b01      	cmp	r3, #1
 8002968:	d101      	bne.n	800296e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800296a:	2302      	movs	r3, #2
 800296c:	e0b4      	b.n	8002ad8 <HAL_TIM_PWM_ConfigChannel+0x184>
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2201      	movs	r2, #1
 8002972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	2202      	movs	r2, #2
 800297a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2b0c      	cmp	r3, #12
 8002982:	f200 809f 	bhi.w	8002ac4 <HAL_TIM_PWM_ConfigChannel+0x170>
 8002986:	a201      	add	r2, pc, #4	; (adr r2, 800298c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8002988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800298c:	080029c1 	.word	0x080029c1
 8002990:	08002ac5 	.word	0x08002ac5
 8002994:	08002ac5 	.word	0x08002ac5
 8002998:	08002ac5 	.word	0x08002ac5
 800299c:	08002a01 	.word	0x08002a01
 80029a0:	08002ac5 	.word	0x08002ac5
 80029a4:	08002ac5 	.word	0x08002ac5
 80029a8:	08002ac5 	.word	0x08002ac5
 80029ac:	08002a43 	.word	0x08002a43
 80029b0:	08002ac5 	.word	0x08002ac5
 80029b4:	08002ac5 	.word	0x08002ac5
 80029b8:	08002ac5 	.word	0x08002ac5
 80029bc:	08002a83 	.word	0x08002a83
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	68b9      	ldr	r1, [r7, #8]
 80029c6:	4618      	mov	r0, r3
 80029c8:	f000 f9c2 	bl	8002d50 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	699a      	ldr	r2, [r3, #24]
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f042 0208 	orr.w	r2, r2, #8
 80029da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	699a      	ldr	r2, [r3, #24]
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f022 0204 	bic.w	r2, r2, #4
 80029ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	6999      	ldr	r1, [r3, #24]
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	691a      	ldr	r2, [r3, #16]
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	430a      	orrs	r2, r1
 80029fc:	619a      	str	r2, [r3, #24]
      break;
 80029fe:	e062      	b.n	8002ac6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	68b9      	ldr	r1, [r7, #8]
 8002a06:	4618      	mov	r0, r3
 8002a08:	f000 fa08 	bl	8002e1c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	699a      	ldr	r2, [r3, #24]
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	699a      	ldr	r2, [r3, #24]
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	6999      	ldr	r1, [r3, #24]
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	691b      	ldr	r3, [r3, #16]
 8002a36:	021a      	lsls	r2, r3, #8
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	430a      	orrs	r2, r1
 8002a3e:	619a      	str	r2, [r3, #24]
      break;
 8002a40:	e041      	b.n	8002ac6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	68b9      	ldr	r1, [r7, #8]
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f000 fa53 	bl	8002ef4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	69da      	ldr	r2, [r3, #28]
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f042 0208 	orr.w	r2, r2, #8
 8002a5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	69da      	ldr	r2, [r3, #28]
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f022 0204 	bic.w	r2, r2, #4
 8002a6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	69d9      	ldr	r1, [r3, #28]
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	691a      	ldr	r2, [r3, #16]
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	430a      	orrs	r2, r1
 8002a7e:	61da      	str	r2, [r3, #28]
      break;
 8002a80:	e021      	b.n	8002ac6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	68b9      	ldr	r1, [r7, #8]
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f000 fa9d 	bl	8002fc8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	69da      	ldr	r2, [r3, #28]
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	69da      	ldr	r2, [r3, #28]
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002aac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	69d9      	ldr	r1, [r3, #28]
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	691b      	ldr	r3, [r3, #16]
 8002ab8:	021a      	lsls	r2, r3, #8
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	430a      	orrs	r2, r1
 8002ac0:	61da      	str	r2, [r3, #28]
      break;
 8002ac2:	e000      	b.n	8002ac6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8002ac4:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	2201      	movs	r2, #1
 8002aca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ad6:	2300      	movs	r3, #0
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	3710      	adds	r7, #16
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}

08002ae0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b084      	sub	sp, #16
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
 8002ae8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	d101      	bne.n	8002af8 <HAL_TIM_ConfigClockSource+0x18>
 8002af4:	2302      	movs	r3, #2
 8002af6:	e0a6      	b.n	8002c46 <HAL_TIM_ConfigClockSource+0x166>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2201      	movs	r2, #1
 8002afc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2202      	movs	r2, #2
 8002b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002b16:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b1e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	68fa      	ldr	r2, [r7, #12]
 8002b26:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	2b40      	cmp	r3, #64	; 0x40
 8002b2e:	d067      	beq.n	8002c00 <HAL_TIM_ConfigClockSource+0x120>
 8002b30:	2b40      	cmp	r3, #64	; 0x40
 8002b32:	d80b      	bhi.n	8002b4c <HAL_TIM_ConfigClockSource+0x6c>
 8002b34:	2b10      	cmp	r3, #16
 8002b36:	d073      	beq.n	8002c20 <HAL_TIM_ConfigClockSource+0x140>
 8002b38:	2b10      	cmp	r3, #16
 8002b3a:	d802      	bhi.n	8002b42 <HAL_TIM_ConfigClockSource+0x62>
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d06f      	beq.n	8002c20 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002b40:	e078      	b.n	8002c34 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002b42:	2b20      	cmp	r3, #32
 8002b44:	d06c      	beq.n	8002c20 <HAL_TIM_ConfigClockSource+0x140>
 8002b46:	2b30      	cmp	r3, #48	; 0x30
 8002b48:	d06a      	beq.n	8002c20 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002b4a:	e073      	b.n	8002c34 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002b4c:	2b70      	cmp	r3, #112	; 0x70
 8002b4e:	d00d      	beq.n	8002b6c <HAL_TIM_ConfigClockSource+0x8c>
 8002b50:	2b70      	cmp	r3, #112	; 0x70
 8002b52:	d804      	bhi.n	8002b5e <HAL_TIM_ConfigClockSource+0x7e>
 8002b54:	2b50      	cmp	r3, #80	; 0x50
 8002b56:	d033      	beq.n	8002bc0 <HAL_TIM_ConfigClockSource+0xe0>
 8002b58:	2b60      	cmp	r3, #96	; 0x60
 8002b5a:	d041      	beq.n	8002be0 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002b5c:	e06a      	b.n	8002c34 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002b5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b62:	d066      	beq.n	8002c32 <HAL_TIM_ConfigClockSource+0x152>
 8002b64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b68:	d017      	beq.n	8002b9a <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002b6a:	e063      	b.n	8002c34 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6818      	ldr	r0, [r3, #0]
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	6899      	ldr	r1, [r3, #8]
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	685a      	ldr	r2, [r3, #4]
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	68db      	ldr	r3, [r3, #12]
 8002b7c:	f000 faee 	bl	800315c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002b8e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	68fa      	ldr	r2, [r7, #12]
 8002b96:	609a      	str	r2, [r3, #8]
      break;
 8002b98:	e04c      	b.n	8002c34 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6818      	ldr	r0, [r3, #0]
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	6899      	ldr	r1, [r3, #8]
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	685a      	ldr	r2, [r3, #4]
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	68db      	ldr	r3, [r3, #12]
 8002baa:	f000 fad7 	bl	800315c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	689a      	ldr	r2, [r3, #8]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002bbc:	609a      	str	r2, [r3, #8]
      break;
 8002bbe:	e039      	b.n	8002c34 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6818      	ldr	r0, [r3, #0]
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	6859      	ldr	r1, [r3, #4]
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	461a      	mov	r2, r3
 8002bce:	f000 fa4b 	bl	8003068 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	2150      	movs	r1, #80	; 0x50
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f000 faa4 	bl	8003126 <TIM_ITRx_SetConfig>
      break;
 8002bde:	e029      	b.n	8002c34 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6818      	ldr	r0, [r3, #0]
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	6859      	ldr	r1, [r3, #4]
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	68db      	ldr	r3, [r3, #12]
 8002bec:	461a      	mov	r2, r3
 8002bee:	f000 fa6a 	bl	80030c6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	2160      	movs	r1, #96	; 0x60
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f000 fa94 	bl	8003126 <TIM_ITRx_SetConfig>
      break;
 8002bfe:	e019      	b.n	8002c34 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6818      	ldr	r0, [r3, #0]
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	6859      	ldr	r1, [r3, #4]
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	68db      	ldr	r3, [r3, #12]
 8002c0c:	461a      	mov	r2, r3
 8002c0e:	f000 fa2b 	bl	8003068 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	2140      	movs	r1, #64	; 0x40
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f000 fa84 	bl	8003126 <TIM_ITRx_SetConfig>
      break;
 8002c1e:	e009      	b.n	8002c34 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681a      	ldr	r2, [r3, #0]
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4619      	mov	r1, r3
 8002c2a:	4610      	mov	r0, r2
 8002c2c:	f000 fa7b 	bl	8003126 <TIM_ITRx_SetConfig>
      break;
 8002c30:	e000      	b.n	8002c34 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002c32:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2201      	movs	r2, #1
 8002c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c44:	2300      	movs	r3, #0
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	3710      	adds	r7, #16
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}
	...

08002c50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b085      	sub	sp, #20
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
 8002c58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	4a34      	ldr	r2, [pc, #208]	; (8002d34 <TIM_Base_SetConfig+0xe4>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d00f      	beq.n	8002c88 <TIM_Base_SetConfig+0x38>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c6e:	d00b      	beq.n	8002c88 <TIM_Base_SetConfig+0x38>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	4a31      	ldr	r2, [pc, #196]	; (8002d38 <TIM_Base_SetConfig+0xe8>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d007      	beq.n	8002c88 <TIM_Base_SetConfig+0x38>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	4a30      	ldr	r2, [pc, #192]	; (8002d3c <TIM_Base_SetConfig+0xec>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d003      	beq.n	8002c88 <TIM_Base_SetConfig+0x38>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	4a2f      	ldr	r2, [pc, #188]	; (8002d40 <TIM_Base_SetConfig+0xf0>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d108      	bne.n	8002c9a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	68fa      	ldr	r2, [r7, #12]
 8002c96:	4313      	orrs	r3, r2
 8002c98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	4a25      	ldr	r2, [pc, #148]	; (8002d34 <TIM_Base_SetConfig+0xe4>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d01b      	beq.n	8002cda <TIM_Base_SetConfig+0x8a>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ca8:	d017      	beq.n	8002cda <TIM_Base_SetConfig+0x8a>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	4a22      	ldr	r2, [pc, #136]	; (8002d38 <TIM_Base_SetConfig+0xe8>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d013      	beq.n	8002cda <TIM_Base_SetConfig+0x8a>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	4a21      	ldr	r2, [pc, #132]	; (8002d3c <TIM_Base_SetConfig+0xec>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d00f      	beq.n	8002cda <TIM_Base_SetConfig+0x8a>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	4a20      	ldr	r2, [pc, #128]	; (8002d40 <TIM_Base_SetConfig+0xf0>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d00b      	beq.n	8002cda <TIM_Base_SetConfig+0x8a>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	4a1f      	ldr	r2, [pc, #124]	; (8002d44 <TIM_Base_SetConfig+0xf4>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d007      	beq.n	8002cda <TIM_Base_SetConfig+0x8a>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	4a1e      	ldr	r2, [pc, #120]	; (8002d48 <TIM_Base_SetConfig+0xf8>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d003      	beq.n	8002cda <TIM_Base_SetConfig+0x8a>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	4a1d      	ldr	r2, [pc, #116]	; (8002d4c <TIM_Base_SetConfig+0xfc>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d108      	bne.n	8002cec <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ce0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	68db      	ldr	r3, [r3, #12]
 8002ce6:	68fa      	ldr	r2, [r7, #12]
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	695b      	ldr	r3, [r3, #20]
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	68fa      	ldr	r2, [r7, #12]
 8002cfe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	689a      	ldr	r2, [r3, #8]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	4a08      	ldr	r2, [pc, #32]	; (8002d34 <TIM_Base_SetConfig+0xe4>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d103      	bne.n	8002d20 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	691a      	ldr	r2, [r3, #16]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2201      	movs	r2, #1
 8002d24:	615a      	str	r2, [r3, #20]
}
 8002d26:	bf00      	nop
 8002d28:	3714      	adds	r7, #20
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d30:	4770      	bx	lr
 8002d32:	bf00      	nop
 8002d34:	40010000 	.word	0x40010000
 8002d38:	40000400 	.word	0x40000400
 8002d3c:	40000800 	.word	0x40000800
 8002d40:	40000c00 	.word	0x40000c00
 8002d44:	40014000 	.word	0x40014000
 8002d48:	40014400 	.word	0x40014400
 8002d4c:	40014800 	.word	0x40014800

08002d50 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b087      	sub	sp, #28
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
 8002d58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6a1b      	ldr	r3, [r3, #32]
 8002d5e:	f023 0201 	bic.w	r2, r3, #1
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6a1b      	ldr	r3, [r3, #32]
 8002d6a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	699b      	ldr	r3, [r3, #24]
 8002d76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	f023 0303 	bic.w	r3, r3, #3
 8002d86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	68fa      	ldr	r2, [r7, #12]
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	f023 0302 	bic.w	r3, r3, #2
 8002d98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	697a      	ldr	r2, [r7, #20]
 8002da0:	4313      	orrs	r3, r2
 8002da2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	4a1c      	ldr	r2, [pc, #112]	; (8002e18 <TIM_OC1_SetConfig+0xc8>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d10c      	bne.n	8002dc6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	f023 0308 	bic.w	r3, r3, #8
 8002db2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	68db      	ldr	r3, [r3, #12]
 8002db8:	697a      	ldr	r2, [r7, #20]
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	f023 0304 	bic.w	r3, r3, #4
 8002dc4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	4a13      	ldr	r2, [pc, #76]	; (8002e18 <TIM_OC1_SetConfig+0xc8>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d111      	bne.n	8002df2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002dd4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002ddc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	695b      	ldr	r3, [r3, #20]
 8002de2:	693a      	ldr	r2, [r7, #16]
 8002de4:	4313      	orrs	r3, r2
 8002de6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	699b      	ldr	r3, [r3, #24]
 8002dec:	693a      	ldr	r2, [r7, #16]
 8002dee:	4313      	orrs	r3, r2
 8002df0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	693a      	ldr	r2, [r7, #16]
 8002df6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	68fa      	ldr	r2, [r7, #12]
 8002dfc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	685a      	ldr	r2, [r3, #4]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	697a      	ldr	r2, [r7, #20]
 8002e0a:	621a      	str	r2, [r3, #32]
}
 8002e0c:	bf00      	nop
 8002e0e:	371c      	adds	r7, #28
 8002e10:	46bd      	mov	sp, r7
 8002e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e16:	4770      	bx	lr
 8002e18:	40010000 	.word	0x40010000

08002e1c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b087      	sub	sp, #28
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
 8002e24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6a1b      	ldr	r3, [r3, #32]
 8002e2a:	f023 0210 	bic.w	r2, r3, #16
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6a1b      	ldr	r3, [r3, #32]
 8002e36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	699b      	ldr	r3, [r3, #24]
 8002e42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	021b      	lsls	r3, r3, #8
 8002e5a:	68fa      	ldr	r2, [r7, #12]
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	f023 0320 	bic.w	r3, r3, #32
 8002e66:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	011b      	lsls	r3, r3, #4
 8002e6e:	697a      	ldr	r2, [r7, #20]
 8002e70:	4313      	orrs	r3, r2
 8002e72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	4a1e      	ldr	r2, [pc, #120]	; (8002ef0 <TIM_OC2_SetConfig+0xd4>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d10d      	bne.n	8002e98 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	68db      	ldr	r3, [r3, #12]
 8002e88:	011b      	lsls	r3, r3, #4
 8002e8a:	697a      	ldr	r2, [r7, #20]
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e96:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	4a15      	ldr	r2, [pc, #84]	; (8002ef0 <TIM_OC2_SetConfig+0xd4>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d113      	bne.n	8002ec8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002ea6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002eae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	695b      	ldr	r3, [r3, #20]
 8002eb4:	009b      	lsls	r3, r3, #2
 8002eb6:	693a      	ldr	r2, [r7, #16]
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	699b      	ldr	r3, [r3, #24]
 8002ec0:	009b      	lsls	r3, r3, #2
 8002ec2:	693a      	ldr	r2, [r7, #16]
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	693a      	ldr	r2, [r7, #16]
 8002ecc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	68fa      	ldr	r2, [r7, #12]
 8002ed2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	685a      	ldr	r2, [r3, #4]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	697a      	ldr	r2, [r7, #20]
 8002ee0:	621a      	str	r2, [r3, #32]
}
 8002ee2:	bf00      	nop
 8002ee4:	371c      	adds	r7, #28
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eec:	4770      	bx	lr
 8002eee:	bf00      	nop
 8002ef0:	40010000 	.word	0x40010000

08002ef4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b087      	sub	sp, #28
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
 8002efc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6a1b      	ldr	r3, [r3, #32]
 8002f02:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6a1b      	ldr	r3, [r3, #32]
 8002f0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	69db      	ldr	r3, [r3, #28]
 8002f1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	f023 0303 	bic.w	r3, r3, #3
 8002f2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	68fa      	ldr	r2, [r7, #12]
 8002f32:	4313      	orrs	r3, r2
 8002f34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002f3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	021b      	lsls	r3, r3, #8
 8002f44:	697a      	ldr	r2, [r7, #20]
 8002f46:	4313      	orrs	r3, r2
 8002f48:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	4a1d      	ldr	r2, [pc, #116]	; (8002fc4 <TIM_OC3_SetConfig+0xd0>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d10d      	bne.n	8002f6e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002f58:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	68db      	ldr	r3, [r3, #12]
 8002f5e:	021b      	lsls	r3, r3, #8
 8002f60:	697a      	ldr	r2, [r7, #20]
 8002f62:	4313      	orrs	r3, r2
 8002f64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002f6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	4a14      	ldr	r2, [pc, #80]	; (8002fc4 <TIM_OC3_SetConfig+0xd0>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d113      	bne.n	8002f9e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002f7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002f84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	695b      	ldr	r3, [r3, #20]
 8002f8a:	011b      	lsls	r3, r3, #4
 8002f8c:	693a      	ldr	r2, [r7, #16]
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	699b      	ldr	r3, [r3, #24]
 8002f96:	011b      	lsls	r3, r3, #4
 8002f98:	693a      	ldr	r2, [r7, #16]
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	693a      	ldr	r2, [r7, #16]
 8002fa2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	68fa      	ldr	r2, [r7, #12]
 8002fa8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	685a      	ldr	r2, [r3, #4]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	697a      	ldr	r2, [r7, #20]
 8002fb6:	621a      	str	r2, [r3, #32]
}
 8002fb8:	bf00      	nop
 8002fba:	371c      	adds	r7, #28
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc2:	4770      	bx	lr
 8002fc4:	40010000 	.word	0x40010000

08002fc8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b087      	sub	sp, #28
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
 8002fd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6a1b      	ldr	r3, [r3, #32]
 8002fd6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6a1b      	ldr	r3, [r3, #32]
 8002fe2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	69db      	ldr	r3, [r3, #28]
 8002fee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ff6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ffe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	021b      	lsls	r3, r3, #8
 8003006:	68fa      	ldr	r2, [r7, #12]
 8003008:	4313      	orrs	r3, r2
 800300a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003012:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	031b      	lsls	r3, r3, #12
 800301a:	693a      	ldr	r2, [r7, #16]
 800301c:	4313      	orrs	r3, r2
 800301e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	4a10      	ldr	r2, [pc, #64]	; (8003064 <TIM_OC4_SetConfig+0x9c>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d109      	bne.n	800303c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800302e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	695b      	ldr	r3, [r3, #20]
 8003034:	019b      	lsls	r3, r3, #6
 8003036:	697a      	ldr	r2, [r7, #20]
 8003038:	4313      	orrs	r3, r2
 800303a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	697a      	ldr	r2, [r7, #20]
 8003040:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	68fa      	ldr	r2, [r7, #12]
 8003046:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	685a      	ldr	r2, [r3, #4]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	693a      	ldr	r2, [r7, #16]
 8003054:	621a      	str	r2, [r3, #32]
}
 8003056:	bf00      	nop
 8003058:	371c      	adds	r7, #28
 800305a:	46bd      	mov	sp, r7
 800305c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003060:	4770      	bx	lr
 8003062:	bf00      	nop
 8003064:	40010000 	.word	0x40010000

08003068 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003068:	b480      	push	{r7}
 800306a:	b087      	sub	sp, #28
 800306c:	af00      	add	r7, sp, #0
 800306e:	60f8      	str	r0, [r7, #12]
 8003070:	60b9      	str	r1, [r7, #8]
 8003072:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	6a1b      	ldr	r3, [r3, #32]
 8003078:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	6a1b      	ldr	r3, [r3, #32]
 800307e:	f023 0201 	bic.w	r2, r3, #1
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	699b      	ldr	r3, [r3, #24]
 800308a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003092:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	011b      	lsls	r3, r3, #4
 8003098:	693a      	ldr	r2, [r7, #16]
 800309a:	4313      	orrs	r3, r2
 800309c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	f023 030a 	bic.w	r3, r3, #10
 80030a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80030a6:	697a      	ldr	r2, [r7, #20]
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	4313      	orrs	r3, r2
 80030ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	693a      	ldr	r2, [r7, #16]
 80030b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	697a      	ldr	r2, [r7, #20]
 80030b8:	621a      	str	r2, [r3, #32]
}
 80030ba:	bf00      	nop
 80030bc:	371c      	adds	r7, #28
 80030be:	46bd      	mov	sp, r7
 80030c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c4:	4770      	bx	lr

080030c6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80030c6:	b480      	push	{r7}
 80030c8:	b087      	sub	sp, #28
 80030ca:	af00      	add	r7, sp, #0
 80030cc:	60f8      	str	r0, [r7, #12]
 80030ce:	60b9      	str	r1, [r7, #8]
 80030d0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	6a1b      	ldr	r3, [r3, #32]
 80030d6:	f023 0210 	bic.w	r2, r3, #16
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	699b      	ldr	r3, [r3, #24]
 80030e2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	6a1b      	ldr	r3, [r3, #32]
 80030e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80030f0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	031b      	lsls	r3, r3, #12
 80030f6:	697a      	ldr	r2, [r7, #20]
 80030f8:	4313      	orrs	r3, r2
 80030fa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003102:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	011b      	lsls	r3, r3, #4
 8003108:	693a      	ldr	r2, [r7, #16]
 800310a:	4313      	orrs	r3, r2
 800310c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	697a      	ldr	r2, [r7, #20]
 8003112:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	693a      	ldr	r2, [r7, #16]
 8003118:	621a      	str	r2, [r3, #32]
}
 800311a:	bf00      	nop
 800311c:	371c      	adds	r7, #28
 800311e:	46bd      	mov	sp, r7
 8003120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003124:	4770      	bx	lr

08003126 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003126:	b480      	push	{r7}
 8003128:	b085      	sub	sp, #20
 800312a:	af00      	add	r7, sp, #0
 800312c:	6078      	str	r0, [r7, #4]
 800312e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800313c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800313e:	683a      	ldr	r2, [r7, #0]
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	4313      	orrs	r3, r2
 8003144:	f043 0307 	orr.w	r3, r3, #7
 8003148:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	68fa      	ldr	r2, [r7, #12]
 800314e:	609a      	str	r2, [r3, #8]
}
 8003150:	bf00      	nop
 8003152:	3714      	adds	r7, #20
 8003154:	46bd      	mov	sp, r7
 8003156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315a:	4770      	bx	lr

0800315c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800315c:	b480      	push	{r7}
 800315e:	b087      	sub	sp, #28
 8003160:	af00      	add	r7, sp, #0
 8003162:	60f8      	str	r0, [r7, #12]
 8003164:	60b9      	str	r1, [r7, #8]
 8003166:	607a      	str	r2, [r7, #4]
 8003168:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003176:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	021a      	lsls	r2, r3, #8
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	431a      	orrs	r2, r3
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	4313      	orrs	r3, r2
 8003184:	697a      	ldr	r2, [r7, #20]
 8003186:	4313      	orrs	r3, r2
 8003188:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	697a      	ldr	r2, [r7, #20]
 800318e:	609a      	str	r2, [r3, #8]
}
 8003190:	bf00      	nop
 8003192:	371c      	adds	r7, #28
 8003194:	46bd      	mov	sp, r7
 8003196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319a:	4770      	bx	lr

0800319c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800319c:	b480      	push	{r7}
 800319e:	b087      	sub	sp, #28
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	60f8      	str	r0, [r7, #12]
 80031a4:	60b9      	str	r1, [r7, #8]
 80031a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	f003 031f 	and.w	r3, r3, #31
 80031ae:	2201      	movs	r2, #1
 80031b0:	fa02 f303 	lsl.w	r3, r2, r3
 80031b4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	6a1a      	ldr	r2, [r3, #32]
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	43db      	mvns	r3, r3
 80031be:	401a      	ands	r2, r3
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	6a1a      	ldr	r2, [r3, #32]
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	f003 031f 	and.w	r3, r3, #31
 80031ce:	6879      	ldr	r1, [r7, #4]
 80031d0:	fa01 f303 	lsl.w	r3, r1, r3
 80031d4:	431a      	orrs	r2, r3
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	621a      	str	r2, [r3, #32]
}
 80031da:	bf00      	nop
 80031dc:	371c      	adds	r7, #28
 80031de:	46bd      	mov	sp, r7
 80031e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e4:	4770      	bx	lr
	...

080031e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b085      	sub	sp, #20
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
 80031f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	d101      	bne.n	8003200 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80031fc:	2302      	movs	r3, #2
 80031fe:	e050      	b.n	80032a2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2201      	movs	r2, #1
 8003204:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2202      	movs	r2, #2
 800320c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003226:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	68fa      	ldr	r2, [r7, #12]
 800322e:	4313      	orrs	r3, r2
 8003230:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	68fa      	ldr	r2, [r7, #12]
 8003238:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a1c      	ldr	r2, [pc, #112]	; (80032b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d018      	beq.n	8003276 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800324c:	d013      	beq.n	8003276 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a18      	ldr	r2, [pc, #96]	; (80032b4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d00e      	beq.n	8003276 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a16      	ldr	r2, [pc, #88]	; (80032b8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d009      	beq.n	8003276 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a15      	ldr	r2, [pc, #84]	; (80032bc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d004      	beq.n	8003276 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a13      	ldr	r2, [pc, #76]	; (80032c0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d10c      	bne.n	8003290 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800327c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	68ba      	ldr	r2, [r7, #8]
 8003284:	4313      	orrs	r3, r2
 8003286:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	68ba      	ldr	r2, [r7, #8]
 800328e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2201      	movs	r2, #1
 8003294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2200      	movs	r2, #0
 800329c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80032a0:	2300      	movs	r3, #0
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3714      	adds	r7, #20
 80032a6:	46bd      	mov	sp, r7
 80032a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ac:	4770      	bx	lr
 80032ae:	bf00      	nop
 80032b0:	40010000 	.word	0x40010000
 80032b4:	40000400 	.word	0x40000400
 80032b8:	40000800 	.word	0x40000800
 80032bc:	40000c00 	.word	0x40000c00
 80032c0:	40014000 	.word	0x40014000

080032c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b082      	sub	sp, #8
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d101      	bne.n	80032d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	e03f      	b.n	8003356 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80032dc:	b2db      	uxtb	r3, r3
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d106      	bne.n	80032f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2200      	movs	r2, #0
 80032e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	f7fe f9de 	bl	80016ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2224      	movs	r2, #36	; 0x24
 80032f4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	68da      	ldr	r2, [r3, #12]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003306:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003308:	6878      	ldr	r0, [r7, #4]
 800330a:	f000 f829 	bl	8003360 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	691a      	ldr	r2, [r3, #16]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800331c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	695a      	ldr	r2, [r3, #20]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800332c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	68da      	ldr	r2, [r3, #12]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800333c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2200      	movs	r2, #0
 8003342:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2220      	movs	r2, #32
 8003348:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2220      	movs	r2, #32
 8003350:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003354:	2300      	movs	r3, #0
}
 8003356:	4618      	mov	r0, r3
 8003358:	3708      	adds	r7, #8
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}
	...

08003360 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003364:	b085      	sub	sp, #20
 8003366:	af00      	add	r7, sp, #0
 8003368:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	691b      	ldr	r3, [r3, #16]
 8003370:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	68da      	ldr	r2, [r3, #12]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	430a      	orrs	r2, r1
 800337e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	689a      	ldr	r2, [r3, #8]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	691b      	ldr	r3, [r3, #16]
 8003388:	431a      	orrs	r2, r3
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	695b      	ldr	r3, [r3, #20]
 800338e:	431a      	orrs	r2, r3
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	69db      	ldr	r3, [r3, #28]
 8003394:	4313      	orrs	r3, r2
 8003396:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	68db      	ldr	r3, [r3, #12]
 800339e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80033a2:	f023 030c 	bic.w	r3, r3, #12
 80033a6:	687a      	ldr	r2, [r7, #4]
 80033a8:	6812      	ldr	r2, [r2, #0]
 80033aa:	68f9      	ldr	r1, [r7, #12]
 80033ac:	430b      	orrs	r3, r1
 80033ae:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	695b      	ldr	r3, [r3, #20]
 80033b6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	699a      	ldr	r2, [r3, #24]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	430a      	orrs	r2, r1
 80033c4:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	69db      	ldr	r3, [r3, #28]
 80033ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033ce:	f040 818b 	bne.w	80036e8 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4ac1      	ldr	r2, [pc, #772]	; (80036dc <UART_SetConfig+0x37c>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d005      	beq.n	80033e8 <UART_SetConfig+0x88>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4abf      	ldr	r2, [pc, #764]	; (80036e0 <UART_SetConfig+0x380>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	f040 80bd 	bne.w	8003562 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80033e8:	f7ff f9c2 	bl	8002770 <HAL_RCC_GetPCLK2Freq>
 80033ec:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	461d      	mov	r5, r3
 80033f2:	f04f 0600 	mov.w	r6, #0
 80033f6:	46a8      	mov	r8, r5
 80033f8:	46b1      	mov	r9, r6
 80033fa:	eb18 0308 	adds.w	r3, r8, r8
 80033fe:	eb49 0409 	adc.w	r4, r9, r9
 8003402:	4698      	mov	r8, r3
 8003404:	46a1      	mov	r9, r4
 8003406:	eb18 0805 	adds.w	r8, r8, r5
 800340a:	eb49 0906 	adc.w	r9, r9, r6
 800340e:	f04f 0100 	mov.w	r1, #0
 8003412:	f04f 0200 	mov.w	r2, #0
 8003416:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800341a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800341e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003422:	4688      	mov	r8, r1
 8003424:	4691      	mov	r9, r2
 8003426:	eb18 0005 	adds.w	r0, r8, r5
 800342a:	eb49 0106 	adc.w	r1, r9, r6
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	461d      	mov	r5, r3
 8003434:	f04f 0600 	mov.w	r6, #0
 8003438:	196b      	adds	r3, r5, r5
 800343a:	eb46 0406 	adc.w	r4, r6, r6
 800343e:	461a      	mov	r2, r3
 8003440:	4623      	mov	r3, r4
 8003442:	f7fc fed9 	bl	80001f8 <__aeabi_uldivmod>
 8003446:	4603      	mov	r3, r0
 8003448:	460c      	mov	r4, r1
 800344a:	461a      	mov	r2, r3
 800344c:	4ba5      	ldr	r3, [pc, #660]	; (80036e4 <UART_SetConfig+0x384>)
 800344e:	fba3 2302 	umull	r2, r3, r3, r2
 8003452:	095b      	lsrs	r3, r3, #5
 8003454:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	461d      	mov	r5, r3
 800345c:	f04f 0600 	mov.w	r6, #0
 8003460:	46a9      	mov	r9, r5
 8003462:	46b2      	mov	sl, r6
 8003464:	eb19 0309 	adds.w	r3, r9, r9
 8003468:	eb4a 040a 	adc.w	r4, sl, sl
 800346c:	4699      	mov	r9, r3
 800346e:	46a2      	mov	sl, r4
 8003470:	eb19 0905 	adds.w	r9, r9, r5
 8003474:	eb4a 0a06 	adc.w	sl, sl, r6
 8003478:	f04f 0100 	mov.w	r1, #0
 800347c:	f04f 0200 	mov.w	r2, #0
 8003480:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003484:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003488:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800348c:	4689      	mov	r9, r1
 800348e:	4692      	mov	sl, r2
 8003490:	eb19 0005 	adds.w	r0, r9, r5
 8003494:	eb4a 0106 	adc.w	r1, sl, r6
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	461d      	mov	r5, r3
 800349e:	f04f 0600 	mov.w	r6, #0
 80034a2:	196b      	adds	r3, r5, r5
 80034a4:	eb46 0406 	adc.w	r4, r6, r6
 80034a8:	461a      	mov	r2, r3
 80034aa:	4623      	mov	r3, r4
 80034ac:	f7fc fea4 	bl	80001f8 <__aeabi_uldivmod>
 80034b0:	4603      	mov	r3, r0
 80034b2:	460c      	mov	r4, r1
 80034b4:	461a      	mov	r2, r3
 80034b6:	4b8b      	ldr	r3, [pc, #556]	; (80036e4 <UART_SetConfig+0x384>)
 80034b8:	fba3 1302 	umull	r1, r3, r3, r2
 80034bc:	095b      	lsrs	r3, r3, #5
 80034be:	2164      	movs	r1, #100	; 0x64
 80034c0:	fb01 f303 	mul.w	r3, r1, r3
 80034c4:	1ad3      	subs	r3, r2, r3
 80034c6:	00db      	lsls	r3, r3, #3
 80034c8:	3332      	adds	r3, #50	; 0x32
 80034ca:	4a86      	ldr	r2, [pc, #536]	; (80036e4 <UART_SetConfig+0x384>)
 80034cc:	fba2 2303 	umull	r2, r3, r2, r3
 80034d0:	095b      	lsrs	r3, r3, #5
 80034d2:	005b      	lsls	r3, r3, #1
 80034d4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80034d8:	4498      	add	r8, r3
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	461d      	mov	r5, r3
 80034de:	f04f 0600 	mov.w	r6, #0
 80034e2:	46a9      	mov	r9, r5
 80034e4:	46b2      	mov	sl, r6
 80034e6:	eb19 0309 	adds.w	r3, r9, r9
 80034ea:	eb4a 040a 	adc.w	r4, sl, sl
 80034ee:	4699      	mov	r9, r3
 80034f0:	46a2      	mov	sl, r4
 80034f2:	eb19 0905 	adds.w	r9, r9, r5
 80034f6:	eb4a 0a06 	adc.w	sl, sl, r6
 80034fa:	f04f 0100 	mov.w	r1, #0
 80034fe:	f04f 0200 	mov.w	r2, #0
 8003502:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003506:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800350a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800350e:	4689      	mov	r9, r1
 8003510:	4692      	mov	sl, r2
 8003512:	eb19 0005 	adds.w	r0, r9, r5
 8003516:	eb4a 0106 	adc.w	r1, sl, r6
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	461d      	mov	r5, r3
 8003520:	f04f 0600 	mov.w	r6, #0
 8003524:	196b      	adds	r3, r5, r5
 8003526:	eb46 0406 	adc.w	r4, r6, r6
 800352a:	461a      	mov	r2, r3
 800352c:	4623      	mov	r3, r4
 800352e:	f7fc fe63 	bl	80001f8 <__aeabi_uldivmod>
 8003532:	4603      	mov	r3, r0
 8003534:	460c      	mov	r4, r1
 8003536:	461a      	mov	r2, r3
 8003538:	4b6a      	ldr	r3, [pc, #424]	; (80036e4 <UART_SetConfig+0x384>)
 800353a:	fba3 1302 	umull	r1, r3, r3, r2
 800353e:	095b      	lsrs	r3, r3, #5
 8003540:	2164      	movs	r1, #100	; 0x64
 8003542:	fb01 f303 	mul.w	r3, r1, r3
 8003546:	1ad3      	subs	r3, r2, r3
 8003548:	00db      	lsls	r3, r3, #3
 800354a:	3332      	adds	r3, #50	; 0x32
 800354c:	4a65      	ldr	r2, [pc, #404]	; (80036e4 <UART_SetConfig+0x384>)
 800354e:	fba2 2303 	umull	r2, r3, r2, r3
 8003552:	095b      	lsrs	r3, r3, #5
 8003554:	f003 0207 	and.w	r2, r3, #7
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4442      	add	r2, r8
 800355e:	609a      	str	r2, [r3, #8]
 8003560:	e26f      	b.n	8003a42 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003562:	f7ff f8f1 	bl	8002748 <HAL_RCC_GetPCLK1Freq>
 8003566:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	461d      	mov	r5, r3
 800356c:	f04f 0600 	mov.w	r6, #0
 8003570:	46a8      	mov	r8, r5
 8003572:	46b1      	mov	r9, r6
 8003574:	eb18 0308 	adds.w	r3, r8, r8
 8003578:	eb49 0409 	adc.w	r4, r9, r9
 800357c:	4698      	mov	r8, r3
 800357e:	46a1      	mov	r9, r4
 8003580:	eb18 0805 	adds.w	r8, r8, r5
 8003584:	eb49 0906 	adc.w	r9, r9, r6
 8003588:	f04f 0100 	mov.w	r1, #0
 800358c:	f04f 0200 	mov.w	r2, #0
 8003590:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003594:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003598:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800359c:	4688      	mov	r8, r1
 800359e:	4691      	mov	r9, r2
 80035a0:	eb18 0005 	adds.w	r0, r8, r5
 80035a4:	eb49 0106 	adc.w	r1, r9, r6
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	461d      	mov	r5, r3
 80035ae:	f04f 0600 	mov.w	r6, #0
 80035b2:	196b      	adds	r3, r5, r5
 80035b4:	eb46 0406 	adc.w	r4, r6, r6
 80035b8:	461a      	mov	r2, r3
 80035ba:	4623      	mov	r3, r4
 80035bc:	f7fc fe1c 	bl	80001f8 <__aeabi_uldivmod>
 80035c0:	4603      	mov	r3, r0
 80035c2:	460c      	mov	r4, r1
 80035c4:	461a      	mov	r2, r3
 80035c6:	4b47      	ldr	r3, [pc, #284]	; (80036e4 <UART_SetConfig+0x384>)
 80035c8:	fba3 2302 	umull	r2, r3, r3, r2
 80035cc:	095b      	lsrs	r3, r3, #5
 80035ce:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	461d      	mov	r5, r3
 80035d6:	f04f 0600 	mov.w	r6, #0
 80035da:	46a9      	mov	r9, r5
 80035dc:	46b2      	mov	sl, r6
 80035de:	eb19 0309 	adds.w	r3, r9, r9
 80035e2:	eb4a 040a 	adc.w	r4, sl, sl
 80035e6:	4699      	mov	r9, r3
 80035e8:	46a2      	mov	sl, r4
 80035ea:	eb19 0905 	adds.w	r9, r9, r5
 80035ee:	eb4a 0a06 	adc.w	sl, sl, r6
 80035f2:	f04f 0100 	mov.w	r1, #0
 80035f6:	f04f 0200 	mov.w	r2, #0
 80035fa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80035fe:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003602:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003606:	4689      	mov	r9, r1
 8003608:	4692      	mov	sl, r2
 800360a:	eb19 0005 	adds.w	r0, r9, r5
 800360e:	eb4a 0106 	adc.w	r1, sl, r6
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	461d      	mov	r5, r3
 8003618:	f04f 0600 	mov.w	r6, #0
 800361c:	196b      	adds	r3, r5, r5
 800361e:	eb46 0406 	adc.w	r4, r6, r6
 8003622:	461a      	mov	r2, r3
 8003624:	4623      	mov	r3, r4
 8003626:	f7fc fde7 	bl	80001f8 <__aeabi_uldivmod>
 800362a:	4603      	mov	r3, r0
 800362c:	460c      	mov	r4, r1
 800362e:	461a      	mov	r2, r3
 8003630:	4b2c      	ldr	r3, [pc, #176]	; (80036e4 <UART_SetConfig+0x384>)
 8003632:	fba3 1302 	umull	r1, r3, r3, r2
 8003636:	095b      	lsrs	r3, r3, #5
 8003638:	2164      	movs	r1, #100	; 0x64
 800363a:	fb01 f303 	mul.w	r3, r1, r3
 800363e:	1ad3      	subs	r3, r2, r3
 8003640:	00db      	lsls	r3, r3, #3
 8003642:	3332      	adds	r3, #50	; 0x32
 8003644:	4a27      	ldr	r2, [pc, #156]	; (80036e4 <UART_SetConfig+0x384>)
 8003646:	fba2 2303 	umull	r2, r3, r2, r3
 800364a:	095b      	lsrs	r3, r3, #5
 800364c:	005b      	lsls	r3, r3, #1
 800364e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003652:	4498      	add	r8, r3
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	461d      	mov	r5, r3
 8003658:	f04f 0600 	mov.w	r6, #0
 800365c:	46a9      	mov	r9, r5
 800365e:	46b2      	mov	sl, r6
 8003660:	eb19 0309 	adds.w	r3, r9, r9
 8003664:	eb4a 040a 	adc.w	r4, sl, sl
 8003668:	4699      	mov	r9, r3
 800366a:	46a2      	mov	sl, r4
 800366c:	eb19 0905 	adds.w	r9, r9, r5
 8003670:	eb4a 0a06 	adc.w	sl, sl, r6
 8003674:	f04f 0100 	mov.w	r1, #0
 8003678:	f04f 0200 	mov.w	r2, #0
 800367c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003680:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003684:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003688:	4689      	mov	r9, r1
 800368a:	4692      	mov	sl, r2
 800368c:	eb19 0005 	adds.w	r0, r9, r5
 8003690:	eb4a 0106 	adc.w	r1, sl, r6
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	461d      	mov	r5, r3
 800369a:	f04f 0600 	mov.w	r6, #0
 800369e:	196b      	adds	r3, r5, r5
 80036a0:	eb46 0406 	adc.w	r4, r6, r6
 80036a4:	461a      	mov	r2, r3
 80036a6:	4623      	mov	r3, r4
 80036a8:	f7fc fda6 	bl	80001f8 <__aeabi_uldivmod>
 80036ac:	4603      	mov	r3, r0
 80036ae:	460c      	mov	r4, r1
 80036b0:	461a      	mov	r2, r3
 80036b2:	4b0c      	ldr	r3, [pc, #48]	; (80036e4 <UART_SetConfig+0x384>)
 80036b4:	fba3 1302 	umull	r1, r3, r3, r2
 80036b8:	095b      	lsrs	r3, r3, #5
 80036ba:	2164      	movs	r1, #100	; 0x64
 80036bc:	fb01 f303 	mul.w	r3, r1, r3
 80036c0:	1ad3      	subs	r3, r2, r3
 80036c2:	00db      	lsls	r3, r3, #3
 80036c4:	3332      	adds	r3, #50	; 0x32
 80036c6:	4a07      	ldr	r2, [pc, #28]	; (80036e4 <UART_SetConfig+0x384>)
 80036c8:	fba2 2303 	umull	r2, r3, r2, r3
 80036cc:	095b      	lsrs	r3, r3, #5
 80036ce:	f003 0207 	and.w	r2, r3, #7
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4442      	add	r2, r8
 80036d8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80036da:	e1b2      	b.n	8003a42 <UART_SetConfig+0x6e2>
 80036dc:	40011000 	.word	0x40011000
 80036e0:	40011400 	.word	0x40011400
 80036e4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4ad7      	ldr	r2, [pc, #860]	; (8003a4c <UART_SetConfig+0x6ec>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d005      	beq.n	80036fe <UART_SetConfig+0x39e>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4ad6      	ldr	r2, [pc, #856]	; (8003a50 <UART_SetConfig+0x6f0>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	f040 80d1 	bne.w	80038a0 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80036fe:	f7ff f837 	bl	8002770 <HAL_RCC_GetPCLK2Freq>
 8003702:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	469a      	mov	sl, r3
 8003708:	f04f 0b00 	mov.w	fp, #0
 800370c:	46d0      	mov	r8, sl
 800370e:	46d9      	mov	r9, fp
 8003710:	eb18 0308 	adds.w	r3, r8, r8
 8003714:	eb49 0409 	adc.w	r4, r9, r9
 8003718:	4698      	mov	r8, r3
 800371a:	46a1      	mov	r9, r4
 800371c:	eb18 080a 	adds.w	r8, r8, sl
 8003720:	eb49 090b 	adc.w	r9, r9, fp
 8003724:	f04f 0100 	mov.w	r1, #0
 8003728:	f04f 0200 	mov.w	r2, #0
 800372c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003730:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003734:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003738:	4688      	mov	r8, r1
 800373a:	4691      	mov	r9, r2
 800373c:	eb1a 0508 	adds.w	r5, sl, r8
 8003740:	eb4b 0609 	adc.w	r6, fp, r9
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	4619      	mov	r1, r3
 800374a:	f04f 0200 	mov.w	r2, #0
 800374e:	f04f 0300 	mov.w	r3, #0
 8003752:	f04f 0400 	mov.w	r4, #0
 8003756:	0094      	lsls	r4, r2, #2
 8003758:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800375c:	008b      	lsls	r3, r1, #2
 800375e:	461a      	mov	r2, r3
 8003760:	4623      	mov	r3, r4
 8003762:	4628      	mov	r0, r5
 8003764:	4631      	mov	r1, r6
 8003766:	f7fc fd47 	bl	80001f8 <__aeabi_uldivmod>
 800376a:	4603      	mov	r3, r0
 800376c:	460c      	mov	r4, r1
 800376e:	461a      	mov	r2, r3
 8003770:	4bb8      	ldr	r3, [pc, #736]	; (8003a54 <UART_SetConfig+0x6f4>)
 8003772:	fba3 2302 	umull	r2, r3, r3, r2
 8003776:	095b      	lsrs	r3, r3, #5
 8003778:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	469b      	mov	fp, r3
 8003780:	f04f 0c00 	mov.w	ip, #0
 8003784:	46d9      	mov	r9, fp
 8003786:	46e2      	mov	sl, ip
 8003788:	eb19 0309 	adds.w	r3, r9, r9
 800378c:	eb4a 040a 	adc.w	r4, sl, sl
 8003790:	4699      	mov	r9, r3
 8003792:	46a2      	mov	sl, r4
 8003794:	eb19 090b 	adds.w	r9, r9, fp
 8003798:	eb4a 0a0c 	adc.w	sl, sl, ip
 800379c:	f04f 0100 	mov.w	r1, #0
 80037a0:	f04f 0200 	mov.w	r2, #0
 80037a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80037a8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80037ac:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80037b0:	4689      	mov	r9, r1
 80037b2:	4692      	mov	sl, r2
 80037b4:	eb1b 0509 	adds.w	r5, fp, r9
 80037b8:	eb4c 060a 	adc.w	r6, ip, sl
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	4619      	mov	r1, r3
 80037c2:	f04f 0200 	mov.w	r2, #0
 80037c6:	f04f 0300 	mov.w	r3, #0
 80037ca:	f04f 0400 	mov.w	r4, #0
 80037ce:	0094      	lsls	r4, r2, #2
 80037d0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80037d4:	008b      	lsls	r3, r1, #2
 80037d6:	461a      	mov	r2, r3
 80037d8:	4623      	mov	r3, r4
 80037da:	4628      	mov	r0, r5
 80037dc:	4631      	mov	r1, r6
 80037de:	f7fc fd0b 	bl	80001f8 <__aeabi_uldivmod>
 80037e2:	4603      	mov	r3, r0
 80037e4:	460c      	mov	r4, r1
 80037e6:	461a      	mov	r2, r3
 80037e8:	4b9a      	ldr	r3, [pc, #616]	; (8003a54 <UART_SetConfig+0x6f4>)
 80037ea:	fba3 1302 	umull	r1, r3, r3, r2
 80037ee:	095b      	lsrs	r3, r3, #5
 80037f0:	2164      	movs	r1, #100	; 0x64
 80037f2:	fb01 f303 	mul.w	r3, r1, r3
 80037f6:	1ad3      	subs	r3, r2, r3
 80037f8:	011b      	lsls	r3, r3, #4
 80037fa:	3332      	adds	r3, #50	; 0x32
 80037fc:	4a95      	ldr	r2, [pc, #596]	; (8003a54 <UART_SetConfig+0x6f4>)
 80037fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003802:	095b      	lsrs	r3, r3, #5
 8003804:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003808:	4498      	add	r8, r3
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	469b      	mov	fp, r3
 800380e:	f04f 0c00 	mov.w	ip, #0
 8003812:	46d9      	mov	r9, fp
 8003814:	46e2      	mov	sl, ip
 8003816:	eb19 0309 	adds.w	r3, r9, r9
 800381a:	eb4a 040a 	adc.w	r4, sl, sl
 800381e:	4699      	mov	r9, r3
 8003820:	46a2      	mov	sl, r4
 8003822:	eb19 090b 	adds.w	r9, r9, fp
 8003826:	eb4a 0a0c 	adc.w	sl, sl, ip
 800382a:	f04f 0100 	mov.w	r1, #0
 800382e:	f04f 0200 	mov.w	r2, #0
 8003832:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003836:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800383a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800383e:	4689      	mov	r9, r1
 8003840:	4692      	mov	sl, r2
 8003842:	eb1b 0509 	adds.w	r5, fp, r9
 8003846:	eb4c 060a 	adc.w	r6, ip, sl
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	4619      	mov	r1, r3
 8003850:	f04f 0200 	mov.w	r2, #0
 8003854:	f04f 0300 	mov.w	r3, #0
 8003858:	f04f 0400 	mov.w	r4, #0
 800385c:	0094      	lsls	r4, r2, #2
 800385e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003862:	008b      	lsls	r3, r1, #2
 8003864:	461a      	mov	r2, r3
 8003866:	4623      	mov	r3, r4
 8003868:	4628      	mov	r0, r5
 800386a:	4631      	mov	r1, r6
 800386c:	f7fc fcc4 	bl	80001f8 <__aeabi_uldivmod>
 8003870:	4603      	mov	r3, r0
 8003872:	460c      	mov	r4, r1
 8003874:	461a      	mov	r2, r3
 8003876:	4b77      	ldr	r3, [pc, #476]	; (8003a54 <UART_SetConfig+0x6f4>)
 8003878:	fba3 1302 	umull	r1, r3, r3, r2
 800387c:	095b      	lsrs	r3, r3, #5
 800387e:	2164      	movs	r1, #100	; 0x64
 8003880:	fb01 f303 	mul.w	r3, r1, r3
 8003884:	1ad3      	subs	r3, r2, r3
 8003886:	011b      	lsls	r3, r3, #4
 8003888:	3332      	adds	r3, #50	; 0x32
 800388a:	4a72      	ldr	r2, [pc, #456]	; (8003a54 <UART_SetConfig+0x6f4>)
 800388c:	fba2 2303 	umull	r2, r3, r2, r3
 8003890:	095b      	lsrs	r3, r3, #5
 8003892:	f003 020f 	and.w	r2, r3, #15
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4442      	add	r2, r8
 800389c:	609a      	str	r2, [r3, #8]
 800389e:	e0d0      	b.n	8003a42 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80038a0:	f7fe ff52 	bl	8002748 <HAL_RCC_GetPCLK1Freq>
 80038a4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	469a      	mov	sl, r3
 80038aa:	f04f 0b00 	mov.w	fp, #0
 80038ae:	46d0      	mov	r8, sl
 80038b0:	46d9      	mov	r9, fp
 80038b2:	eb18 0308 	adds.w	r3, r8, r8
 80038b6:	eb49 0409 	adc.w	r4, r9, r9
 80038ba:	4698      	mov	r8, r3
 80038bc:	46a1      	mov	r9, r4
 80038be:	eb18 080a 	adds.w	r8, r8, sl
 80038c2:	eb49 090b 	adc.w	r9, r9, fp
 80038c6:	f04f 0100 	mov.w	r1, #0
 80038ca:	f04f 0200 	mov.w	r2, #0
 80038ce:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80038d2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80038d6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80038da:	4688      	mov	r8, r1
 80038dc:	4691      	mov	r9, r2
 80038de:	eb1a 0508 	adds.w	r5, sl, r8
 80038e2:	eb4b 0609 	adc.w	r6, fp, r9
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	4619      	mov	r1, r3
 80038ec:	f04f 0200 	mov.w	r2, #0
 80038f0:	f04f 0300 	mov.w	r3, #0
 80038f4:	f04f 0400 	mov.w	r4, #0
 80038f8:	0094      	lsls	r4, r2, #2
 80038fa:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80038fe:	008b      	lsls	r3, r1, #2
 8003900:	461a      	mov	r2, r3
 8003902:	4623      	mov	r3, r4
 8003904:	4628      	mov	r0, r5
 8003906:	4631      	mov	r1, r6
 8003908:	f7fc fc76 	bl	80001f8 <__aeabi_uldivmod>
 800390c:	4603      	mov	r3, r0
 800390e:	460c      	mov	r4, r1
 8003910:	461a      	mov	r2, r3
 8003912:	4b50      	ldr	r3, [pc, #320]	; (8003a54 <UART_SetConfig+0x6f4>)
 8003914:	fba3 2302 	umull	r2, r3, r3, r2
 8003918:	095b      	lsrs	r3, r3, #5
 800391a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	469b      	mov	fp, r3
 8003922:	f04f 0c00 	mov.w	ip, #0
 8003926:	46d9      	mov	r9, fp
 8003928:	46e2      	mov	sl, ip
 800392a:	eb19 0309 	adds.w	r3, r9, r9
 800392e:	eb4a 040a 	adc.w	r4, sl, sl
 8003932:	4699      	mov	r9, r3
 8003934:	46a2      	mov	sl, r4
 8003936:	eb19 090b 	adds.w	r9, r9, fp
 800393a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800393e:	f04f 0100 	mov.w	r1, #0
 8003942:	f04f 0200 	mov.w	r2, #0
 8003946:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800394a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800394e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003952:	4689      	mov	r9, r1
 8003954:	4692      	mov	sl, r2
 8003956:	eb1b 0509 	adds.w	r5, fp, r9
 800395a:	eb4c 060a 	adc.w	r6, ip, sl
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	4619      	mov	r1, r3
 8003964:	f04f 0200 	mov.w	r2, #0
 8003968:	f04f 0300 	mov.w	r3, #0
 800396c:	f04f 0400 	mov.w	r4, #0
 8003970:	0094      	lsls	r4, r2, #2
 8003972:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003976:	008b      	lsls	r3, r1, #2
 8003978:	461a      	mov	r2, r3
 800397a:	4623      	mov	r3, r4
 800397c:	4628      	mov	r0, r5
 800397e:	4631      	mov	r1, r6
 8003980:	f7fc fc3a 	bl	80001f8 <__aeabi_uldivmod>
 8003984:	4603      	mov	r3, r0
 8003986:	460c      	mov	r4, r1
 8003988:	461a      	mov	r2, r3
 800398a:	4b32      	ldr	r3, [pc, #200]	; (8003a54 <UART_SetConfig+0x6f4>)
 800398c:	fba3 1302 	umull	r1, r3, r3, r2
 8003990:	095b      	lsrs	r3, r3, #5
 8003992:	2164      	movs	r1, #100	; 0x64
 8003994:	fb01 f303 	mul.w	r3, r1, r3
 8003998:	1ad3      	subs	r3, r2, r3
 800399a:	011b      	lsls	r3, r3, #4
 800399c:	3332      	adds	r3, #50	; 0x32
 800399e:	4a2d      	ldr	r2, [pc, #180]	; (8003a54 <UART_SetConfig+0x6f4>)
 80039a0:	fba2 2303 	umull	r2, r3, r2, r3
 80039a4:	095b      	lsrs	r3, r3, #5
 80039a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039aa:	4498      	add	r8, r3
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	469b      	mov	fp, r3
 80039b0:	f04f 0c00 	mov.w	ip, #0
 80039b4:	46d9      	mov	r9, fp
 80039b6:	46e2      	mov	sl, ip
 80039b8:	eb19 0309 	adds.w	r3, r9, r9
 80039bc:	eb4a 040a 	adc.w	r4, sl, sl
 80039c0:	4699      	mov	r9, r3
 80039c2:	46a2      	mov	sl, r4
 80039c4:	eb19 090b 	adds.w	r9, r9, fp
 80039c8:	eb4a 0a0c 	adc.w	sl, sl, ip
 80039cc:	f04f 0100 	mov.w	r1, #0
 80039d0:	f04f 0200 	mov.w	r2, #0
 80039d4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80039d8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80039dc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80039e0:	4689      	mov	r9, r1
 80039e2:	4692      	mov	sl, r2
 80039e4:	eb1b 0509 	adds.w	r5, fp, r9
 80039e8:	eb4c 060a 	adc.w	r6, ip, sl
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	4619      	mov	r1, r3
 80039f2:	f04f 0200 	mov.w	r2, #0
 80039f6:	f04f 0300 	mov.w	r3, #0
 80039fa:	f04f 0400 	mov.w	r4, #0
 80039fe:	0094      	lsls	r4, r2, #2
 8003a00:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003a04:	008b      	lsls	r3, r1, #2
 8003a06:	461a      	mov	r2, r3
 8003a08:	4623      	mov	r3, r4
 8003a0a:	4628      	mov	r0, r5
 8003a0c:	4631      	mov	r1, r6
 8003a0e:	f7fc fbf3 	bl	80001f8 <__aeabi_uldivmod>
 8003a12:	4603      	mov	r3, r0
 8003a14:	460c      	mov	r4, r1
 8003a16:	461a      	mov	r2, r3
 8003a18:	4b0e      	ldr	r3, [pc, #56]	; (8003a54 <UART_SetConfig+0x6f4>)
 8003a1a:	fba3 1302 	umull	r1, r3, r3, r2
 8003a1e:	095b      	lsrs	r3, r3, #5
 8003a20:	2164      	movs	r1, #100	; 0x64
 8003a22:	fb01 f303 	mul.w	r3, r1, r3
 8003a26:	1ad3      	subs	r3, r2, r3
 8003a28:	011b      	lsls	r3, r3, #4
 8003a2a:	3332      	adds	r3, #50	; 0x32
 8003a2c:	4a09      	ldr	r2, [pc, #36]	; (8003a54 <UART_SetConfig+0x6f4>)
 8003a2e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a32:	095b      	lsrs	r3, r3, #5
 8003a34:	f003 020f 	and.w	r2, r3, #15
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4442      	add	r2, r8
 8003a3e:	609a      	str	r2, [r3, #8]
}
 8003a40:	e7ff      	b.n	8003a42 <UART_SetConfig+0x6e2>
 8003a42:	bf00      	nop
 8003a44:	3714      	adds	r7, #20
 8003a46:	46bd      	mov	sp, r7
 8003a48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a4c:	40011000 	.word	0x40011000
 8003a50:	40011400 	.word	0x40011400
 8003a54:	51eb851f 	.word	0x51eb851f

08003a58 <__libc_init_array>:
 8003a58:	b570      	push	{r4, r5, r6, lr}
 8003a5a:	4e0d      	ldr	r6, [pc, #52]	; (8003a90 <__libc_init_array+0x38>)
 8003a5c:	4c0d      	ldr	r4, [pc, #52]	; (8003a94 <__libc_init_array+0x3c>)
 8003a5e:	1ba4      	subs	r4, r4, r6
 8003a60:	10a4      	asrs	r4, r4, #2
 8003a62:	2500      	movs	r5, #0
 8003a64:	42a5      	cmp	r5, r4
 8003a66:	d109      	bne.n	8003a7c <__libc_init_array+0x24>
 8003a68:	4e0b      	ldr	r6, [pc, #44]	; (8003a98 <__libc_init_array+0x40>)
 8003a6a:	4c0c      	ldr	r4, [pc, #48]	; (8003a9c <__libc_init_array+0x44>)
 8003a6c:	f000 f878 	bl	8003b60 <_init>
 8003a70:	1ba4      	subs	r4, r4, r6
 8003a72:	10a4      	asrs	r4, r4, #2
 8003a74:	2500      	movs	r5, #0
 8003a76:	42a5      	cmp	r5, r4
 8003a78:	d105      	bne.n	8003a86 <__libc_init_array+0x2e>
 8003a7a:	bd70      	pop	{r4, r5, r6, pc}
 8003a7c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003a80:	4798      	blx	r3
 8003a82:	3501      	adds	r5, #1
 8003a84:	e7ee      	b.n	8003a64 <__libc_init_array+0xc>
 8003a86:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003a8a:	4798      	blx	r3
 8003a8c:	3501      	adds	r5, #1
 8003a8e:	e7f2      	b.n	8003a76 <__libc_init_array+0x1e>
 8003a90:	08003c30 	.word	0x08003c30
 8003a94:	08003c30 	.word	0x08003c30
 8003a98:	08003c30 	.word	0x08003c30
 8003a9c:	08003c34 	.word	0x08003c34

08003aa0 <__itoa>:
 8003aa0:	1e93      	subs	r3, r2, #2
 8003aa2:	2b22      	cmp	r3, #34	; 0x22
 8003aa4:	b510      	push	{r4, lr}
 8003aa6:	460c      	mov	r4, r1
 8003aa8:	d904      	bls.n	8003ab4 <__itoa+0x14>
 8003aaa:	2300      	movs	r3, #0
 8003aac:	700b      	strb	r3, [r1, #0]
 8003aae:	461c      	mov	r4, r3
 8003ab0:	4620      	mov	r0, r4
 8003ab2:	bd10      	pop	{r4, pc}
 8003ab4:	2a0a      	cmp	r2, #10
 8003ab6:	d109      	bne.n	8003acc <__itoa+0x2c>
 8003ab8:	2800      	cmp	r0, #0
 8003aba:	da07      	bge.n	8003acc <__itoa+0x2c>
 8003abc:	232d      	movs	r3, #45	; 0x2d
 8003abe:	700b      	strb	r3, [r1, #0]
 8003ac0:	4240      	negs	r0, r0
 8003ac2:	2101      	movs	r1, #1
 8003ac4:	4421      	add	r1, r4
 8003ac6:	f000 f80d 	bl	8003ae4 <__utoa>
 8003aca:	e7f1      	b.n	8003ab0 <__itoa+0x10>
 8003acc:	2100      	movs	r1, #0
 8003ace:	e7f9      	b.n	8003ac4 <__itoa+0x24>

08003ad0 <itoa>:
 8003ad0:	f7ff bfe6 	b.w	8003aa0 <__itoa>

08003ad4 <memset>:
 8003ad4:	4402      	add	r2, r0
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d100      	bne.n	8003ade <memset+0xa>
 8003adc:	4770      	bx	lr
 8003ade:	f803 1b01 	strb.w	r1, [r3], #1
 8003ae2:	e7f9      	b.n	8003ad8 <memset+0x4>

08003ae4 <__utoa>:
 8003ae4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ae6:	4b1d      	ldr	r3, [pc, #116]	; (8003b5c <__utoa+0x78>)
 8003ae8:	b08b      	sub	sp, #44	; 0x2c
 8003aea:	4605      	mov	r5, r0
 8003aec:	460c      	mov	r4, r1
 8003aee:	466e      	mov	r6, sp
 8003af0:	f103 0c20 	add.w	ip, r3, #32
 8003af4:	6818      	ldr	r0, [r3, #0]
 8003af6:	6859      	ldr	r1, [r3, #4]
 8003af8:	4637      	mov	r7, r6
 8003afa:	c703      	stmia	r7!, {r0, r1}
 8003afc:	3308      	adds	r3, #8
 8003afe:	4563      	cmp	r3, ip
 8003b00:	463e      	mov	r6, r7
 8003b02:	d1f7      	bne.n	8003af4 <__utoa+0x10>
 8003b04:	6818      	ldr	r0, [r3, #0]
 8003b06:	791b      	ldrb	r3, [r3, #4]
 8003b08:	713b      	strb	r3, [r7, #4]
 8003b0a:	1e93      	subs	r3, r2, #2
 8003b0c:	2b22      	cmp	r3, #34	; 0x22
 8003b0e:	6038      	str	r0, [r7, #0]
 8003b10:	f04f 0300 	mov.w	r3, #0
 8003b14:	d904      	bls.n	8003b20 <__utoa+0x3c>
 8003b16:	7023      	strb	r3, [r4, #0]
 8003b18:	461c      	mov	r4, r3
 8003b1a:	4620      	mov	r0, r4
 8003b1c:	b00b      	add	sp, #44	; 0x2c
 8003b1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b20:	1e66      	subs	r6, r4, #1
 8003b22:	fbb5 f0f2 	udiv	r0, r5, r2
 8003b26:	af0a      	add	r7, sp, #40	; 0x28
 8003b28:	fb02 5510 	mls	r5, r2, r0, r5
 8003b2c:	443d      	add	r5, r7
 8003b2e:	1c59      	adds	r1, r3, #1
 8003b30:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 8003b34:	f806 5f01 	strb.w	r5, [r6, #1]!
 8003b38:	4605      	mov	r5, r0
 8003b3a:	b968      	cbnz	r0, 8003b58 <__utoa+0x74>
 8003b3c:	5460      	strb	r0, [r4, r1]
 8003b3e:	4423      	add	r3, r4
 8003b40:	4622      	mov	r2, r4
 8003b42:	1b19      	subs	r1, r3, r4
 8003b44:	1b10      	subs	r0, r2, r4
 8003b46:	4281      	cmp	r1, r0
 8003b48:	dde7      	ble.n	8003b1a <__utoa+0x36>
 8003b4a:	7811      	ldrb	r1, [r2, #0]
 8003b4c:	7818      	ldrb	r0, [r3, #0]
 8003b4e:	f802 0b01 	strb.w	r0, [r2], #1
 8003b52:	f803 1901 	strb.w	r1, [r3], #-1
 8003b56:	e7f4      	b.n	8003b42 <__utoa+0x5e>
 8003b58:	460b      	mov	r3, r1
 8003b5a:	e7e2      	b.n	8003b22 <__utoa+0x3e>
 8003b5c:	08003c00 	.word	0x08003c00

08003b60 <_init>:
 8003b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b62:	bf00      	nop
 8003b64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b66:	bc08      	pop	{r3}
 8003b68:	469e      	mov	lr, r3
 8003b6a:	4770      	bx	lr

08003b6c <_fini>:
 8003b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b6e:	bf00      	nop
 8003b70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b72:	bc08      	pop	{r3}
 8003b74:	469e      	mov	lr, r3
 8003b76:	4770      	bx	lr
