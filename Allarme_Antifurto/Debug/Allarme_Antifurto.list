
Allarme_Antifurto.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037b0  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08003944  08003944  00013944  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080039b4  080039b4  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  080039b4  080039b4  000139b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080039bc  080039bc  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080039bc  080039bc  000139bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080039c0  080039c0  000139c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  080039c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c4  20000014  080039d8  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000d8  080039d8  000200d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ce5c  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001e29  00000000  00000000  0002cea0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c40  00000000  00000000  0002ecd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b38  00000000  00000000  0002f910  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016f09  00000000  00000000  00030448  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009ea3  00000000  00000000  00047351  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008ae6a  00000000  00000000  000511f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000dc05e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000031e8  00000000  00000000  000dc0dc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000014 	.word	0x20000014
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800392c 	.word	0x0800392c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000018 	.word	0x20000018
 80001d0:	0800392c 	.word	0x0800392c

080001d4 <strcmp>:
 80001d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001dc:	2a01      	cmp	r2, #1
 80001de:	bf28      	it	cs
 80001e0:	429a      	cmpcs	r2, r3
 80001e2:	d0f7      	beq.n	80001d4 <strcmp>
 80001e4:	1ad0      	subs	r0, r2, r3
 80001e6:	4770      	bx	lr

080001e8 <strlen>:
 80001e8:	4603      	mov	r3, r0
 80001ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ee:	2a00      	cmp	r2, #0
 80001f0:	d1fb      	bne.n	80001ea <strlen+0x2>
 80001f2:	1a18      	subs	r0, r3, r0
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr

080001f8 <__aeabi_uldivmod>:
 80001f8:	b953      	cbnz	r3, 8000210 <__aeabi_uldivmod+0x18>
 80001fa:	b94a      	cbnz	r2, 8000210 <__aeabi_uldivmod+0x18>
 80001fc:	2900      	cmp	r1, #0
 80001fe:	bf08      	it	eq
 8000200:	2800      	cmpeq	r0, #0
 8000202:	bf1c      	itt	ne
 8000204:	f04f 31ff 	movne.w	r1, #4294967295
 8000208:	f04f 30ff 	movne.w	r0, #4294967295
 800020c:	f000 b972 	b.w	80004f4 <__aeabi_idiv0>
 8000210:	f1ad 0c08 	sub.w	ip, sp, #8
 8000214:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000218:	f000 f806 	bl	8000228 <__udivmoddi4>
 800021c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000220:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000224:	b004      	add	sp, #16
 8000226:	4770      	bx	lr

08000228 <__udivmoddi4>:
 8000228:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800022c:	9e08      	ldr	r6, [sp, #32]
 800022e:	4604      	mov	r4, r0
 8000230:	4688      	mov	r8, r1
 8000232:	2b00      	cmp	r3, #0
 8000234:	d14b      	bne.n	80002ce <__udivmoddi4+0xa6>
 8000236:	428a      	cmp	r2, r1
 8000238:	4615      	mov	r5, r2
 800023a:	d967      	bls.n	800030c <__udivmoddi4+0xe4>
 800023c:	fab2 f282 	clz	r2, r2
 8000240:	b14a      	cbz	r2, 8000256 <__udivmoddi4+0x2e>
 8000242:	f1c2 0720 	rsb	r7, r2, #32
 8000246:	fa01 f302 	lsl.w	r3, r1, r2
 800024a:	fa20 f707 	lsr.w	r7, r0, r7
 800024e:	4095      	lsls	r5, r2
 8000250:	ea47 0803 	orr.w	r8, r7, r3
 8000254:	4094      	lsls	r4, r2
 8000256:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800025a:	0c23      	lsrs	r3, r4, #16
 800025c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000260:	fa1f fc85 	uxth.w	ip, r5
 8000264:	fb0e 8817 	mls	r8, lr, r7, r8
 8000268:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800026c:	fb07 f10c 	mul.w	r1, r7, ip
 8000270:	4299      	cmp	r1, r3
 8000272:	d909      	bls.n	8000288 <__udivmoddi4+0x60>
 8000274:	18eb      	adds	r3, r5, r3
 8000276:	f107 30ff 	add.w	r0, r7, #4294967295
 800027a:	f080 811b 	bcs.w	80004b4 <__udivmoddi4+0x28c>
 800027e:	4299      	cmp	r1, r3
 8000280:	f240 8118 	bls.w	80004b4 <__udivmoddi4+0x28c>
 8000284:	3f02      	subs	r7, #2
 8000286:	442b      	add	r3, r5
 8000288:	1a5b      	subs	r3, r3, r1
 800028a:	b2a4      	uxth	r4, r4
 800028c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000290:	fb0e 3310 	mls	r3, lr, r0, r3
 8000294:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000298:	fb00 fc0c 	mul.w	ip, r0, ip
 800029c:	45a4      	cmp	ip, r4
 800029e:	d909      	bls.n	80002b4 <__udivmoddi4+0x8c>
 80002a0:	192c      	adds	r4, r5, r4
 80002a2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a6:	f080 8107 	bcs.w	80004b8 <__udivmoddi4+0x290>
 80002aa:	45a4      	cmp	ip, r4
 80002ac:	f240 8104 	bls.w	80004b8 <__udivmoddi4+0x290>
 80002b0:	3802      	subs	r0, #2
 80002b2:	442c      	add	r4, r5
 80002b4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002b8:	eba4 040c 	sub.w	r4, r4, ip
 80002bc:	2700      	movs	r7, #0
 80002be:	b11e      	cbz	r6, 80002c8 <__udivmoddi4+0xa0>
 80002c0:	40d4      	lsrs	r4, r2
 80002c2:	2300      	movs	r3, #0
 80002c4:	e9c6 4300 	strd	r4, r3, [r6]
 80002c8:	4639      	mov	r1, r7
 80002ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d909      	bls.n	80002e6 <__udivmoddi4+0xbe>
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	f000 80eb 	beq.w	80004ae <__udivmoddi4+0x286>
 80002d8:	2700      	movs	r7, #0
 80002da:	e9c6 0100 	strd	r0, r1, [r6]
 80002de:	4638      	mov	r0, r7
 80002e0:	4639      	mov	r1, r7
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	fab3 f783 	clz	r7, r3
 80002ea:	2f00      	cmp	r7, #0
 80002ec:	d147      	bne.n	800037e <__udivmoddi4+0x156>
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d302      	bcc.n	80002f8 <__udivmoddi4+0xd0>
 80002f2:	4282      	cmp	r2, r0
 80002f4:	f200 80fa 	bhi.w	80004ec <__udivmoddi4+0x2c4>
 80002f8:	1a84      	subs	r4, r0, r2
 80002fa:	eb61 0303 	sbc.w	r3, r1, r3
 80002fe:	2001      	movs	r0, #1
 8000300:	4698      	mov	r8, r3
 8000302:	2e00      	cmp	r6, #0
 8000304:	d0e0      	beq.n	80002c8 <__udivmoddi4+0xa0>
 8000306:	e9c6 4800 	strd	r4, r8, [r6]
 800030a:	e7dd      	b.n	80002c8 <__udivmoddi4+0xa0>
 800030c:	b902      	cbnz	r2, 8000310 <__udivmoddi4+0xe8>
 800030e:	deff      	udf	#255	; 0xff
 8000310:	fab2 f282 	clz	r2, r2
 8000314:	2a00      	cmp	r2, #0
 8000316:	f040 808f 	bne.w	8000438 <__udivmoddi4+0x210>
 800031a:	1b49      	subs	r1, r1, r5
 800031c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000320:	fa1f f885 	uxth.w	r8, r5
 8000324:	2701      	movs	r7, #1
 8000326:	fbb1 fcfe 	udiv	ip, r1, lr
 800032a:	0c23      	lsrs	r3, r4, #16
 800032c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000330:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000334:	fb08 f10c 	mul.w	r1, r8, ip
 8000338:	4299      	cmp	r1, r3
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x124>
 800033c:	18eb      	adds	r3, r5, r3
 800033e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x122>
 8000344:	4299      	cmp	r1, r3
 8000346:	f200 80cd 	bhi.w	80004e4 <__udivmoddi4+0x2bc>
 800034a:	4684      	mov	ip, r0
 800034c:	1a59      	subs	r1, r3, r1
 800034e:	b2a3      	uxth	r3, r4
 8000350:	fbb1 f0fe 	udiv	r0, r1, lr
 8000354:	fb0e 1410 	mls	r4, lr, r0, r1
 8000358:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800035c:	fb08 f800 	mul.w	r8, r8, r0
 8000360:	45a0      	cmp	r8, r4
 8000362:	d907      	bls.n	8000374 <__udivmoddi4+0x14c>
 8000364:	192c      	adds	r4, r5, r4
 8000366:	f100 33ff 	add.w	r3, r0, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x14a>
 800036c:	45a0      	cmp	r8, r4
 800036e:	f200 80b6 	bhi.w	80004de <__udivmoddi4+0x2b6>
 8000372:	4618      	mov	r0, r3
 8000374:	eba4 0408 	sub.w	r4, r4, r8
 8000378:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800037c:	e79f      	b.n	80002be <__udivmoddi4+0x96>
 800037e:	f1c7 0c20 	rsb	ip, r7, #32
 8000382:	40bb      	lsls	r3, r7
 8000384:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000388:	ea4e 0e03 	orr.w	lr, lr, r3
 800038c:	fa01 f407 	lsl.w	r4, r1, r7
 8000390:	fa20 f50c 	lsr.w	r5, r0, ip
 8000394:	fa21 f30c 	lsr.w	r3, r1, ip
 8000398:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800039c:	4325      	orrs	r5, r4
 800039e:	fbb3 f9f8 	udiv	r9, r3, r8
 80003a2:	0c2c      	lsrs	r4, r5, #16
 80003a4:	fb08 3319 	mls	r3, r8, r9, r3
 80003a8:	fa1f fa8e 	uxth.w	sl, lr
 80003ac:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003b0:	fb09 f40a 	mul.w	r4, r9, sl
 80003b4:	429c      	cmp	r4, r3
 80003b6:	fa02 f207 	lsl.w	r2, r2, r7
 80003ba:	fa00 f107 	lsl.w	r1, r0, r7
 80003be:	d90b      	bls.n	80003d8 <__udivmoddi4+0x1b0>
 80003c0:	eb1e 0303 	adds.w	r3, lr, r3
 80003c4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003c8:	f080 8087 	bcs.w	80004da <__udivmoddi4+0x2b2>
 80003cc:	429c      	cmp	r4, r3
 80003ce:	f240 8084 	bls.w	80004da <__udivmoddi4+0x2b2>
 80003d2:	f1a9 0902 	sub.w	r9, r9, #2
 80003d6:	4473      	add	r3, lr
 80003d8:	1b1b      	subs	r3, r3, r4
 80003da:	b2ad      	uxth	r5, r5
 80003dc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003e0:	fb08 3310 	mls	r3, r8, r0, r3
 80003e4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003e8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003ec:	45a2      	cmp	sl, r4
 80003ee:	d908      	bls.n	8000402 <__udivmoddi4+0x1da>
 80003f0:	eb1e 0404 	adds.w	r4, lr, r4
 80003f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f8:	d26b      	bcs.n	80004d2 <__udivmoddi4+0x2aa>
 80003fa:	45a2      	cmp	sl, r4
 80003fc:	d969      	bls.n	80004d2 <__udivmoddi4+0x2aa>
 80003fe:	3802      	subs	r0, #2
 8000400:	4474      	add	r4, lr
 8000402:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000406:	fba0 8902 	umull	r8, r9, r0, r2
 800040a:	eba4 040a 	sub.w	r4, r4, sl
 800040e:	454c      	cmp	r4, r9
 8000410:	46c2      	mov	sl, r8
 8000412:	464b      	mov	r3, r9
 8000414:	d354      	bcc.n	80004c0 <__udivmoddi4+0x298>
 8000416:	d051      	beq.n	80004bc <__udivmoddi4+0x294>
 8000418:	2e00      	cmp	r6, #0
 800041a:	d069      	beq.n	80004f0 <__udivmoddi4+0x2c8>
 800041c:	ebb1 050a 	subs.w	r5, r1, sl
 8000420:	eb64 0403 	sbc.w	r4, r4, r3
 8000424:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000428:	40fd      	lsrs	r5, r7
 800042a:	40fc      	lsrs	r4, r7
 800042c:	ea4c 0505 	orr.w	r5, ip, r5
 8000430:	e9c6 5400 	strd	r5, r4, [r6]
 8000434:	2700      	movs	r7, #0
 8000436:	e747      	b.n	80002c8 <__udivmoddi4+0xa0>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f703 	lsr.w	r7, r0, r3
 8000440:	4095      	lsls	r5, r2
 8000442:	fa01 f002 	lsl.w	r0, r1, r2
 8000446:	fa21 f303 	lsr.w	r3, r1, r3
 800044a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800044e:	4338      	orrs	r0, r7
 8000450:	0c01      	lsrs	r1, r0, #16
 8000452:	fbb3 f7fe 	udiv	r7, r3, lr
 8000456:	fa1f f885 	uxth.w	r8, r5
 800045a:	fb0e 3317 	mls	r3, lr, r7, r3
 800045e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000462:	fb07 f308 	mul.w	r3, r7, r8
 8000466:	428b      	cmp	r3, r1
 8000468:	fa04 f402 	lsl.w	r4, r4, r2
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x256>
 800046e:	1869      	adds	r1, r5, r1
 8000470:	f107 3cff 	add.w	ip, r7, #4294967295
 8000474:	d22f      	bcs.n	80004d6 <__udivmoddi4+0x2ae>
 8000476:	428b      	cmp	r3, r1
 8000478:	d92d      	bls.n	80004d6 <__udivmoddi4+0x2ae>
 800047a:	3f02      	subs	r7, #2
 800047c:	4429      	add	r1, r5
 800047e:	1acb      	subs	r3, r1, r3
 8000480:	b281      	uxth	r1, r0
 8000482:	fbb3 f0fe 	udiv	r0, r3, lr
 8000486:	fb0e 3310 	mls	r3, lr, r0, r3
 800048a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048e:	fb00 f308 	mul.w	r3, r0, r8
 8000492:	428b      	cmp	r3, r1
 8000494:	d907      	bls.n	80004a6 <__udivmoddi4+0x27e>
 8000496:	1869      	adds	r1, r5, r1
 8000498:	f100 3cff 	add.w	ip, r0, #4294967295
 800049c:	d217      	bcs.n	80004ce <__udivmoddi4+0x2a6>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d915      	bls.n	80004ce <__udivmoddi4+0x2a6>
 80004a2:	3802      	subs	r0, #2
 80004a4:	4429      	add	r1, r5
 80004a6:	1ac9      	subs	r1, r1, r3
 80004a8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004ac:	e73b      	b.n	8000326 <__udivmoddi4+0xfe>
 80004ae:	4637      	mov	r7, r6
 80004b0:	4630      	mov	r0, r6
 80004b2:	e709      	b.n	80002c8 <__udivmoddi4+0xa0>
 80004b4:	4607      	mov	r7, r0
 80004b6:	e6e7      	b.n	8000288 <__udivmoddi4+0x60>
 80004b8:	4618      	mov	r0, r3
 80004ba:	e6fb      	b.n	80002b4 <__udivmoddi4+0x8c>
 80004bc:	4541      	cmp	r1, r8
 80004be:	d2ab      	bcs.n	8000418 <__udivmoddi4+0x1f0>
 80004c0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004c4:	eb69 020e 	sbc.w	r2, r9, lr
 80004c8:	3801      	subs	r0, #1
 80004ca:	4613      	mov	r3, r2
 80004cc:	e7a4      	b.n	8000418 <__udivmoddi4+0x1f0>
 80004ce:	4660      	mov	r0, ip
 80004d0:	e7e9      	b.n	80004a6 <__udivmoddi4+0x27e>
 80004d2:	4618      	mov	r0, r3
 80004d4:	e795      	b.n	8000402 <__udivmoddi4+0x1da>
 80004d6:	4667      	mov	r7, ip
 80004d8:	e7d1      	b.n	800047e <__udivmoddi4+0x256>
 80004da:	4681      	mov	r9, r0
 80004dc:	e77c      	b.n	80003d8 <__udivmoddi4+0x1b0>
 80004de:	3802      	subs	r0, #2
 80004e0:	442c      	add	r4, r5
 80004e2:	e747      	b.n	8000374 <__udivmoddi4+0x14c>
 80004e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e8:	442b      	add	r3, r5
 80004ea:	e72f      	b.n	800034c <__udivmoddi4+0x124>
 80004ec:	4638      	mov	r0, r7
 80004ee:	e708      	b.n	8000302 <__udivmoddi4+0xda>
 80004f0:	4637      	mov	r7, r6
 80004f2:	e6e9      	b.n	80002c8 <__udivmoddi4+0xa0>

080004f4 <__aeabi_idiv0>:
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop

080004f8 <init_LCD>:
#include "Display_LCD.h"
#include "main.h"


void init_LCD(void)
	{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
	init_modo_4bit();//lavorer� con solo 4 bit dati
 80004fc:	f000 f808 	bl	8000510 <init_modo_4bit>
	SetLCD ();       // pulizia iniziale
 8000500:	f000 f84a 	bl	8000598 <SetLCD>
	go_xy(0,0) ;
 8000504:	2100      	movs	r1, #0
 8000506:	2000      	movs	r0, #0
 8000508:	f000 f95b 	bl	80007c2 <go_xy>
	}
 800050c:	bf00      	nop
 800050e:	bd80      	pop	{r7, pc}

08000510 <init_modo_4bit>:
 * 2 di controllo RS e EN   con clock
 * 4 di dati D4,D5,D6,D7
 *
 */
void init_modo_4bit(void)
	{
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
	HAL_Delay(50);
 8000514:	2032      	movs	r0, #50	; 0x32
 8000516:	f001 f8eb 	bl	80016f0 <HAL_Delay>
    //0011xxxx
	HAL_GPIO_WritePin(PIN_D7_GPIO_Port,PIN_D7_Pin,GPIO_PIN_RESET);
 800051a:	2200      	movs	r2, #0
 800051c:	2120      	movs	r1, #32
 800051e:	481b      	ldr	r0, [pc, #108]	; (800058c <init_modo_4bit+0x7c>)
 8000520:	f001 fbe4 	bl	8001cec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PIN_D6_GPIO_Port,PIN_D6_Pin,GPIO_PIN_RESET);
 8000524:	2200      	movs	r2, #0
 8000526:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800052a:	4819      	ldr	r0, [pc, #100]	; (8000590 <init_modo_4bit+0x80>)
 800052c:	f001 fbde 	bl	8001cec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PIN_D5_GPIO_Port,PIN_D5_Pin,GPIO_PIN_SET);
 8000530:	2201      	movs	r2, #1
 8000532:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000536:	4816      	ldr	r0, [pc, #88]	; (8000590 <init_modo_4bit+0x80>)
 8000538:	f001 fbd8 	bl	8001cec <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PIN_D4_GPIO_Port,PIN_D4_Pin,GPIO_PIN_SET);
 800053c:	2201      	movs	r2, #1
 800053e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000542:	4814      	ldr	r0, [pc, #80]	; (8000594 <init_modo_4bit+0x84>)
 8000544:	f001 fbd2 	bl	8001cec <HAL_GPIO_WritePin>
    //spedizione del dato 0x33 attraveso 2 nibble 0x03 e 0x03
	LcdStrobe();
 8000548:	f000 f852 	bl	80005f0 <LcdStrobe>
	HAL_Delay(10);          //questi ritardi possono diminuire
 800054c:	200a      	movs	r0, #10
 800054e:	f001 f8cf 	bl	80016f0 <HAL_Delay>
	LcdStrobe();
 8000552:	f000 f84d 	bl	80005f0 <LcdStrobe>
	HAL_Delay(10);
 8000556:	200a      	movs	r0, #10
 8000558:	f001 f8ca 	bl	80016f0 <HAL_Delay>
	//spedizione del dato 0x32 attraveso 2 nibble 0x03 e 0x02
	LcdStrobe();
 800055c:	f000 f848 	bl	80005f0 <LcdStrobe>
	HAL_Delay(10);
 8000560:	200a      	movs	r0, #10
 8000562:	f001 f8c5 	bl	80016f0 <HAL_Delay>
    //0010xxxx
	HAL_GPIO_WritePin(PIN_D4_GPIO_Port,PIN_D4_Pin,GPIO_PIN_RESET);
 8000566:	2200      	movs	r2, #0
 8000568:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800056c:	4809      	ldr	r0, [pc, #36]	; (8000594 <init_modo_4bit+0x84>)
 800056e:	f001 fbbd 	bl	8001cec <HAL_GPIO_WritePin>
	LcdStrobe();
 8000572:	f000 f83d 	bl	80005f0 <LcdStrobe>
	HAL_Delay(10);
 8000576:	200a      	movs	r0, #10
 8000578:	f001 f8ba 	bl	80016f0 <HAL_Delay>
	HAL_GPIO_WritePin(PIN_D5_GPIO_Port,PIN_D5_Pin,GPIO_PIN_RESET);
 800057c:	2200      	movs	r2, #0
 800057e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000582:	4803      	ldr	r0, [pc, #12]	; (8000590 <init_modo_4bit+0x80>)
 8000584:	f001 fbb2 	bl	8001cec <HAL_GPIO_WritePin>
	//il display ha acquisito la modalit� 4 bit;
	}
 8000588:	bf00      	nop
 800058a:	bd80      	pop	{r7, pc}
 800058c:	40020800 	.word	0x40020800
 8000590:	40020000 	.word	0x40020000
 8000594:	40020400 	.word	0x40020400

08000598 <SetLCD>:

void SetLCD (void)
 	 {
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0
	//Initializza LCD  vedi DisplayTech 204_a_serie.pdf pag 5
	HAL_Delay(10);
 800059c:	200a      	movs	r0, #10
 800059e:	f001 f8a7 	bl	80016f0 <HAL_Delay>
	lcd_cmd(0x28); //0010 1000 Function Set:  4 bit, 2 linee, 5x7
 80005a2:	2028      	movs	r0, #40	; 0x28
 80005a4:	f000 f840 	bl	8000628 <lcd_cmd>

	HAL_Delay(10);
 80005a8:	200a      	movs	r0, #10
 80005aa:	f001 f8a1 	bl	80016f0 <HAL_Delay>
	lcd_cmd(0xC);  //0000 1100  Display On, Cursor Off, No Cursor Blink
 80005ae:	200c      	movs	r0, #12
 80005b0:	f000 f83a 	bl	8000628 <lcd_cmd>

	HAL_Delay(10);
 80005b4:	200a      	movs	r0, #10
 80005b6:	f001 f89b 	bl	80016f0 <HAL_Delay>
	lcd_cmd(0x6);  //0000 0110 Entry Mode  cursore avanti
 80005ba:	2006      	movs	r0, #6
 80005bc:	f000 f834 	bl	8000628 <lcd_cmd>

	HAL_Delay(10);
 80005c0:	200a      	movs	r0, #10
 80005c2:	f001 f895 	bl	80016f0 <HAL_Delay>
	lcd_cmd(0x80); //Initialize DDRAM address to zero
 80005c6:	2080      	movs	r0, #128	; 0x80
 80005c8:	f000 f82e 	bl	8000628 <lcd_cmd>

	HAL_Delay(10);
 80005cc:	200a      	movs	r0, #10
 80005ce:	f001 f88f 	bl	80016f0 <HAL_Delay>
	lcd_cmd(0x1);  //0000 0001 Display Clear
 80005d2:	2001      	movs	r0, #1
 80005d4:	f000 f828 	bl	8000628 <lcd_cmd>

	HAL_Delay(10);
 80005d8:	200a      	movs	r0, #10
 80005da:	f001 f889 	bl	80016f0 <HAL_Delay>
	lcd_cmd(0x2);  //0000 0010 prima posizione
 80005de:	2002      	movs	r0, #2
 80005e0:	f000 f822 	bl	8000628 <lcd_cmd>

	HAL_Delay(20); //perchè sia chiaro che sto partendo/ripartendo
 80005e4:	2014      	movs	r0, #20
 80005e6:	f001 f883 	bl	80016f0 <HAL_Delay>
 }
 80005ea:	bf00      	nop
 80005ec:	bd80      	pop	{r7, pc}
	...

080005f0 <LcdStrobe>:




void LcdStrobe(void)
	{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
	uint8_t i;
	HAL_GPIO_WritePin(PIN_EN_GPIO_Port,PIN_EN_Pin,GPIO_PIN_SET);
 80005f6:	2201      	movs	r2, #1
 80005f8:	2140      	movs	r1, #64	; 0x40
 80005fa:	480a      	ldr	r0, [pc, #40]	; (8000624 <LcdStrobe+0x34>)
 80005fc:	f001 fb76 	bl	8001cec <HAL_GPIO_WritePin>
	for (i=0;i < CICLI_ATTESA_PER_LCD;i++);
 8000600:	2300      	movs	r3, #0
 8000602:	71fb      	strb	r3, [r7, #7]
 8000604:	e002      	b.n	800060c <LcdStrobe+0x1c>
 8000606:	79fb      	ldrb	r3, [r7, #7]
 8000608:	3301      	adds	r3, #1
 800060a:	71fb      	strb	r3, [r7, #7]
 800060c:	79fb      	ldrb	r3, [r7, #7]
 800060e:	2b09      	cmp	r3, #9
 8000610:	d9f9      	bls.n	8000606 <LcdStrobe+0x16>
	HAL_GPIO_WritePin(PIN_EN_GPIO_Port,PIN_EN_Pin,GPIO_PIN_RESET);
 8000612:	2200      	movs	r2, #0
 8000614:	2140      	movs	r1, #64	; 0x40
 8000616:	4803      	ldr	r0, [pc, #12]	; (8000624 <LcdStrobe+0x34>)
 8000618:	f001 fb68 	bl	8001cec <HAL_GPIO_WritePin>
	}
 800061c:	bf00      	nop
 800061e:	3708      	adds	r7, #8
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	40020800 	.word	0x40020800

08000628 <lcd_cmd>:

void lcd_cmd(uint8_t c)
	{
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af00      	add	r7, sp, #0
 800062e:	4603      	mov	r3, r0
 8000630:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(2);
 8000632:	2002      	movs	r0, #2
 8000634:	f001 f85c 	bl	80016f0 <HAL_Delay>
	//HAL_Delay(0);
	HAL_GPIO_WritePin(PIN_RS_GPIO_Port,PIN_RS_Pin,GPIO_PIN_RESET);
 8000638:	2200      	movs	r2, #0
 800063a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800063e:	4805      	ldr	r0, [pc, #20]	; (8000654 <lcd_cmd+0x2c>)
 8000640:	f001 fb54 	bl	8001cec <HAL_GPIO_WritePin>
	CodeOut(c);
 8000644:	79fb      	ldrb	r3, [r7, #7]
 8000646:	4618      	mov	r0, r3
 8000648:	f000 f806 	bl	8000658 <CodeOut>
	}
 800064c:	bf00      	nop
 800064e:	3708      	adds	r7, #8
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	40020800 	.word	0x40020800

08000658 <CodeOut>:

void CodeOut(uint8_t c)
	{
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0
 800065e:	4603      	mov	r3, r0
 8000660:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(PIN_D7_GPIO_Port,PIN_D7_Pin,GPIO_PIN_RESET);
 8000662:	2200      	movs	r2, #0
 8000664:	2120      	movs	r1, #32
 8000666:	4850      	ldr	r0, [pc, #320]	; (80007a8 <CodeOut+0x150>)
 8000668:	f001 fb40 	bl	8001cec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PIN_D6_GPIO_Port,PIN_D6_Pin,GPIO_PIN_RESET);
 800066c:	2200      	movs	r2, #0
 800066e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000672:	484e      	ldr	r0, [pc, #312]	; (80007ac <CodeOut+0x154>)
 8000674:	f001 fb3a 	bl	8001cec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PIN_D5_GPIO_Port,PIN_D5_Pin,GPIO_PIN_RESET);
 8000678:	2200      	movs	r2, #0
 800067a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800067e:	484b      	ldr	r0, [pc, #300]	; (80007ac <CodeOut+0x154>)
 8000680:	f001 fb34 	bl	8001cec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PIN_D4_GPIO_Port,PIN_D4_Pin,GPIO_PIN_RESET);
 8000684:	2200      	movs	r2, #0
 8000686:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800068a:	4849      	ldr	r0, [pc, #292]	; (80007b0 <CodeOut+0x158>)
 800068c:	f001 fb2e 	bl	8001cec <HAL_GPIO_WritePin>

	if(c&0x80)
 8000690:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000694:	2b00      	cmp	r3, #0
 8000696:	da04      	bge.n	80006a2 <CodeOut+0x4a>
		HAL_GPIO_WritePin(PIN_D7_GPIO_Port,PIN_D7_Pin,GPIO_PIN_SET);
 8000698:	2201      	movs	r2, #1
 800069a:	2120      	movs	r1, #32
 800069c:	4842      	ldr	r0, [pc, #264]	; (80007a8 <CodeOut+0x150>)
 800069e:	f001 fb25 	bl	8001cec <HAL_GPIO_WritePin>
	if(c&0x40)
 80006a2:	79fb      	ldrb	r3, [r7, #7]
 80006a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d005      	beq.n	80006b8 <CodeOut+0x60>
		HAL_GPIO_WritePin(PIN_D6_GPIO_Port,PIN_D6_Pin,GPIO_PIN_SET);
 80006ac:	2201      	movs	r2, #1
 80006ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006b2:	483e      	ldr	r0, [pc, #248]	; (80007ac <CodeOut+0x154>)
 80006b4:	f001 fb1a 	bl	8001cec <HAL_GPIO_WritePin>
	if(c&0x20)
 80006b8:	79fb      	ldrb	r3, [r7, #7]
 80006ba:	f003 0320 	and.w	r3, r3, #32
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d005      	beq.n	80006ce <CodeOut+0x76>
		HAL_GPIO_WritePin(PIN_D5_GPIO_Port,PIN_D5_Pin,GPIO_PIN_SET);
 80006c2:	2201      	movs	r2, #1
 80006c4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006c8:	4838      	ldr	r0, [pc, #224]	; (80007ac <CodeOut+0x154>)
 80006ca:	f001 fb0f 	bl	8001cec <HAL_GPIO_WritePin>
	if(c&0x10)
 80006ce:	79fb      	ldrb	r3, [r7, #7]
 80006d0:	f003 0310 	and.w	r3, r3, #16
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d005      	beq.n	80006e4 <CodeOut+0x8c>
		HAL_GPIO_WritePin(PIN_D4_GPIO_Port,PIN_D4_Pin,GPIO_PIN_SET);
 80006d8:	2201      	movs	r2, #1
 80006da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006de:	4834      	ldr	r0, [pc, #208]	; (80007b0 <CodeOut+0x158>)
 80006e0:	f001 fb04 	bl	8001cec <HAL_GPIO_WritePin>
	LcdStrobe();
 80006e4:	f7ff ff84 	bl	80005f0 <LcdStrobe>

	HAL_GPIO_WritePin(PIN_D7_GPIO_Port,PIN_D7_Pin,GPIO_PIN_RESET);
 80006e8:	2200      	movs	r2, #0
 80006ea:	2120      	movs	r1, #32
 80006ec:	482e      	ldr	r0, [pc, #184]	; (80007a8 <CodeOut+0x150>)
 80006ee:	f001 fafd 	bl	8001cec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PIN_D6_GPIO_Port,PIN_D6_Pin,GPIO_PIN_RESET);
 80006f2:	2200      	movs	r2, #0
 80006f4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006f8:	482c      	ldr	r0, [pc, #176]	; (80007ac <CodeOut+0x154>)
 80006fa:	f001 faf7 	bl	8001cec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PIN_D5_GPIO_Port,PIN_D5_Pin,GPIO_PIN_RESET);
 80006fe:	2200      	movs	r2, #0
 8000700:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000704:	4829      	ldr	r0, [pc, #164]	; (80007ac <CodeOut+0x154>)
 8000706:	f001 faf1 	bl	8001cec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PIN_D4_GPIO_Port,PIN_D4_Pin,GPIO_PIN_RESET);
 800070a:	2200      	movs	r2, #0
 800070c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000710:	4827      	ldr	r0, [pc, #156]	; (80007b0 <CodeOut+0x158>)
 8000712:	f001 faeb 	bl	8001cec <HAL_GPIO_WritePin>

	if(c&0x8)
 8000716:	79fb      	ldrb	r3, [r7, #7]
 8000718:	f003 0308 	and.w	r3, r3, #8
 800071c:	2b00      	cmp	r3, #0
 800071e:	d004      	beq.n	800072a <CodeOut+0xd2>
		HAL_GPIO_WritePin(PIN_D7_GPIO_Port,PIN_D7_Pin,GPIO_PIN_SET);
 8000720:	2201      	movs	r2, #1
 8000722:	2120      	movs	r1, #32
 8000724:	4820      	ldr	r0, [pc, #128]	; (80007a8 <CodeOut+0x150>)
 8000726:	f001 fae1 	bl	8001cec <HAL_GPIO_WritePin>
	if(c&0x4)
 800072a:	79fb      	ldrb	r3, [r7, #7]
 800072c:	f003 0304 	and.w	r3, r3, #4
 8000730:	2b00      	cmp	r3, #0
 8000732:	d005      	beq.n	8000740 <CodeOut+0xe8>
		HAL_GPIO_WritePin(PIN_D6_GPIO_Port,PIN_D6_Pin,GPIO_PIN_SET);
 8000734:	2201      	movs	r2, #1
 8000736:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800073a:	481c      	ldr	r0, [pc, #112]	; (80007ac <CodeOut+0x154>)
 800073c:	f001 fad6 	bl	8001cec <HAL_GPIO_WritePin>
	if(c&0x2)
 8000740:	79fb      	ldrb	r3, [r7, #7]
 8000742:	f003 0302 	and.w	r3, r3, #2
 8000746:	2b00      	cmp	r3, #0
 8000748:	d005      	beq.n	8000756 <CodeOut+0xfe>
		HAL_GPIO_WritePin(PIN_D5_GPIO_Port,PIN_D5_Pin,GPIO_PIN_SET);
 800074a:	2201      	movs	r2, #1
 800074c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000750:	4816      	ldr	r0, [pc, #88]	; (80007ac <CodeOut+0x154>)
 8000752:	f001 facb 	bl	8001cec <HAL_GPIO_WritePin>
	if(c&0x1)
 8000756:	79fb      	ldrb	r3, [r7, #7]
 8000758:	f003 0301 	and.w	r3, r3, #1
 800075c:	2b00      	cmp	r3, #0
 800075e:	d005      	beq.n	800076c <CodeOut+0x114>
		HAL_GPIO_WritePin(PIN_D4_GPIO_Port,PIN_D4_Pin,GPIO_PIN_SET);
 8000760:	2201      	movs	r2, #1
 8000762:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000766:	4812      	ldr	r0, [pc, #72]	; (80007b0 <CodeOut+0x158>)
 8000768:	f001 fac0 	bl	8001cec <HAL_GPIO_WritePin>
	LcdStrobe();
 800076c:	f7ff ff40 	bl	80005f0 <LcdStrobe>

	HAL_GPIO_WritePin(PIN_D7_GPIO_Port,PIN_D7_Pin,GPIO_PIN_RESET);
 8000770:	2200      	movs	r2, #0
 8000772:	2120      	movs	r1, #32
 8000774:	480c      	ldr	r0, [pc, #48]	; (80007a8 <CodeOut+0x150>)
 8000776:	f001 fab9 	bl	8001cec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PIN_D6_GPIO_Port,PIN_D6_Pin,GPIO_PIN_RESET);
 800077a:	2200      	movs	r2, #0
 800077c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000780:	480a      	ldr	r0, [pc, #40]	; (80007ac <CodeOut+0x154>)
 8000782:	f001 fab3 	bl	8001cec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PIN_D5_GPIO_Port,PIN_D5_Pin,GPIO_PIN_RESET);
 8000786:	2200      	movs	r2, #0
 8000788:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800078c:	4807      	ldr	r0, [pc, #28]	; (80007ac <CodeOut+0x154>)
 800078e:	f001 faad 	bl	8001cec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PIN_D4_GPIO_Port,PIN_D4_Pin,GPIO_PIN_RESET);
 8000792:	2200      	movs	r2, #0
 8000794:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000798:	4805      	ldr	r0, [pc, #20]	; (80007b0 <CodeOut+0x158>)
 800079a:	f001 faa7 	bl	8001cec <HAL_GPIO_WritePin>
	}
 800079e:	bf00      	nop
 80007a0:	3708      	adds	r7, #8
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	40020800 	.word	0x40020800
 80007ac:	40020000 	.word	0x40020000
 80007b0:	40020400 	.word	0x40020400

080007b4 <PulisciSchermo>:


void PulisciSchermo(void)   //testata
  	{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
   	lcd_cmd(0x1);
 80007b8:	2001      	movs	r0, #1
 80007ba:	f7ff ff35 	bl	8000628 <lcd_cmd>
  	}
 80007be:	bf00      	nop
 80007c0:	bd80      	pop	{r7, pc}

080007c2 <go_xy>:
	StampaStringaSuLCD(Colonna,Riga,str);
	}

/*sposta il cursore su x=colonna, y=riga */
void go_xy(char x,char y)
	{
 80007c2:	b580      	push	{r7, lr}
 80007c4:	b084      	sub	sp, #16
 80007c6:	af00      	add	r7, sp, #0
 80007c8:	4603      	mov	r3, r0
 80007ca:	460a      	mov	r2, r1
 80007cc:	71fb      	strb	r3, [r7, #7]
 80007ce:	4613      	mov	r3, r2
 80007d0:	71bb      	strb	r3, [r7, #6]
	unsigned char base=0;
 80007d2:	2300      	movs	r3, #0
 80007d4:	73fb      	strb	r3, [r7, #15]
	switch(y)
 80007d6:	79bb      	ldrb	r3, [r7, #6]
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d002      	beq.n	80007e2 <go_xy+0x20>
 80007dc:	2b01      	cmp	r3, #1
 80007de:	d003      	beq.n	80007e8 <go_xy+0x26>
 80007e0:	e005      	b.n	80007ee <go_xy+0x2c>
    	{
    	case 0:
    		base=MIN_PRIMA_RIGA;
 80007e2:	2300      	movs	r3, #0
 80007e4:	73fb      	strb	r3, [r7, #15]
    	break;
 80007e6:	e002      	b.n	80007ee <go_xy+0x2c>
    	case 1:
    		base=MIN_SECONDA_RIGA;
 80007e8:	2340      	movs	r3, #64	; 0x40
 80007ea:	73fb      	strb	r3, [r7, #15]
    	break;
 80007ec:	bf00      	nop
    	}
    x+=base;
 80007ee:	79fa      	ldrb	r2, [r7, #7]
 80007f0:	7bfb      	ldrb	r3, [r7, #15]
 80007f2:	4413      	add	r3, r2
 80007f4:	71fb      	strb	r3, [r7, #7]
    lcd_cmd(x|0X80);
 80007f6:	79fb      	ldrb	r3, [r7, #7]
 80007f8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80007fc:	b2db      	uxtb	r3, r3
 80007fe:	4618      	mov	r0, r3
 8000800:	f7ff ff12 	bl	8000628 <lcd_cmd>
    }
 8000804:	bf00      	nop
 8000806:	3710      	adds	r7, #16
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}

0800080c <StampaStringaSuLCD>:
 * Stampa una stringa nella posizione colonna, riga (la stringa non deve oltrepassare
 * il bordo
 *
 */
void StampaStringaSuLCD(uint8_t colonna,uint8_t riga, char *p)   //riga e colonna poi stringa
  	{
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0
 8000812:	4603      	mov	r3, r0
 8000814:	603a      	str	r2, [r7, #0]
 8000816:	71fb      	strb	r3, [r7, #7]
 8000818:	460b      	mov	r3, r1
 800081a:	71bb      	strb	r3, [r7, #6]
   	go_xy(colonna,riga) ;
 800081c:	79ba      	ldrb	r2, [r7, #6]
 800081e:	79fb      	ldrb	r3, [r7, #7]
 8000820:	4611      	mov	r1, r2
 8000822:	4618      	mov	r0, r3
 8000824:	f7ff ffcd 	bl	80007c2 <go_xy>
   	lcd_puts(p);
 8000828:	6838      	ldr	r0, [r7, #0]
 800082a:	f000 f804 	bl	8000836 <lcd_puts>
  	}
 800082e:	bf00      	nop
 8000830:	3708      	adds	r7, #8
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}

08000836 <lcd_puts>:
	lcd_data(c);
	}

/* stampa il carattere *s*/
void lcd_puts(char * s)
	{
 8000836:	b580      	push	{r7, lr}
 8000838:	b082      	sub	sp, #8
 800083a:	af00      	add	r7, sp, #0
 800083c:	6078      	str	r0, [r7, #4]
	while(*s)
 800083e:	e006      	b.n	800084e <lcd_puts+0x18>
		lcd_data(*s++);
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	1c5a      	adds	r2, r3, #1
 8000844:	607a      	str	r2, [r7, #4]
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	4618      	mov	r0, r3
 800084a:	f000 f809 	bl	8000860 <lcd_data>
	while(*s)
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	781b      	ldrb	r3, [r3, #0]
 8000852:	2b00      	cmp	r3, #0
 8000854:	d1f4      	bne.n	8000840 <lcd_puts+0xa>
	}
 8000856:	bf00      	nop
 8000858:	3708      	adds	r7, #8
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
	...

08000860 <lcd_data>:

/* Invia un carattere all'LCD */
void lcd_data(unsigned char c)
	{
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0
 8000866:	4603      	mov	r3, r0
 8000868:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(0);
 800086a:	2000      	movs	r0, #0
 800086c:	f000 ff40 	bl	80016f0 <HAL_Delay>
	HAL_GPIO_WritePin(PIN_RS_GPIO_Port,PIN_RS_Pin,GPIO_PIN_SET);
 8000870:	2201      	movs	r2, #1
 8000872:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000876:	4808      	ldr	r0, [pc, #32]	; (8000898 <lcd_data+0x38>)
 8000878:	f001 fa38 	bl	8001cec <HAL_GPIO_WritePin>
	CodeOut(c);
 800087c:	79fb      	ldrb	r3, [r7, #7]
 800087e:	4618      	mov	r0, r3
 8000880:	f7ff feea 	bl	8000658 <CodeOut>
	HAL_GPIO_WritePin(PIN_RS_GPIO_Port,PIN_RS_Pin,GPIO_PIN_RESET);
 8000884:	2200      	movs	r2, #0
 8000886:	f44f 7180 	mov.w	r1, #256	; 0x100
 800088a:	4803      	ldr	r0, [pc, #12]	; (8000898 <lcd_data+0x38>)
 800088c:	f001 fa2e 	bl	8001cec <HAL_GPIO_WritePin>
	}
 8000890:	bf00      	nop
 8000892:	3708      	adds	r7, #8
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	40020800 	.word	0x40020800

0800089c <AttivaPinKeyb4x4>:


unsigned char  TastoPremuto=0;

void AttivaPinKeyb4x4(uint8_t index)
	{
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	4603      	mov	r3, r0
 80008a4:	71fb      	strb	r3, [r7, #7]
	/* provoco la rotazione del bit '0'*/

	HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin,GPIO_PIN_SET);
 80008a6:	2201      	movs	r2, #1
 80008a8:	2101      	movs	r1, #1
 80008aa:	481e      	ldr	r0, [pc, #120]	; (8000924 <AttivaPinKeyb4x4+0x88>)
 80008ac:	f001 fa1e 	bl	8001cec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin,GPIO_PIN_SET);
 80008b0:	2201      	movs	r2, #1
 80008b2:	2102      	movs	r1, #2
 80008b4:	481b      	ldr	r0, [pc, #108]	; (8000924 <AttivaPinKeyb4x4+0x88>)
 80008b6:	f001 fa19 	bl	8001cec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R3_GPIO_Port, R3_Pin,GPIO_PIN_SET);
 80008ba:	2201      	movs	r2, #1
 80008bc:	2101      	movs	r1, #1
 80008be:	481a      	ldr	r0, [pc, #104]	; (8000928 <AttivaPinKeyb4x4+0x8c>)
 80008c0:	f001 fa14 	bl	8001cec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R4_GPIO_Port, R4_Pin,GPIO_PIN_SET);
 80008c4:	2201      	movs	r2, #1
 80008c6:	2110      	movs	r1, #16
 80008c8:	4818      	ldr	r0, [pc, #96]	; (800092c <AttivaPinKeyb4x4+0x90>)
 80008ca:	f001 fa0f 	bl	8001cec <HAL_GPIO_WritePin>
	switch(index)
 80008ce:	79fb      	ldrb	r3, [r7, #7]
 80008d0:	2b03      	cmp	r3, #3
 80008d2:	d823      	bhi.n	800091c <AttivaPinKeyb4x4+0x80>
 80008d4:	a201      	add	r2, pc, #4	; (adr r2, 80008dc <AttivaPinKeyb4x4+0x40>)
 80008d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008da:	bf00      	nop
 80008dc:	080008ed 	.word	0x080008ed
 80008e0:	080008f9 	.word	0x080008f9
 80008e4:	08000905 	.word	0x08000905
 80008e8:	08000911 	.word	0x08000911
		{
		case 0:
			HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin,GPIO_PIN_RESET);
 80008ec:	2200      	movs	r2, #0
 80008ee:	2101      	movs	r1, #1
 80008f0:	480c      	ldr	r0, [pc, #48]	; (8000924 <AttivaPinKeyb4x4+0x88>)
 80008f2:	f001 f9fb 	bl	8001cec <HAL_GPIO_WritePin>
		break;
 80008f6:	e011      	b.n	800091c <AttivaPinKeyb4x4+0x80>
		case 1:
			HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin,GPIO_PIN_RESET);
 80008f8:	2200      	movs	r2, #0
 80008fa:	2102      	movs	r1, #2
 80008fc:	4809      	ldr	r0, [pc, #36]	; (8000924 <AttivaPinKeyb4x4+0x88>)
 80008fe:	f001 f9f5 	bl	8001cec <HAL_GPIO_WritePin>
		break;
 8000902:	e00b      	b.n	800091c <AttivaPinKeyb4x4+0x80>
		case 2:
			HAL_GPIO_WritePin(R3_GPIO_Port, R3_Pin,GPIO_PIN_RESET);
 8000904:	2200      	movs	r2, #0
 8000906:	2101      	movs	r1, #1
 8000908:	4807      	ldr	r0, [pc, #28]	; (8000928 <AttivaPinKeyb4x4+0x8c>)
 800090a:	f001 f9ef 	bl	8001cec <HAL_GPIO_WritePin>
		break;
 800090e:	e005      	b.n	800091c <AttivaPinKeyb4x4+0x80>
		case 3:
			HAL_GPIO_WritePin(R4_GPIO_Port, R4_Pin,GPIO_PIN_RESET);
 8000910:	2200      	movs	r2, #0
 8000912:	2110      	movs	r1, #16
 8000914:	4805      	ldr	r0, [pc, #20]	; (800092c <AttivaPinKeyb4x4+0x90>)
 8000916:	f001 f9e9 	bl	8001cec <HAL_GPIO_WritePin>
		break;
 800091a:	bf00      	nop
		}

	}
 800091c:	bf00      	nop
 800091e:	3708      	adds	r7, #8
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	40020800 	.word	0x40020800
 8000928:	40020400 	.word	0x40020400
 800092c:	40020000 	.word	0x40020000

08000930 <StartKeyb4x4>:

void StartKeyb4x4(void)
	{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
    CicloKeyb4x4Attivo=1;
 8000934:	4b06      	ldr	r3, [pc, #24]	; (8000950 <StartKeyb4x4+0x20>)
 8000936:	2201      	movs	r2, #1
 8000938:	701a      	strb	r2, [r3, #0]
    DurataValoreBasso=DURATA_VALORE_BASSO;
 800093a:	4b06      	ldr	r3, [pc, #24]	; (8000954 <StartKeyb4x4+0x24>)
 800093c:	220a      	movs	r2, #10
 800093e:	801a      	strh	r2, [r3, #0]
    AttivaPinKeyb4x4(IndiceCicloKeyb4x4);
 8000940:	4b05      	ldr	r3, [pc, #20]	; (8000958 <StartKeyb4x4+0x28>)
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	4618      	mov	r0, r3
 8000946:	f7ff ffa9 	bl	800089c <AttivaPinKeyb4x4>
	}
 800094a:	bf00      	nop
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	20000031 	.word	0x20000031
 8000954:	20000042 	.word	0x20000042
 8000958:	20000030 	.word	0x20000030

0800095c <GestioneRigheMatriceKeyb4x4>:

/*
 * funzione utilizzata per i tempi di antirimbalzo e per la rotazione dello '0' sulle varie righe
 */
void GestioneRigheMatriceKeyb4x4(void)
	{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0

	if(TempoAR_Keyb4x4)   //se è attivo un tempo antirimbalzo
 8000960:	4b1c      	ldr	r3, [pc, #112]	; (80009d4 <GestioneRigheMatriceKeyb4x4+0x78>)
 8000962:	881b      	ldrh	r3, [r3, #0]
 8000964:	2b00      	cmp	r3, #0
 8000966:	d00f      	beq.n	8000988 <GestioneRigheMatriceKeyb4x4+0x2c>
		{
		TempoAR_Keyb4x4--;
 8000968:	4b1a      	ldr	r3, [pc, #104]	; (80009d4 <GestioneRigheMatriceKeyb4x4+0x78>)
 800096a:	881b      	ldrh	r3, [r3, #0]
 800096c:	3b01      	subs	r3, #1
 800096e:	b29a      	uxth	r2, r3
 8000970:	4b18      	ldr	r3, [pc, #96]	; (80009d4 <GestioneRigheMatriceKeyb4x4+0x78>)
 8000972:	801a      	strh	r2, [r3, #0]
		if(!TempoAR_Keyb4x4)
 8000974:	4b17      	ldr	r3, [pc, #92]	; (80009d4 <GestioneRigheMatriceKeyb4x4+0x78>)
 8000976:	881b      	ldrh	r3, [r3, #0]
 8000978:	2b00      	cmp	r3, #0
 800097a:	d105      	bne.n	8000988 <GestioneRigheMatriceKeyb4x4+0x2c>
			{
			RiconosciTastoAttivato();
 800097c:	f000 f832 	bl	80009e4 <RiconosciTastoAttivato>
			HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000980:	2017      	movs	r0, #23
 8000982:	f000 fff0 	bl	8001966 <HAL_NVIC_EnableIRQ>
			return;
 8000986:	e024      	b.n	80009d2 <GestioneRigheMatriceKeyb4x4+0x76>
			}
		}

	if(!CicloKeyb4x4Attivo) return;   //se NON devo far ruotare lo '0',esco
 8000988:	4b13      	ldr	r3, [pc, #76]	; (80009d8 <GestioneRigheMatriceKeyb4x4+0x7c>)
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	2b00      	cmp	r3, #0
 800098e:	d01f      	beq.n	80009d0 <GestioneRigheMatriceKeyb4x4+0x74>
	DurataValoreBasso--;
 8000990:	4b12      	ldr	r3, [pc, #72]	; (80009dc <GestioneRigheMatriceKeyb4x4+0x80>)
 8000992:	881b      	ldrh	r3, [r3, #0]
 8000994:	3b01      	subs	r3, #1
 8000996:	b29a      	uxth	r2, r3
 8000998:	4b10      	ldr	r3, [pc, #64]	; (80009dc <GestioneRigheMatriceKeyb4x4+0x80>)
 800099a:	801a      	strh	r2, [r3, #0]
	if(!DurataValoreBasso)
 800099c:	4b0f      	ldr	r3, [pc, #60]	; (80009dc <GestioneRigheMatriceKeyb4x4+0x80>)
 800099e:	881b      	ldrh	r3, [r3, #0]
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d116      	bne.n	80009d2 <GestioneRigheMatriceKeyb4x4+0x76>
		{
		IndiceCicloKeyb4x4++;
 80009a4:	4b0e      	ldr	r3, [pc, #56]	; (80009e0 <GestioneRigheMatriceKeyb4x4+0x84>)
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	3301      	adds	r3, #1
 80009aa:	b2da      	uxtb	r2, r3
 80009ac:	4b0c      	ldr	r3, [pc, #48]	; (80009e0 <GestioneRigheMatriceKeyb4x4+0x84>)
 80009ae:	701a      	strb	r2, [r3, #0]
		if (IndiceCicloKeyb4x4>3)
 80009b0:	4b0b      	ldr	r3, [pc, #44]	; (80009e0 <GestioneRigheMatriceKeyb4x4+0x84>)
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	2b03      	cmp	r3, #3
 80009b6:	d902      	bls.n	80009be <GestioneRigheMatriceKeyb4x4+0x62>
				IndiceCicloKeyb4x4=0;
 80009b8:	4b09      	ldr	r3, [pc, #36]	; (80009e0 <GestioneRigheMatriceKeyb4x4+0x84>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	701a      	strb	r2, [r3, #0]
		AttivaPinKeyb4x4(IndiceCicloKeyb4x4);
 80009be:	4b08      	ldr	r3, [pc, #32]	; (80009e0 <GestioneRigheMatriceKeyb4x4+0x84>)
 80009c0:	781b      	ldrb	r3, [r3, #0]
 80009c2:	4618      	mov	r0, r3
 80009c4:	f7ff ff6a 	bl	800089c <AttivaPinKeyb4x4>
		DurataValoreBasso=DURATA_VALORE_BASSO;
 80009c8:	4b04      	ldr	r3, [pc, #16]	; (80009dc <GestioneRigheMatriceKeyb4x4+0x80>)
 80009ca:	220a      	movs	r2, #10
 80009cc:	801a      	strh	r2, [r3, #0]
 80009ce:	e000      	b.n	80009d2 <GestioneRigheMatriceKeyb4x4+0x76>
	if(!CicloKeyb4x4Attivo) return;   //se NON devo far ruotare lo '0',esco
 80009d0:	bf00      	nop
		}
	}
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	20000040 	.word	0x20000040
 80009d8:	20000031 	.word	0x20000031
 80009dc:	20000042 	.word	0x20000042
 80009e0:	20000030 	.word	0x20000030

080009e4 <RiconosciTastoAttivato>:


void RiconosciTastoAttivato(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
	uint8_t TastoAttivo=0;
 80009ea:	2300      	movs	r3, #0
 80009ec:	71fb      	strb	r3, [r7, #7]
	static uint8_t TastoAttivoPrec=0;
	static int8_t nTasti=0;
	switch(PinAttivato) //riconosco eventuale tasto premuto
 80009ee:	4b4d      	ldr	r3, [pc, #308]	; (8000b24 <RiconosciTastoAttivato+0x140>)
 80009f0:	881b      	ldrh	r3, [r3, #0]
 80009f2:	2b40      	cmp	r3, #64	; 0x40
 80009f4:	d019      	beq.n	8000a2a <RiconosciTastoAttivato+0x46>
 80009f6:	2b40      	cmp	r3, #64	; 0x40
 80009f8:	dc02      	bgt.n	8000a00 <RiconosciTastoAttivato+0x1c>
 80009fa:	2b20      	cmp	r3, #32
 80009fc:	d006      	beq.n	8000a0c <RiconosciTastoAttivato+0x28>
 80009fe:	e049      	b.n	8000a94 <RiconosciTastoAttivato+0xb0>
 8000a00:	2b80      	cmp	r3, #128	; 0x80
 8000a02:	d021      	beq.n	8000a48 <RiconosciTastoAttivato+0x64>
 8000a04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000a08:	d02d      	beq.n	8000a66 <RiconosciTastoAttivato+0x82>
 8000a0a:	e043      	b.n	8000a94 <RiconosciTastoAttivato+0xb0>
		{
		case C1_Pin:
			if(!HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin))
 8000a0c:	2120      	movs	r1, #32
 8000a0e:	4846      	ldr	r0, [pc, #280]	; (8000b28 <RiconosciTastoAttivato+0x144>)
 8000a10:	f001 f954 	bl	8001cbc <HAL_GPIO_ReadPin>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d135      	bne.n	8000a86 <RiconosciTastoAttivato+0xa2>
				TastoAttivo=TastiKeyb4x4[IndiceCicloKeyb4x4][0];
 8000a1a:	4b44      	ldr	r3, [pc, #272]	; (8000b2c <RiconosciTastoAttivato+0x148>)
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	461a      	mov	r2, r3
 8000a20:	4b43      	ldr	r3, [pc, #268]	; (8000b30 <RiconosciTastoAttivato+0x14c>)
 8000a22:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 8000a26:	71fb      	strb	r3, [r7, #7]

		break;
 8000a28:	e02d      	b.n	8000a86 <RiconosciTastoAttivato+0xa2>
		case C2_Pin:
			if(!HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin))
 8000a2a:	2140      	movs	r1, #64	; 0x40
 8000a2c:	4841      	ldr	r0, [pc, #260]	; (8000b34 <RiconosciTastoAttivato+0x150>)
 8000a2e:	f001 f945 	bl	8001cbc <HAL_GPIO_ReadPin>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d128      	bne.n	8000a8a <RiconosciTastoAttivato+0xa6>
				TastoAttivo=TastiKeyb4x4[IndiceCicloKeyb4x4][1];
 8000a38:	4b3c      	ldr	r3, [pc, #240]	; (8000b2c <RiconosciTastoAttivato+0x148>)
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	4a3c      	ldr	r2, [pc, #240]	; (8000b30 <RiconosciTastoAttivato+0x14c>)
 8000a3e:	009b      	lsls	r3, r3, #2
 8000a40:	4413      	add	r3, r2
 8000a42:	785b      	ldrb	r3, [r3, #1]
 8000a44:	71fb      	strb	r3, [r7, #7]
		break;
 8000a46:	e020      	b.n	8000a8a <RiconosciTastoAttivato+0xa6>
		case C3_Pin:
			if(!HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin))
 8000a48:	2180      	movs	r1, #128	; 0x80
 8000a4a:	483b      	ldr	r0, [pc, #236]	; (8000b38 <RiconosciTastoAttivato+0x154>)
 8000a4c:	f001 f936 	bl	8001cbc <HAL_GPIO_ReadPin>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d11b      	bne.n	8000a8e <RiconosciTastoAttivato+0xaa>
				TastoAttivo=TastiKeyb4x4[IndiceCicloKeyb4x4][2];
 8000a56:	4b35      	ldr	r3, [pc, #212]	; (8000b2c <RiconosciTastoAttivato+0x148>)
 8000a58:	781b      	ldrb	r3, [r3, #0]
 8000a5a:	4a35      	ldr	r2, [pc, #212]	; (8000b30 <RiconosciTastoAttivato+0x14c>)
 8000a5c:	009b      	lsls	r3, r3, #2
 8000a5e:	4413      	add	r3, r2
 8000a60:	789b      	ldrb	r3, [r3, #2]
 8000a62:	71fb      	strb	r3, [r7, #7]
		break;
 8000a64:	e013      	b.n	8000a8e <RiconosciTastoAttivato+0xaa>
		case C4_Pin:
			if(!HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin))
 8000a66:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a6a:	482f      	ldr	r0, [pc, #188]	; (8000b28 <RiconosciTastoAttivato+0x144>)
 8000a6c:	f001 f926 	bl	8001cbc <HAL_GPIO_ReadPin>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d10d      	bne.n	8000a92 <RiconosciTastoAttivato+0xae>
				TastoAttivo=TastiKeyb4x4[IndiceCicloKeyb4x4][3];
 8000a76:	4b2d      	ldr	r3, [pc, #180]	; (8000b2c <RiconosciTastoAttivato+0x148>)
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	4a2d      	ldr	r2, [pc, #180]	; (8000b30 <RiconosciTastoAttivato+0x14c>)
 8000a7c:	009b      	lsls	r3, r3, #2
 8000a7e:	4413      	add	r3, r2
 8000a80:	78db      	ldrb	r3, [r3, #3]
 8000a82:	71fb      	strb	r3, [r7, #7]
		break;
 8000a84:	e005      	b.n	8000a92 <RiconosciTastoAttivato+0xae>
		break;
 8000a86:	bf00      	nop
 8000a88:	e004      	b.n	8000a94 <RiconosciTastoAttivato+0xb0>
		break;
 8000a8a:	bf00      	nop
 8000a8c:	e002      	b.n	8000a94 <RiconosciTastoAttivato+0xb0>
		break;
 8000a8e:	bf00      	nop
 8000a90:	e000      	b.n	8000a94 <RiconosciTastoAttivato+0xb0>
		break;
 8000a92:	bf00      	nop
		}

	 if(!TastoAttivo)  //era un rilascio
 8000a94:	79fb      	ldrb	r3, [r7, #7]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d11c      	bne.n	8000ad4 <RiconosciTastoAttivato+0xf0>
	 	{
		if(nTasti)     //
 8000a9a:	4b28      	ldr	r3, [pc, #160]	; (8000b3c <RiconosciTastoAttivato+0x158>)
 8000a9c:	f993 3000 	ldrsb.w	r3, [r3]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d008      	beq.n	8000ab6 <RiconosciTastoAttivato+0xd2>
			nTasti--;
 8000aa4:	4b25      	ldr	r3, [pc, #148]	; (8000b3c <RiconosciTastoAttivato+0x158>)
 8000aa6:	f993 3000 	ldrsb.w	r3, [r3]
 8000aaa:	b2db      	uxtb	r3, r3
 8000aac:	3b01      	subs	r3, #1
 8000aae:	b2db      	uxtb	r3, r3
 8000ab0:	b25a      	sxtb	r2, r3
 8000ab2:	4b22      	ldr	r3, [pc, #136]	; (8000b3c <RiconosciTastoAttivato+0x158>)
 8000ab4:	701a      	strb	r2, [r3, #0]
	 	if(!nTasti)
 8000ab6:	4b21      	ldr	r3, [pc, #132]	; (8000b3c <RiconosciTastoAttivato+0x158>)
 8000ab8:	f993 3000 	ldrsb.w	r3, [r3]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d12c      	bne.n	8000b1a <RiconosciTastoAttivato+0x136>
	 	//Devo verificare che su altre righe vi siano tasti premuti, contarli ...
	 		{
	 		//Verifica che su altre righe vi siano tasti premuti, e li conta (NON SCRITTA)
	 		//nTasti=ContaTastiPremuti();
	 		DurataValoreBasso=DURATA_VALORE_BASSO;
 8000ac0:	4b1f      	ldr	r3, [pc, #124]	; (8000b40 <RiconosciTastoAttivato+0x15c>)
 8000ac2:	220a      	movs	r2, #10
 8000ac4:	801a      	strh	r2, [r3, #0]
	 		CicloKeyb4x4Attivo=1;   // al rilascio, riattivo il ciclo
 8000ac6:	4b1f      	ldr	r3, [pc, #124]	; (8000b44 <RiconosciTastoAttivato+0x160>)
 8000ac8:	2201      	movs	r2, #1
 8000aca:	701a      	strb	r2, [r3, #0]
	 		TastoAttivoPrec=0;
 8000acc:	4b1e      	ldr	r3, [pc, #120]	; (8000b48 <RiconosciTastoAttivato+0x164>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	701a      	strb	r2, [r3, #0]
	 	}//pubblico il tasto primario su una  riga
	 	if(TastoAttivo!=TastoAttivoPrec)   //conteggio di tasti premuti sulla
	 		nTasti++;                      //sulla stessa riga anche diversi dal primario
	 	TastoAttivoPrec=TastoAttivo;       //su questo devo ripensarci bene....
	 	}
	}
 8000ad2:	e022      	b.n	8000b1a <RiconosciTastoAttivato+0x136>
	 	if(!nTasti){
 8000ad4:	4b19      	ldr	r3, [pc, #100]	; (8000b3c <RiconosciTastoAttivato+0x158>)
 8000ad6:	f993 3000 	ldrsb.w	r3, [r3]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d10c      	bne.n	8000af8 <RiconosciTastoAttivato+0x114>
	 		TastoPremuto=TastoAttivo;
 8000ade:	4a1b      	ldr	r2, [pc, #108]	; (8000b4c <RiconosciTastoAttivato+0x168>)
 8000ae0:	79fb      	ldrb	r3, [r7, #7]
 8000ae2:	7013      	strb	r3, [r2, #0]
	 		cursore++;
 8000ae4:	4b1a      	ldr	r3, [pc, #104]	; (8000b50 <RiconosciTastoAttivato+0x16c>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	3301      	adds	r3, #1
 8000aea:	4a19      	ldr	r2, [pc, #100]	; (8000b50 <RiconosciTastoAttivato+0x16c>)
 8000aec:	6013      	str	r3, [r2, #0]
	 		lettera[cursore]=TastoAttivo;
 8000aee:	4b18      	ldr	r3, [pc, #96]	; (8000b50 <RiconosciTastoAttivato+0x16c>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	4918      	ldr	r1, [pc, #96]	; (8000b54 <RiconosciTastoAttivato+0x170>)
 8000af4:	79fa      	ldrb	r2, [r7, #7]
 8000af6:	54ca      	strb	r2, [r1, r3]
	 	if(TastoAttivo!=TastoAttivoPrec)   //conteggio di tasti premuti sulla
 8000af8:	4b13      	ldr	r3, [pc, #76]	; (8000b48 <RiconosciTastoAttivato+0x164>)
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	79fa      	ldrb	r2, [r7, #7]
 8000afe:	429a      	cmp	r2, r3
 8000b00:	d008      	beq.n	8000b14 <RiconosciTastoAttivato+0x130>
	 		nTasti++;                      //sulla stessa riga anche diversi dal primario
 8000b02:	4b0e      	ldr	r3, [pc, #56]	; (8000b3c <RiconosciTastoAttivato+0x158>)
 8000b04:	f993 3000 	ldrsb.w	r3, [r3]
 8000b08:	b2db      	uxtb	r3, r3
 8000b0a:	3301      	adds	r3, #1
 8000b0c:	b2db      	uxtb	r3, r3
 8000b0e:	b25a      	sxtb	r2, r3
 8000b10:	4b0a      	ldr	r3, [pc, #40]	; (8000b3c <RiconosciTastoAttivato+0x158>)
 8000b12:	701a      	strb	r2, [r3, #0]
	 	TastoAttivoPrec=TastoAttivo;       //su questo devo ripensarci bene....
 8000b14:	4a0c      	ldr	r2, [pc, #48]	; (8000b48 <RiconosciTastoAttivato+0x164>)
 8000b16:	79fb      	ldrb	r3, [r7, #7]
 8000b18:	7013      	strb	r3, [r2, #0]
	}
 8000b1a:	bf00      	nop
 8000b1c:	3708      	adds	r7, #8
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	20000044 	.word	0x20000044
 8000b28:	40020000 	.word	0x40020000
 8000b2c:	20000030 	.word	0x20000030
 8000b30:	0800398c 	.word	0x0800398c
 8000b34:	40020400 	.word	0x40020400
 8000b38:	40020800 	.word	0x40020800
 8000b3c:	20000039 	.word	0x20000039
 8000b40:	20000042 	.word	0x20000042
 8000b44:	20000031 	.word	0x20000031
 8000b48:	2000003a 	.word	0x2000003a
 8000b4c:	20000038 	.word	0x20000038
 8000b50:	20000000 	.word	0x20000000
 8000b54:	2000004c 	.word	0x2000004c

08000b58 <GestioneEXTI_Keyb4x4>:


void GestioneEXTI_Keyb4x4(uint16_t GPIO_Pin)
	{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	4603      	mov	r3, r0
 8000b60:	80fb      	strh	r3, [r7, #6]
	CicloKeyb4x4Attivo=0;                 //dichiaro il ciclo di rotazione dello '0'non attivo
 8000b62:	4b08      	ldr	r3, [pc, #32]	; (8000b84 <GestioneEXTI_Keyb4x4+0x2c>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	701a      	strb	r2, [r3, #0]
	HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);  //disabilito interruzioni 10-15
 8000b68:	2017      	movs	r0, #23
 8000b6a:	f000 ff0a 	bl	8001982 <HAL_NVIC_DisableIRQ>
	TempoAR_Keyb4x4=TEMPO_AR_KEYB4x4;     //per un tempo di antirimbalzo
 8000b6e:	4b06      	ldr	r3, [pc, #24]	; (8000b88 <GestioneEXTI_Keyb4x4+0x30>)
 8000b70:	2264      	movs	r2, #100	; 0x64
 8000b72:	801a      	strh	r2, [r3, #0]
	PinAttivato= GPIO_Pin;                //catturo il pin attivato
 8000b74:	4a05      	ldr	r2, [pc, #20]	; (8000b8c <GestioneEXTI_Keyb4x4+0x34>)
 8000b76:	88fb      	ldrh	r3, [r7, #6]
 8000b78:	8013      	strh	r3, [r2, #0]
	}
 8000b7a:	bf00      	nop
 8000b7c:	3708      	adds	r7, #8
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	20000031 	.word	0x20000031
 8000b88:	20000040 	.word	0x20000040
 8000b8c:	20000044 	.word	0x20000044

08000b90 <CheckPassword>:


void CheckPassword(void){
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
	if(strcmp(lettera,"123456")==0){
 8000b94:	4929      	ldr	r1, [pc, #164]	; (8000c3c <CheckPassword+0xac>)
 8000b96:	482a      	ldr	r0, [pc, #168]	; (8000c40 <CheckPassword+0xb0>)
 8000b98:	f7ff fb1c 	bl	80001d4 <strcmp>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d133      	bne.n	8000c0a <CheckPassword+0x7a>
		memset(lettera,0,strlen(lettera));
 8000ba2:	4827      	ldr	r0, [pc, #156]	; (8000c40 <CheckPassword+0xb0>)
 8000ba4:	f7ff fb20 	bl	80001e8 <strlen>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	461a      	mov	r2, r3
 8000bac:	2100      	movs	r1, #0
 8000bae:	4824      	ldr	r0, [pc, #144]	; (8000c40 <CheckPassword+0xb0>)
 8000bb0:	f002 feb4 	bl	800391c <memset>
		cursore=-1;
 8000bb4:	4b23      	ldr	r3, [pc, #140]	; (8000c44 <CheckPassword+0xb4>)
 8000bb6:	f04f 32ff 	mov.w	r2, #4294967295
 8000bba:	601a      	str	r2, [r3, #0]
		if(allarme==0){
 8000bbc:	4b22      	ldr	r3, [pc, #136]	; (8000c48 <CheckPassword+0xb8>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d10d      	bne.n	8000be0 <CheckPassword+0x50>
			allarme=1;
 8000bc4:	4b20      	ldr	r3, [pc, #128]	; (8000c48 <CheckPassword+0xb8>)
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	601a      	str	r2, [r3, #0]
			HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000bca:	2009      	movs	r0, #9
 8000bcc:	f000 fecb 	bl	8001966 <HAL_NVIC_EnableIRQ>
			PulisciSchermo();
 8000bd0:	f7ff fdf0 	bl	80007b4 <PulisciSchermo>
			StampaStringaSuLCD(0, 0, "Alarm on");
 8000bd4:	4a1d      	ldr	r2, [pc, #116]	; (8000c4c <CheckPassword+0xbc>)
 8000bd6:	2100      	movs	r1, #0
 8000bd8:	2000      	movs	r0, #0
 8000bda:	f7ff fe17 	bl	800080c <StampaStringaSuLCD>
 8000bde:	e028      	b.n	8000c32 <CheckPassword+0xa2>
		}
		else {
			allarme=0;
 8000be0:	4b19      	ldr	r3, [pc, #100]	; (8000c48 <CheckPassword+0xb8>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	601a      	str	r2, [r3, #0]
			HAL_NVIC_DisableIRQ(EXTI3_IRQn);
 8000be6:	2009      	movs	r0, #9
 8000be8:	f000 fecb 	bl	8001982 <HAL_NVIC_DisableIRQ>
			intrusion=0;
 8000bec:	4b18      	ldr	r3, [pc, #96]	; (8000c50 <CheckPassword+0xc0>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	601a      	str	r2, [r3, #0]
			HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	4817      	ldr	r0, [pc, #92]	; (8000c54 <CheckPassword+0xc4>)
 8000bf6:	f001 fd9f 	bl	8002738 <HAL_TIM_PWM_Stop>
			PulisciSchermo();
 8000bfa:	f7ff fddb 	bl	80007b4 <PulisciSchermo>
			StampaStringaSuLCD(0, 0, "Alarm off");
 8000bfe:	4a16      	ldr	r2, [pc, #88]	; (8000c58 <CheckPassword+0xc8>)
 8000c00:	2100      	movs	r1, #0
 8000c02:	2000      	movs	r0, #0
 8000c04:	f7ff fe02 	bl	800080c <StampaStringaSuLCD>
 8000c08:	e013      	b.n	8000c32 <CheckPassword+0xa2>
		}
	}
	else{
		PulisciSchermo();
 8000c0a:	f7ff fdd3 	bl	80007b4 <PulisciSchermo>
		StampaStringaSuLCD(0, 1, "Wrong code");
 8000c0e:	4a13      	ldr	r2, [pc, #76]	; (8000c5c <CheckPassword+0xcc>)
 8000c10:	2101      	movs	r1, #1
 8000c12:	2000      	movs	r0, #0
 8000c14:	f7ff fdfa 	bl	800080c <StampaStringaSuLCD>
		memset(lettera,0,strlen(lettera));
 8000c18:	4809      	ldr	r0, [pc, #36]	; (8000c40 <CheckPassword+0xb0>)
 8000c1a:	f7ff fae5 	bl	80001e8 <strlen>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	461a      	mov	r2, r3
 8000c22:	2100      	movs	r1, #0
 8000c24:	4806      	ldr	r0, [pc, #24]	; (8000c40 <CheckPassword+0xb0>)
 8000c26:	f002 fe79 	bl	800391c <memset>
		cursore=-1;
 8000c2a:	4b06      	ldr	r3, [pc, #24]	; (8000c44 <CheckPassword+0xb4>)
 8000c2c:	f04f 32ff 	mov.w	r2, #4294967295
 8000c30:	601a      	str	r2, [r3, #0]
	}
	LedAlarm();
 8000c32:	f000 f865 	bl	8000d00 <LedAlarm>
}
 8000c36:	bf00      	nop
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	08003944 	.word	0x08003944
 8000c40:	2000004c 	.word	0x2000004c
 8000c44:	20000000 	.word	0x20000000
 8000c48:	2000003c 	.word	0x2000003c
 8000c4c:	0800394c 	.word	0x0800394c
 8000c50:	20000034 	.word	0x20000034
 8000c54:	20000054 	.word	0x20000054
 8000c58:	08003958 	.word	0x08003958
 8000c5c:	08003964 	.word	0x08003964

08000c60 <Sound>:

void Sound(int strobe){
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
	if(allarme&&intrusion){
 8000c68:	4b11      	ldr	r3, [pc, #68]	; (8000cb0 <Sound+0x50>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d01b      	beq.n	8000ca8 <Sound+0x48>
 8000c70:	4b10      	ldr	r3, [pc, #64]	; (8000cb4 <Sound+0x54>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d017      	beq.n	8000ca8 <Sound+0x48>
		if(strobe)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d00a      	beq.n	8000c94 <Sound+0x34>
		{
			HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000c7e:	2100      	movs	r1, #0
 8000c80:	480d      	ldr	r0, [pc, #52]	; (8000cb8 <Sound+0x58>)
 8000c82:	f001 fd27 	bl	80026d4 <HAL_TIM_PWM_Start>
			HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, 1);
 8000c86:	2201      	movs	r2, #1
 8000c88:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c8c:	480b      	ldr	r0, [pc, #44]	; (8000cbc <Sound+0x5c>)
 8000c8e:	f001 f82d 	bl	8001cec <HAL_GPIO_WritePin>
			HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
			HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, 0);

		}
	}
}
 8000c92:	e009      	b.n	8000ca8 <Sound+0x48>
			HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 8000c94:	2100      	movs	r1, #0
 8000c96:	4808      	ldr	r0, [pc, #32]	; (8000cb8 <Sound+0x58>)
 8000c98:	f001 fd4e 	bl	8002738 <HAL_TIM_PWM_Stop>
			HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, 0);
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ca2:	4806      	ldr	r0, [pc, #24]	; (8000cbc <Sound+0x5c>)
 8000ca4:	f001 f822 	bl	8001cec <HAL_GPIO_WritePin>
}
 8000ca8:	bf00      	nop
 8000caa:	3708      	adds	r7, #8
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	2000003c 	.word	0x2000003c
 8000cb4:	20000034 	.word	0x20000034
 8000cb8:	20000054 	.word	0x20000054
 8000cbc:	40020400 	.word	0x40020400

08000cc0 <CheckIntrusion>:

void CheckIntrusion(void){
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
	HAL_NVIC_DisableIRQ(EXTI3_IRQn);  //disabilito interruzioni 10-15
 8000cc4:	2009      	movs	r0, #9
 8000cc6:	f000 fe5c 	bl	8001982 <HAL_NVIC_DisableIRQ>
	TempoAR_Pir = TEMPO_AR_PIR;
 8000cca:	4b09      	ldr	r3, [pc, #36]	; (8000cf0 <CheckIntrusion+0x30>)
 8000ccc:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000cd0:	601a      	str	r2, [r3, #0]
	strobeBuffer = TEMPO_STROBE;
 8000cd2:	4b08      	ldr	r3, [pc, #32]	; (8000cf4 <CheckIntrusion+0x34>)
 8000cd4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000cd8:	601a      	str	r2, [r3, #0]
	intrusion=1;
 8000cda:	4b07      	ldr	r3, [pc, #28]	; (8000cf8 <CheckIntrusion+0x38>)
 8000cdc:	2201      	movs	r2, #1
 8000cde:	601a      	str	r2, [r3, #0]
	Sound(strobe);
 8000ce0:	4b06      	ldr	r3, [pc, #24]	; (8000cfc <CheckIntrusion+0x3c>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f7ff ffbb 	bl	8000c60 <Sound>
}
 8000cea:	bf00      	nop
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	20000052 	.word	0x20000052
 8000cf4:	20000048 	.word	0x20000048
 8000cf8:	20000034 	.word	0x20000034
 8000cfc:	20000004 	.word	0x20000004

08000d00 <LedAlarm>:

void LedAlarm(void){
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
	if(intrusion)
 8000d04:	4b1c      	ldr	r3, [pc, #112]	; (8000d78 <LedAlarm+0x78>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d005      	beq.n	8000d18 <LedAlarm+0x18>
		HAL_GPIO_WritePin(WHITE_LED_GPIO_Port, WHITE_LED_Pin, 1);
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	2140      	movs	r1, #64	; 0x40
 8000d10:	481a      	ldr	r0, [pc, #104]	; (8000d7c <LedAlarm+0x7c>)
 8000d12:	f000 ffeb 	bl	8001cec <HAL_GPIO_WritePin>
 8000d16:	e004      	b.n	8000d22 <LedAlarm+0x22>
	else
	    HAL_GPIO_WritePin(WHITE_LED_GPIO_Port, WHITE_LED_Pin, 0);
 8000d18:	2200      	movs	r2, #0
 8000d1a:	2140      	movs	r1, #64	; 0x40
 8000d1c:	4817      	ldr	r0, [pc, #92]	; (8000d7c <LedAlarm+0x7c>)
 8000d1e:	f000 ffe5 	bl	8001cec <HAL_GPIO_WritePin>
	if(!allarme && !intrusion)
 8000d22:	4b17      	ldr	r3, [pc, #92]	; (8000d80 <LedAlarm+0x80>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d110      	bne.n	8000d4c <LedAlarm+0x4c>
 8000d2a:	4b13      	ldr	r3, [pc, #76]	; (8000d78 <LedAlarm+0x78>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d10c      	bne.n	8000d4c <LedAlarm+0x4c>
	{
    	HAL_GPIO_WritePin(YELLOW_LED_GPIO_Port, YELLOW_LED_Pin, 1);
 8000d32:	2201      	movs	r2, #1
 8000d34:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d38:	4812      	ldr	r0, [pc, #72]	; (8000d84 <LedAlarm+0x84>)
 8000d3a:	f000 ffd7 	bl	8001cec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, 0);
 8000d3e:	2200      	movs	r2, #0
 8000d40:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d44:	480f      	ldr	r0, [pc, #60]	; (8000d84 <LedAlarm+0x84>)
 8000d46:	f000 ffd1 	bl	8001cec <HAL_GPIO_WritePin>
	else if(allarme && !intrusion)
	{
		HAL_GPIO_WritePin(YELLOW_LED_GPIO_Port, YELLOW_LED_Pin, 0);
		HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, 1);
	}
}
 8000d4a:	e013      	b.n	8000d74 <LedAlarm+0x74>
	else if(allarme && !intrusion)
 8000d4c:	4b0c      	ldr	r3, [pc, #48]	; (8000d80 <LedAlarm+0x80>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d00f      	beq.n	8000d74 <LedAlarm+0x74>
 8000d54:	4b08      	ldr	r3, [pc, #32]	; (8000d78 <LedAlarm+0x78>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d10b      	bne.n	8000d74 <LedAlarm+0x74>
		HAL_GPIO_WritePin(YELLOW_LED_GPIO_Port, YELLOW_LED_Pin, 0);
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d62:	4808      	ldr	r0, [pc, #32]	; (8000d84 <LedAlarm+0x84>)
 8000d64:	f000 ffc2 	bl	8001cec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, 1);
 8000d68:	2201      	movs	r2, #1
 8000d6a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d6e:	4805      	ldr	r0, [pc, #20]	; (8000d84 <LedAlarm+0x84>)
 8000d70:	f000 ffbc 	bl	8001cec <HAL_GPIO_WritePin>
}
 8000d74:	bf00      	nop
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	20000034 	.word	0x20000034
 8000d7c:	40020000 	.word	0x40020000
 8000d80:	2000003c 	.word	0x2000003c
 8000d84:	40020400 	.word	0x40020400

08000d88 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b08a      	sub	sp, #40	; 0x28
 8000d8c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d8e:	f107 0314 	add.w	r3, r7, #20
 8000d92:	2200      	movs	r2, #0
 8000d94:	601a      	str	r2, [r3, #0]
 8000d96:	605a      	str	r2, [r3, #4]
 8000d98:	609a      	str	r2, [r3, #8]
 8000d9a:	60da      	str	r2, [r3, #12]
 8000d9c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d9e:	2300      	movs	r3, #0
 8000da0:	613b      	str	r3, [r7, #16]
 8000da2:	4b6f      	ldr	r3, [pc, #444]	; (8000f60 <MX_GPIO_Init+0x1d8>)
 8000da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da6:	4a6e      	ldr	r2, [pc, #440]	; (8000f60 <MX_GPIO_Init+0x1d8>)
 8000da8:	f043 0304 	orr.w	r3, r3, #4
 8000dac:	6313      	str	r3, [r2, #48]	; 0x30
 8000dae:	4b6c      	ldr	r3, [pc, #432]	; (8000f60 <MX_GPIO_Init+0x1d8>)
 8000db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db2:	f003 0304 	and.w	r3, r3, #4
 8000db6:	613b      	str	r3, [r7, #16]
 8000db8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000dba:	2300      	movs	r3, #0
 8000dbc:	60fb      	str	r3, [r7, #12]
 8000dbe:	4b68      	ldr	r3, [pc, #416]	; (8000f60 <MX_GPIO_Init+0x1d8>)
 8000dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc2:	4a67      	ldr	r2, [pc, #412]	; (8000f60 <MX_GPIO_Init+0x1d8>)
 8000dc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000dc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dca:	4b65      	ldr	r3, [pc, #404]	; (8000f60 <MX_GPIO_Init+0x1d8>)
 8000dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000dd2:	60fb      	str	r3, [r7, #12]
 8000dd4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	60bb      	str	r3, [r7, #8]
 8000dda:	4b61      	ldr	r3, [pc, #388]	; (8000f60 <MX_GPIO_Init+0x1d8>)
 8000ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dde:	4a60      	ldr	r2, [pc, #384]	; (8000f60 <MX_GPIO_Init+0x1d8>)
 8000de0:	f043 0301 	orr.w	r3, r3, #1
 8000de4:	6313      	str	r3, [r2, #48]	; 0x30
 8000de6:	4b5e      	ldr	r3, [pc, #376]	; (8000f60 <MX_GPIO_Init+0x1d8>)
 8000de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dea:	f003 0301 	and.w	r3, r3, #1
 8000dee:	60bb      	str	r3, [r7, #8]
 8000df0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000df2:	2300      	movs	r3, #0
 8000df4:	607b      	str	r3, [r7, #4]
 8000df6:	4b5a      	ldr	r3, [pc, #360]	; (8000f60 <MX_GPIO_Init+0x1d8>)
 8000df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfa:	4a59      	ldr	r2, [pc, #356]	; (8000f60 <MX_GPIO_Init+0x1d8>)
 8000dfc:	f043 0302 	orr.w	r3, r3, #2
 8000e00:	6313      	str	r3, [r2, #48]	; 0x30
 8000e02:	4b57      	ldr	r3, [pc, #348]	; (8000f60 <MX_GPIO_Init+0x1d8>)
 8000e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e06:	f003 0302 	and.w	r3, r3, #2
 8000e0a:	607b      	str	r3, [r7, #4]
 8000e0c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, R1_Pin|R2_Pin, GPIO_PIN_SET);
 8000e0e:	2201      	movs	r2, #1
 8000e10:	2103      	movs	r1, #3
 8000e12:	4854      	ldr	r0, [pc, #336]	; (8000f64 <MX_GPIO_Init+0x1dc>)
 8000e14:	f000 ff6a 	bl	8001cec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(R4_GPIO_Port, R4_Pin, GPIO_PIN_SET);
 8000e18:	2201      	movs	r2, #1
 8000e1a:	2110      	movs	r1, #16
 8000e1c:	4852      	ldr	r0, [pc, #328]	; (8000f68 <MX_GPIO_Init+0x1e0>)
 8000e1e:	f000 ff65 	bl	8001cec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, WHITE_LED_Pin|PIN_D5_Pin|PIN_D6_Pin, GPIO_PIN_RESET);
 8000e22:	2200      	movs	r2, #0
 8000e24:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 8000e28:	484f      	ldr	r0, [pc, #316]	; (8000f68 <MX_GPIO_Init+0x1e0>)
 8000e2a:	f000 ff5f 	bl	8001cec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, PIN_D7_Pin|PIN_EN_Pin|PIN_RS_Pin, GPIO_PIN_RESET);
 8000e2e:	2200      	movs	r2, #0
 8000e30:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8000e34:	484b      	ldr	r0, [pc, #300]	; (8000f64 <MX_GPIO_Init+0x1dc>)
 8000e36:	f000 ff59 	bl	8001cec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(R3_GPIO_Port, R3_Pin, GPIO_PIN_SET);
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	2101      	movs	r1, #1
 8000e3e:	484b      	ldr	r0, [pc, #300]	; (8000f6c <MX_GPIO_Init+0x1e4>)
 8000e40:	f000 ff54 	bl	8001cec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RED_LED_Pin|PIN_D4_Pin|GREEN_LED_Pin|YELLOW_LED_Pin, GPIO_PIN_RESET);
 8000e44:	2200      	movs	r2, #0
 8000e46:	f44f 51b8 	mov.w	r1, #5888	; 0x1700
 8000e4a:	4848      	ldr	r0, [pc, #288]	; (8000f6c <MX_GPIO_Init+0x1e4>)
 8000e4c:	f000 ff4e 	bl	8001cec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000e50:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e56:	4b46      	ldr	r3, [pc, #280]	; (8000f70 <MX_GPIO_Init+0x1e8>)
 8000e58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e5e:	f107 0314 	add.w	r3, r7, #20
 8000e62:	4619      	mov	r1, r3
 8000e64:	483f      	ldr	r0, [pc, #252]	; (8000f64 <MX_GPIO_Init+0x1dc>)
 8000e66:	f000 fda7 	bl	80019b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin 
                           PCPin */
  GPIO_InitStruct.Pin = R1_Pin|R2_Pin|PIN_D7_Pin|PIN_EN_Pin 
 8000e6a:	f240 1363 	movw	r3, #355	; 0x163
 8000e6e:	617b      	str	r3, [r7, #20]
                          |PIN_RS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e70:	2301      	movs	r3, #1
 8000e72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e74:	2300      	movs	r3, #0
 8000e76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e7c:	f107 0314 	add.w	r3, r7, #20
 8000e80:	4619      	mov	r1, r3
 8000e82:	4838      	ldr	r0, [pc, #224]	; (8000f64 <MX_GPIO_Init+0x1dc>)
 8000e84:	f000 fd98 	bl	80019b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PIR_Pin;
 8000e88:	2308      	movs	r3, #8
 8000e8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e8c:	4b39      	ldr	r3, [pc, #228]	; (8000f74 <MX_GPIO_Init+0x1ec>)
 8000e8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e90:	2301      	movs	r3, #1
 8000e92:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PIR_GPIO_Port, &GPIO_InitStruct);
 8000e94:	f107 0314 	add.w	r3, r7, #20
 8000e98:	4619      	mov	r1, r3
 8000e9a:	4832      	ldr	r0, [pc, #200]	; (8000f64 <MX_GPIO_Init+0x1dc>)
 8000e9c:	f000 fd8c 	bl	80019b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = R4_Pin|WHITE_LED_Pin|PIN_D5_Pin|PIN_D6_Pin;
 8000ea0:	f641 0350 	movw	r3, #6224	; 0x1850
 8000ea4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eb2:	f107 0314 	add.w	r3, r7, #20
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	482b      	ldr	r0, [pc, #172]	; (8000f68 <MX_GPIO_Init+0x1e0>)
 8000eba:	f000 fd7d 	bl	80019b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = C1_Pin|C4_Pin;
 8000ebe:	f44f 7308 	mov.w	r3, #544	; 0x220
 8000ec2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000ec4:	4b2c      	ldr	r3, [pc, #176]	; (8000f78 <MX_GPIO_Init+0x1f0>)
 8000ec6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ec8:	2301      	movs	r3, #1
 8000eca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ecc:	f107 0314 	add.w	r3, r7, #20
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	4825      	ldr	r0, [pc, #148]	; (8000f68 <MX_GPIO_Init+0x1e0>)
 8000ed4:	f000 fd70 	bl	80019b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin 
                           PBPin */
  GPIO_InitStruct.Pin = R3_Pin|RED_LED_Pin|PIN_D4_Pin|GREEN_LED_Pin 
 8000ed8:	f241 7301 	movw	r3, #5889	; 0x1701
 8000edc:	617b      	str	r3, [r7, #20]
                          |YELLOW_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eea:	f107 0314 	add.w	r3, r7, #20
 8000eee:	4619      	mov	r1, r3
 8000ef0:	481e      	ldr	r0, [pc, #120]	; (8000f6c <MX_GPIO_Init+0x1e4>)
 8000ef2:	f000 fd61 	bl	80019b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = C3_Pin;
 8000ef6:	2380      	movs	r3, #128	; 0x80
 8000ef8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000efa:	4b1f      	ldr	r3, [pc, #124]	; (8000f78 <MX_GPIO_Init+0x1f0>)
 8000efc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000efe:	2301      	movs	r3, #1
 8000f00:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(C3_GPIO_Port, &GPIO_InitStruct);
 8000f02:	f107 0314 	add.w	r3, r7, #20
 8000f06:	4619      	mov	r1, r3
 8000f08:	4816      	ldr	r0, [pc, #88]	; (8000f64 <MX_GPIO_Init+0x1dc>)
 8000f0a:	f000 fd55 	bl	80019b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = C2_Pin;
 8000f0e:	2340      	movs	r3, #64	; 0x40
 8000f10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000f12:	4b19      	ldr	r3, [pc, #100]	; (8000f78 <MX_GPIO_Init+0x1f0>)
 8000f14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f16:	2301      	movs	r3, #1
 8000f18:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(C2_GPIO_Port, &GPIO_InitStruct);
 8000f1a:	f107 0314 	add.w	r3, r7, #20
 8000f1e:	4619      	mov	r1, r3
 8000f20:	4812      	ldr	r0, [pc, #72]	; (8000f6c <MX_GPIO_Init+0x1e4>)
 8000f22:	f000 fd49 	bl	80019b8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 6, 1);
 8000f26:	2201      	movs	r2, #1
 8000f28:	2106      	movs	r1, #6
 8000f2a:	2009      	movs	r0, #9
 8000f2c:	f000 fcff 	bl	800192e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000f30:	2009      	movs	r0, #9
 8000f32:	f000 fd18 	bl	8001966 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 6, 1);
 8000f36:	2201      	movs	r2, #1
 8000f38:	2106      	movs	r1, #6
 8000f3a:	2017      	movs	r0, #23
 8000f3c:	f000 fcf7 	bl	800192e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000f40:	2017      	movs	r0, #23
 8000f42:	f000 fd10 	bl	8001966 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 6, 1);
 8000f46:	2201      	movs	r2, #1
 8000f48:	2106      	movs	r1, #6
 8000f4a:	2028      	movs	r0, #40	; 0x28
 8000f4c:	f000 fcef 	bl	800192e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000f50:	2028      	movs	r0, #40	; 0x28
 8000f52:	f000 fd08 	bl	8001966 <HAL_NVIC_EnableIRQ>

}
 8000f56:	bf00      	nop
 8000f58:	3728      	adds	r7, #40	; 0x28
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	40023800 	.word	0x40023800
 8000f64:	40020800 	.word	0x40020800
 8000f68:	40020000 	.word	0x40020000
 8000f6c:	40020400 	.word	0x40020400
 8000f70:	10210000 	.word	0x10210000
 8000f74:	10110000 	.word	0x10110000
 8000f78:	10310000 	.word	0x10310000

08000f7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f82:	f000 fb43 	bl	800160c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f86:	f000 f863 	bl	8001050 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f8a:	f7ff fefd 	bl	8000d88 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f8e:	f000 faa1 	bl	80014d4 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000f92:	f000 f9d3 	bl	800133c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  init_LCD();
 8000f96:	f7ff faaf 	bl	80004f8 <init_LCD>
  HAL_NVIC_DisableIRQ(EXTI3_IRQn);
 8000f9a:	2009      	movs	r0, #9
 8000f9c:	f000 fcf1 	bl	8001982 <HAL_NVIC_DisableIRQ>

   //testSuDueRighe();



  StartKeyb4x4();
 8000fa0:	f7ff fcc6 	bl	8000930 <StartKeyb4x4>


   for(int i=0; i<15; i++){
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	607b      	str	r3, [r7, #4]
 8000fa8:	e02b      	b.n	8001002 <main+0x86>
	   if(i%3==0){
 8000faa:	6879      	ldr	r1, [r7, #4]
 8000fac:	4b22      	ldr	r3, [pc, #136]	; (8001038 <main+0xbc>)
 8000fae:	fb83 3201 	smull	r3, r2, r3, r1
 8000fb2:	17cb      	asrs	r3, r1, #31
 8000fb4:	1ad2      	subs	r2, r2, r3
 8000fb6:	4613      	mov	r3, r2
 8000fb8:	005b      	lsls	r3, r3, #1
 8000fba:	4413      	add	r3, r2
 8000fbc:	1aca      	subs	r2, r1, r3
 8000fbe:	2a00      	cmp	r2, #0
 8000fc0:	d101      	bne.n	8000fc6 <main+0x4a>
		   PulisciSchermo();
 8000fc2:	f7ff fbf7 	bl	80007b4 <PulisciSchermo>
	   }
	   StampaStringaSuLCD(0, 0, "Initializing");
 8000fc6:	4a1d      	ldr	r2, [pc, #116]	; (800103c <main+0xc0>)
 8000fc8:	2100      	movs	r1, #0
 8000fca:	2000      	movs	r0, #0
 8000fcc:	f7ff fc1e 	bl	800080c <StampaStringaSuLCD>
	   StampaStringaSuLCD(i%3+12, 0, ".");
 8000fd0:	687a      	ldr	r2, [r7, #4]
 8000fd2:	4b19      	ldr	r3, [pc, #100]	; (8001038 <main+0xbc>)
 8000fd4:	fb83 3102 	smull	r3, r1, r3, r2
 8000fd8:	17d3      	asrs	r3, r2, #31
 8000fda:	1ac9      	subs	r1, r1, r3
 8000fdc:	460b      	mov	r3, r1
 8000fde:	005b      	lsls	r3, r3, #1
 8000fe0:	440b      	add	r3, r1
 8000fe2:	1ad1      	subs	r1, r2, r3
 8000fe4:	b2cb      	uxtb	r3, r1
 8000fe6:	330c      	adds	r3, #12
 8000fe8:	b2db      	uxtb	r3, r3
 8000fea:	4a15      	ldr	r2, [pc, #84]	; (8001040 <main+0xc4>)
 8000fec:	2100      	movs	r1, #0
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f7ff fc0c 	bl	800080c <StampaStringaSuLCD>

	   HAL_Delay(1000);
 8000ff4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ff8:	f000 fb7a 	bl	80016f0 <HAL_Delay>
   for(int i=0; i<15; i++){
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	3301      	adds	r3, #1
 8001000:	607b      	str	r3, [r7, #4]
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	2b0e      	cmp	r3, #14
 8001006:	ddd0      	ble.n	8000faa <main+0x2e>
   }
   PulisciSchermo();
 8001008:	f7ff fbd4 	bl	80007b4 <PulisciSchermo>
   StampaStringaSuLCD(0, 0, "Ready");
 800100c:	4a0d      	ldr	r2, [pc, #52]	; (8001044 <main+0xc8>)
 800100e:	2100      	movs	r1, #0
 8001010:	2000      	movs	r0, #0
 8001012:	f7ff fbfb 	bl	800080c <StampaStringaSuLCD>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

    /* USER CODE END WHILE */
	  	LedAlarm();
 8001016:	f7ff fe73 	bl	8000d00 <LedAlarm>
		if(TastoPremuto)
 800101a:	4b0b      	ldr	r3, [pc, #44]	; (8001048 <main+0xcc>)
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d0f9      	beq.n	8001016 <main+0x9a>
			{
			PulisciSchermo();
 8001022:	f7ff fbc7 	bl	80007b4 <PulisciSchermo>
			StampaStringaSuLCD(0, 0, lettera);
 8001026:	4a09      	ldr	r2, [pc, #36]	; (800104c <main+0xd0>)
 8001028:	2100      	movs	r1, #0
 800102a:	2000      	movs	r0, #0
 800102c:	f7ff fbee 	bl	800080c <StampaStringaSuLCD>
			TastoPremuto=0;
 8001030:	4b05      	ldr	r3, [pc, #20]	; (8001048 <main+0xcc>)
 8001032:	2200      	movs	r2, #0
 8001034:	701a      	strb	r2, [r3, #0]
	  	LedAlarm();
 8001036:	e7ee      	b.n	8001016 <main+0x9a>
 8001038:	55555556 	.word	0x55555556
 800103c:	08003970 	.word	0x08003970
 8001040:	08003980 	.word	0x08003980
 8001044:	08003984 	.word	0x08003984
 8001048:	20000038 	.word	0x20000038
 800104c:	2000004c 	.word	0x2000004c

08001050 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b094      	sub	sp, #80	; 0x50
 8001054:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001056:	f107 0320 	add.w	r3, r7, #32
 800105a:	2230      	movs	r2, #48	; 0x30
 800105c:	2100      	movs	r1, #0
 800105e:	4618      	mov	r0, r3
 8001060:	f002 fc5c 	bl	800391c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001064:	f107 030c 	add.w	r3, r7, #12
 8001068:	2200      	movs	r2, #0
 800106a:	601a      	str	r2, [r3, #0]
 800106c:	605a      	str	r2, [r3, #4]
 800106e:	609a      	str	r2, [r3, #8]
 8001070:	60da      	str	r2, [r3, #12]
 8001072:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001074:	2300      	movs	r3, #0
 8001076:	60bb      	str	r3, [r7, #8]
 8001078:	4b29      	ldr	r3, [pc, #164]	; (8001120 <SystemClock_Config+0xd0>)
 800107a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107c:	4a28      	ldr	r2, [pc, #160]	; (8001120 <SystemClock_Config+0xd0>)
 800107e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001082:	6413      	str	r3, [r2, #64]	; 0x40
 8001084:	4b26      	ldr	r3, [pc, #152]	; (8001120 <SystemClock_Config+0xd0>)
 8001086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001088:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800108c:	60bb      	str	r3, [r7, #8]
 800108e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001090:	2300      	movs	r3, #0
 8001092:	607b      	str	r3, [r7, #4]
 8001094:	4b23      	ldr	r3, [pc, #140]	; (8001124 <SystemClock_Config+0xd4>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800109c:	4a21      	ldr	r2, [pc, #132]	; (8001124 <SystemClock_Config+0xd4>)
 800109e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80010a2:	6013      	str	r3, [r2, #0]
 80010a4:	4b1f      	ldr	r3, [pc, #124]	; (8001124 <SystemClock_Config+0xd4>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010ac:	607b      	str	r3, [r7, #4]
 80010ae:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010b0:	2302      	movs	r3, #2
 80010b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010b4:	2301      	movs	r3, #1
 80010b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010b8:	2310      	movs	r3, #16
 80010ba:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010bc:	2302      	movs	r3, #2
 80010be:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010c0:	2300      	movs	r3, #0
 80010c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80010c4:	2310      	movs	r3, #16
 80010c6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80010c8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80010cc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80010ce:	2304      	movs	r3, #4
 80010d0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80010d2:	2307      	movs	r3, #7
 80010d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010d6:	f107 0320 	add.w	r3, r7, #32
 80010da:	4618      	mov	r0, r3
 80010dc:	f000 fe38 	bl	8001d50 <HAL_RCC_OscConfig>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80010e6:	f000 f81f 	bl	8001128 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010ea:	230f      	movs	r3, #15
 80010ec:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010ee:	2302      	movs	r3, #2
 80010f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010f2:	2300      	movs	r3, #0
 80010f4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010fa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010fc:	2300      	movs	r3, #0
 80010fe:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001100:	f107 030c 	add.w	r3, r7, #12
 8001104:	2102      	movs	r1, #2
 8001106:	4618      	mov	r0, r3
 8001108:	f001 f892 	bl	8002230 <HAL_RCC_ClockConfig>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001112:	f000 f809 	bl	8001128 <Error_Handler>
  }
}
 8001116:	bf00      	nop
 8001118:	3750      	adds	r7, #80	; 0x50
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	40023800 	.word	0x40023800
 8001124:	40007000 	.word	0x40007000

08001128 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800112c:	bf00      	nop
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
	...

08001138 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800113e:	2300      	movs	r3, #0
 8001140:	607b      	str	r3, [r7, #4]
 8001142:	4b10      	ldr	r3, [pc, #64]	; (8001184 <HAL_MspInit+0x4c>)
 8001144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001146:	4a0f      	ldr	r2, [pc, #60]	; (8001184 <HAL_MspInit+0x4c>)
 8001148:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800114c:	6453      	str	r3, [r2, #68]	; 0x44
 800114e:	4b0d      	ldr	r3, [pc, #52]	; (8001184 <HAL_MspInit+0x4c>)
 8001150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001152:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001156:	607b      	str	r3, [r7, #4]
 8001158:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800115a:	2300      	movs	r3, #0
 800115c:	603b      	str	r3, [r7, #0]
 800115e:	4b09      	ldr	r3, [pc, #36]	; (8001184 <HAL_MspInit+0x4c>)
 8001160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001162:	4a08      	ldr	r2, [pc, #32]	; (8001184 <HAL_MspInit+0x4c>)
 8001164:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001168:	6413      	str	r3, [r2, #64]	; 0x40
 800116a:	4b06      	ldr	r3, [pc, #24]	; (8001184 <HAL_MspInit+0x4c>)
 800116c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800116e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001172:	603b      	str	r3, [r7, #0]
 8001174:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8001176:	2004      	movs	r0, #4
 8001178:	f000 fbce 	bl	8001918 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800117c:	bf00      	nop
 800117e:	3708      	adds	r7, #8
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	40023800 	.word	0x40023800

08001188 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800118c:	bf00      	nop
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr

08001196 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001196:	b480      	push	{r7}
 8001198:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800119a:	e7fe      	b.n	800119a <HardFault_Handler+0x4>

0800119c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011a0:	e7fe      	b.n	80011a0 <MemManage_Handler+0x4>

080011a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011a2:	b480      	push	{r7}
 80011a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011a6:	e7fe      	b.n	80011a6 <BusFault_Handler+0x4>

080011a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011ac:	e7fe      	b.n	80011ac <UsageFault_Handler+0x4>

080011ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011ae:	b480      	push	{r7}
 80011b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011b2:	bf00      	nop
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr

080011bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011c0:	bf00      	nop
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr

080011ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011ca:	b480      	push	{r7}
 80011cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011ce:	bf00      	nop
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr

080011d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011dc:	f000 fa68 	bl	80016b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  GestioneRigheMatriceKeyb4x4();
 80011e0:	f7ff fbbc 	bl	800095c <GestioneRigheMatriceKeyb4x4>

  if(TempoAR_Pir)   //se è attivo un tempo antirimbalzo
 80011e4:	4b1b      	ldr	r3, [pc, #108]	; (8001254 <SysTick_Handler+0x7c>)
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d00c      	beq.n	8001206 <SysTick_Handler+0x2e>
  		{
  		TempoAR_Pir--;
 80011ec:	4b19      	ldr	r3, [pc, #100]	; (8001254 <SysTick_Handler+0x7c>)
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	3b01      	subs	r3, #1
 80011f2:	b2da      	uxtb	r2, r3
 80011f4:	4b17      	ldr	r3, [pc, #92]	; (8001254 <SysTick_Handler+0x7c>)
 80011f6:	701a      	strb	r2, [r3, #0]
  		if(!TempoAR_Pir)
 80011f8:	4b16      	ldr	r3, [pc, #88]	; (8001254 <SysTick_Handler+0x7c>)
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d102      	bne.n	8001206 <SysTick_Handler+0x2e>
  			{
  			HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001200:	2009      	movs	r0, #9
 8001202:	f000 fbb0 	bl	8001966 <HAL_NVIC_EnableIRQ>

  			}
  		}
  if(strobeBuffer)   //se è attivo un tempo antirimbalzo
 8001206:	4b14      	ldr	r3, [pc, #80]	; (8001258 <SysTick_Handler+0x80>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d020      	beq.n	8001250 <SysTick_Handler+0x78>
  		{
  		strobeBuffer--;
 800120e:	4b12      	ldr	r3, [pc, #72]	; (8001258 <SysTick_Handler+0x80>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	3b01      	subs	r3, #1
 8001214:	4a10      	ldr	r2, [pc, #64]	; (8001258 <SysTick_Handler+0x80>)
 8001216:	6013      	str	r3, [r2, #0]
  		if(!strobeBuffer)
 8001218:	4b0f      	ldr	r3, [pc, #60]	; (8001258 <SysTick_Handler+0x80>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d117      	bne.n	8001250 <SysTick_Handler+0x78>
  			{
  			if(strobe==0)
 8001220:	4b0e      	ldr	r3, [pc, #56]	; (800125c <SysTick_Handler+0x84>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d103      	bne.n	8001230 <SysTick_Handler+0x58>
  				strobe=1;
 8001228:	4b0c      	ldr	r3, [pc, #48]	; (800125c <SysTick_Handler+0x84>)
 800122a:	2201      	movs	r2, #1
 800122c:	601a      	str	r2, [r3, #0]
 800122e:	e006      	b.n	800123e <SysTick_Handler+0x66>
  			else if(strobe==1)
 8001230:	4b0a      	ldr	r3, [pc, #40]	; (800125c <SysTick_Handler+0x84>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	2b01      	cmp	r3, #1
 8001236:	d102      	bne.n	800123e <SysTick_Handler+0x66>
  				strobe=0;
 8001238:	4b08      	ldr	r3, [pc, #32]	; (800125c <SysTick_Handler+0x84>)
 800123a:	2200      	movs	r2, #0
 800123c:	601a      	str	r2, [r3, #0]
  			Sound(strobe);
 800123e:	4b07      	ldr	r3, [pc, #28]	; (800125c <SysTick_Handler+0x84>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4618      	mov	r0, r3
 8001244:	f7ff fd0c 	bl	8000c60 <Sound>
  			strobeBuffer = TEMPO_STROBE;
 8001248:	4b03      	ldr	r3, [pc, #12]	; (8001258 <SysTick_Handler+0x80>)
 800124a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800124e:	601a      	str	r2, [r3, #0]
  		}



  /* USER CODE END SysTick_IRQn 1 */
}
 8001250:	bf00      	nop
 8001252:	bd80      	pop	{r7, pc}
 8001254:	20000052 	.word	0x20000052
 8001258:	20000048 	.word	0x20000048
 800125c:	20000004 	.word	0x20000004

08001260 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PIR_Pin);
 8001264:	2008      	movs	r0, #8
 8001266:	f000 fd5b 	bl	8001d20 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800126a:	bf00      	nop
 800126c:	bd80      	pop	{r7, pc}

0800126e <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800126e:	b580      	push	{r7, lr}
 8001270:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(C1_Pin);
 8001272:	2020      	movs	r0, #32
 8001274:	f000 fd54 	bl	8001d20 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(C2_Pin);
 8001278:	2040      	movs	r0, #64	; 0x40
 800127a:	f000 fd51 	bl	8001d20 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(C3_Pin);
 800127e:	2080      	movs	r0, #128	; 0x80
 8001280:	f000 fd4e 	bl	8001d20 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(C4_Pin);
 8001284:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001288:	f000 fd4a 	bl	8001d20 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800128c:	bf00      	nop
 800128e:	bd80      	pop	{r7, pc}

08001290 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001294:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001298:	f000 fd42 	bl	8001d20 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800129c:	bf00      	nop
 800129e:	bd80      	pop	{r7, pc}

080012a0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 1 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	4603      	mov	r3, r0
 80012a8:	80fb      	strh	r3, [r7, #6]
	if((GPIO_Pin==C1_Pin)||(GPIO_Pin==C2_Pin)||(GPIO_Pin==C3_Pin)||(GPIO_Pin==C4_Pin))
 80012aa:	88fb      	ldrh	r3, [r7, #6]
 80012ac:	2b20      	cmp	r3, #32
 80012ae:	d009      	beq.n	80012c4 <HAL_GPIO_EXTI_Callback+0x24>
 80012b0:	88fb      	ldrh	r3, [r7, #6]
 80012b2:	2b40      	cmp	r3, #64	; 0x40
 80012b4:	d006      	beq.n	80012c4 <HAL_GPIO_EXTI_Callback+0x24>
 80012b6:	88fb      	ldrh	r3, [r7, #6]
 80012b8:	2b80      	cmp	r3, #128	; 0x80
 80012ba:	d003      	beq.n	80012c4 <HAL_GPIO_EXTI_Callback+0x24>
 80012bc:	88fb      	ldrh	r3, [r7, #6]
 80012be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80012c2:	d103      	bne.n	80012cc <HAL_GPIO_EXTI_Callback+0x2c>
		GestioneEXTI_Keyb4x4(GPIO_Pin);
 80012c4:	88fb      	ldrh	r3, [r7, #6]
 80012c6:	4618      	mov	r0, r3
 80012c8:	f7ff fc46 	bl	8000b58 <GestioneEXTI_Keyb4x4>
	if(GPIO_Pin==B1_Pin){
 80012cc:	88fb      	ldrh	r3, [r7, #6]
 80012ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80012d2:	d109      	bne.n	80012e8 <HAL_GPIO_EXTI_Callback+0x48>
		if(!HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin)){
 80012d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012d8:	480c      	ldr	r0, [pc, #48]	; (800130c <HAL_GPIO_EXTI_Callback+0x6c>)
 80012da:	f000 fcef 	bl	8001cbc <HAL_GPIO_ReadPin>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d101      	bne.n	80012e8 <HAL_GPIO_EXTI_Callback+0x48>
			CheckPassword();
 80012e4:	f7ff fc54 	bl	8000b90 <CheckPassword>
		}
	}
	if(GPIO_Pin==PIR_Pin){
 80012e8:	88fb      	ldrh	r3, [r7, #6]
 80012ea:	2b08      	cmp	r3, #8
 80012ec:	d109      	bne.n	8001302 <HAL_GPIO_EXTI_Callback+0x62>
		while(!HAL_GPIO_ReadPin(PIR_GPIO_Port,PIR_Pin));
 80012ee:	bf00      	nop
 80012f0:	2108      	movs	r1, #8
 80012f2:	4806      	ldr	r0, [pc, #24]	; (800130c <HAL_GPIO_EXTI_Callback+0x6c>)
 80012f4:	f000 fce2 	bl	8001cbc <HAL_GPIO_ReadPin>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d0f8      	beq.n	80012f0 <HAL_GPIO_EXTI_Callback+0x50>
		CheckIntrusion();
 80012fe:	f7ff fcdf 	bl	8000cc0 <CheckIntrusion>

	}

}
 8001302:	bf00      	nop
 8001304:	3708      	adds	r7, #8
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	40020800 	.word	0x40020800

08001310 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001314:	4b08      	ldr	r3, [pc, #32]	; (8001338 <SystemInit+0x28>)
 8001316:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800131a:	4a07      	ldr	r2, [pc, #28]	; (8001338 <SystemInit+0x28>)
 800131c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001320:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001324:	4b04      	ldr	r3, [pc, #16]	; (8001338 <SystemInit+0x28>)
 8001326:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800132a:	609a      	str	r2, [r3, #8]
#endif
}
 800132c:	bf00      	nop
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	e000ed00 	.word	0xe000ed00

0800133c <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b08e      	sub	sp, #56	; 0x38
 8001340:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001342:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001346:	2200      	movs	r2, #0
 8001348:	601a      	str	r2, [r3, #0]
 800134a:	605a      	str	r2, [r3, #4]
 800134c:	609a      	str	r2, [r3, #8]
 800134e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001350:	f107 0320 	add.w	r3, r7, #32
 8001354:	2200      	movs	r2, #0
 8001356:	601a      	str	r2, [r3, #0]
 8001358:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800135a:	1d3b      	adds	r3, r7, #4
 800135c:	2200      	movs	r2, #0
 800135e:	601a      	str	r2, [r3, #0]
 8001360:	605a      	str	r2, [r3, #4]
 8001362:	609a      	str	r2, [r3, #8]
 8001364:	60da      	str	r2, [r3, #12]
 8001366:	611a      	str	r2, [r3, #16]
 8001368:	615a      	str	r2, [r3, #20]
 800136a:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 800136c:	4b2c      	ldr	r3, [pc, #176]	; (8001420 <MX_TIM2_Init+0xe4>)
 800136e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001372:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 42-1;
 8001374:	4b2a      	ldr	r3, [pc, #168]	; (8001420 <MX_TIM2_Init+0xe4>)
 8001376:	2229      	movs	r2, #41	; 0x29
 8001378:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800137a:	4b29      	ldr	r3, [pc, #164]	; (8001420 <MX_TIM2_Init+0xe4>)
 800137c:	2200      	movs	r2, #0
 800137e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 200-1;
 8001380:	4b27      	ldr	r3, [pc, #156]	; (8001420 <MX_TIM2_Init+0xe4>)
 8001382:	22c7      	movs	r2, #199	; 0xc7
 8001384:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001386:	4b26      	ldr	r3, [pc, #152]	; (8001420 <MX_TIM2_Init+0xe4>)
 8001388:	2200      	movs	r2, #0
 800138a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800138c:	4b24      	ldr	r3, [pc, #144]	; (8001420 <MX_TIM2_Init+0xe4>)
 800138e:	2200      	movs	r2, #0
 8001390:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001392:	4823      	ldr	r0, [pc, #140]	; (8001420 <MX_TIM2_Init+0xe4>)
 8001394:	f001 f93e 	bl	8002614 <HAL_TIM_Base_Init>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 800139e:	f7ff fec3 	bl	8001128 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013a6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80013a8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013ac:	4619      	mov	r1, r3
 80013ae:	481c      	ldr	r0, [pc, #112]	; (8001420 <MX_TIM2_Init+0xe4>)
 80013b0:	f001 fad4 	bl	800295c <HAL_TIM_ConfigClockSource>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 80013ba:	f7ff feb5 	bl	8001128 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80013be:	4818      	ldr	r0, [pc, #96]	; (8001420 <MX_TIM2_Init+0xe4>)
 80013c0:	f001 f953 	bl	800266a <HAL_TIM_PWM_Init>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 80013ca:	f7ff fead 	bl	8001128 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013ce:	2300      	movs	r3, #0
 80013d0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013d2:	2300      	movs	r3, #0
 80013d4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80013d6:	f107 0320 	add.w	r3, r7, #32
 80013da:	4619      	mov	r1, r3
 80013dc:	4810      	ldr	r0, [pc, #64]	; (8001420 <MX_TIM2_Init+0xe4>)
 80013de:	f001 fe41 	bl	8003064 <HAL_TIMEx_MasterConfigSynchronization>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d001      	beq.n	80013ec <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 80013e8:	f7ff fe9e 	bl	8001128 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013ec:	2360      	movs	r3, #96	; 0x60
 80013ee:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 100;
 80013f0:	2364      	movs	r3, #100	; 0x64
 80013f2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013f4:	2300      	movs	r3, #0
 80013f6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013f8:	2300      	movs	r3, #0
 80013fa:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013fc:	1d3b      	adds	r3, r7, #4
 80013fe:	2200      	movs	r2, #0
 8001400:	4619      	mov	r1, r3
 8001402:	4807      	ldr	r0, [pc, #28]	; (8001420 <MX_TIM2_Init+0xe4>)
 8001404:	f001 f9e4 	bl	80027d0 <HAL_TIM_PWM_ConfigChannel>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 800140e:	f7ff fe8b 	bl	8001128 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 8001412:	4803      	ldr	r0, [pc, #12]	; (8001420 <MX_TIM2_Init+0xe4>)
 8001414:	f000 f826 	bl	8001464 <HAL_TIM_MspPostInit>

}
 8001418:	bf00      	nop
 800141a:	3738      	adds	r7, #56	; 0x38
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	20000054 	.word	0x20000054

08001424 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001424:	b480      	push	{r7}
 8001426:	b085      	sub	sp, #20
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001434:	d10d      	bne.n	8001452 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001436:	2300      	movs	r3, #0
 8001438:	60fb      	str	r3, [r7, #12]
 800143a:	4b09      	ldr	r3, [pc, #36]	; (8001460 <HAL_TIM_Base_MspInit+0x3c>)
 800143c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143e:	4a08      	ldr	r2, [pc, #32]	; (8001460 <HAL_TIM_Base_MspInit+0x3c>)
 8001440:	f043 0301 	orr.w	r3, r3, #1
 8001444:	6413      	str	r3, [r2, #64]	; 0x40
 8001446:	4b06      	ldr	r3, [pc, #24]	; (8001460 <HAL_TIM_Base_MspInit+0x3c>)
 8001448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144a:	f003 0301 	and.w	r3, r3, #1
 800144e:	60fb      	str	r3, [r7, #12]
 8001450:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001452:	bf00      	nop
 8001454:	3714      	adds	r7, #20
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop
 8001460:	40023800 	.word	0x40023800

08001464 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b088      	sub	sp, #32
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800146c:	f107 030c 	add.w	r3, r7, #12
 8001470:	2200      	movs	r2, #0
 8001472:	601a      	str	r2, [r3, #0]
 8001474:	605a      	str	r2, [r3, #4]
 8001476:	609a      	str	r2, [r3, #8]
 8001478:	60da      	str	r2, [r3, #12]
 800147a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001484:	d11e      	bne.n	80014c4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001486:	2300      	movs	r3, #0
 8001488:	60bb      	str	r3, [r7, #8]
 800148a:	4b10      	ldr	r3, [pc, #64]	; (80014cc <HAL_TIM_MspPostInit+0x68>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148e:	4a0f      	ldr	r2, [pc, #60]	; (80014cc <HAL_TIM_MspPostInit+0x68>)
 8001490:	f043 0301 	orr.w	r3, r3, #1
 8001494:	6313      	str	r3, [r2, #48]	; 0x30
 8001496:	4b0d      	ldr	r3, [pc, #52]	; (80014cc <HAL_TIM_MspPostInit+0x68>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149a:	f003 0301 	and.w	r3, r3, #1
 800149e:	60bb      	str	r3, [r7, #8]
 80014a0:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration    
    PA15     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80014a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80014a6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a8:	2302      	movs	r3, #2
 80014aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ac:	2300      	movs	r3, #0
 80014ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b0:	2300      	movs	r3, #0
 80014b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80014b4:	2301      	movs	r3, #1
 80014b6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014b8:	f107 030c 	add.w	r3, r7, #12
 80014bc:	4619      	mov	r1, r3
 80014be:	4804      	ldr	r0, [pc, #16]	; (80014d0 <HAL_TIM_MspPostInit+0x6c>)
 80014c0:	f000 fa7a 	bl	80019b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80014c4:	bf00      	nop
 80014c6:	3720      	adds	r7, #32
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	40023800 	.word	0x40023800
 80014d0:	40020000 	.word	0x40020000

080014d4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80014d8:	4b11      	ldr	r3, [pc, #68]	; (8001520 <MX_USART2_UART_Init+0x4c>)
 80014da:	4a12      	ldr	r2, [pc, #72]	; (8001524 <MX_USART2_UART_Init+0x50>)
 80014dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80014de:	4b10      	ldr	r3, [pc, #64]	; (8001520 <MX_USART2_UART_Init+0x4c>)
 80014e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014e6:	4b0e      	ldr	r3, [pc, #56]	; (8001520 <MX_USART2_UART_Init+0x4c>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80014ec:	4b0c      	ldr	r3, [pc, #48]	; (8001520 <MX_USART2_UART_Init+0x4c>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80014f2:	4b0b      	ldr	r3, [pc, #44]	; (8001520 <MX_USART2_UART_Init+0x4c>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014f8:	4b09      	ldr	r3, [pc, #36]	; (8001520 <MX_USART2_UART_Init+0x4c>)
 80014fa:	220c      	movs	r2, #12
 80014fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014fe:	4b08      	ldr	r3, [pc, #32]	; (8001520 <MX_USART2_UART_Init+0x4c>)
 8001500:	2200      	movs	r2, #0
 8001502:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001504:	4b06      	ldr	r3, [pc, #24]	; (8001520 <MX_USART2_UART_Init+0x4c>)
 8001506:	2200      	movs	r2, #0
 8001508:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800150a:	4805      	ldr	r0, [pc, #20]	; (8001520 <MX_USART2_UART_Init+0x4c>)
 800150c:	f001 fe18 	bl	8003140 <HAL_UART_Init>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001516:	f7ff fe07 	bl	8001128 <Error_Handler>
  }

}
 800151a:	bf00      	nop
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	20000094 	.word	0x20000094
 8001524:	40004400 	.word	0x40004400

08001528 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b08a      	sub	sp, #40	; 0x28
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001530:	f107 0314 	add.w	r3, r7, #20
 8001534:	2200      	movs	r2, #0
 8001536:	601a      	str	r2, [r3, #0]
 8001538:	605a      	str	r2, [r3, #4]
 800153a:	609a      	str	r2, [r3, #8]
 800153c:	60da      	str	r2, [r3, #12]
 800153e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a19      	ldr	r2, [pc, #100]	; (80015ac <HAL_UART_MspInit+0x84>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d12b      	bne.n	80015a2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800154a:	2300      	movs	r3, #0
 800154c:	613b      	str	r3, [r7, #16]
 800154e:	4b18      	ldr	r3, [pc, #96]	; (80015b0 <HAL_UART_MspInit+0x88>)
 8001550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001552:	4a17      	ldr	r2, [pc, #92]	; (80015b0 <HAL_UART_MspInit+0x88>)
 8001554:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001558:	6413      	str	r3, [r2, #64]	; 0x40
 800155a:	4b15      	ldr	r3, [pc, #84]	; (80015b0 <HAL_UART_MspInit+0x88>)
 800155c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001562:	613b      	str	r3, [r7, #16]
 8001564:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001566:	2300      	movs	r3, #0
 8001568:	60fb      	str	r3, [r7, #12]
 800156a:	4b11      	ldr	r3, [pc, #68]	; (80015b0 <HAL_UART_MspInit+0x88>)
 800156c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156e:	4a10      	ldr	r2, [pc, #64]	; (80015b0 <HAL_UART_MspInit+0x88>)
 8001570:	f043 0301 	orr.w	r3, r3, #1
 8001574:	6313      	str	r3, [r2, #48]	; 0x30
 8001576:	4b0e      	ldr	r3, [pc, #56]	; (80015b0 <HAL_UART_MspInit+0x88>)
 8001578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157a:	f003 0301 	and.w	r3, r3, #1
 800157e:	60fb      	str	r3, [r7, #12]
 8001580:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001582:	230c      	movs	r3, #12
 8001584:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001586:	2302      	movs	r3, #2
 8001588:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158a:	2300      	movs	r3, #0
 800158c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800158e:	2300      	movs	r3, #0
 8001590:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001592:	2307      	movs	r3, #7
 8001594:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001596:	f107 0314 	add.w	r3, r7, #20
 800159a:	4619      	mov	r1, r3
 800159c:	4805      	ldr	r0, [pc, #20]	; (80015b4 <HAL_UART_MspInit+0x8c>)
 800159e:	f000 fa0b 	bl	80019b8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80015a2:	bf00      	nop
 80015a4:	3728      	adds	r7, #40	; 0x28
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	40004400 	.word	0x40004400
 80015b0:	40023800 	.word	0x40023800
 80015b4:	40020000 	.word	0x40020000

080015b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80015b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015f0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80015bc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80015be:	e003      	b.n	80015c8 <LoopCopyDataInit>

080015c0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80015c0:	4b0c      	ldr	r3, [pc, #48]	; (80015f4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80015c2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80015c4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80015c6:	3104      	adds	r1, #4

080015c8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80015c8:	480b      	ldr	r0, [pc, #44]	; (80015f8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80015ca:	4b0c      	ldr	r3, [pc, #48]	; (80015fc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80015cc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80015ce:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80015d0:	d3f6      	bcc.n	80015c0 <CopyDataInit>
  ldr  r2, =_sbss
 80015d2:	4a0b      	ldr	r2, [pc, #44]	; (8001600 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80015d4:	e002      	b.n	80015dc <LoopFillZerobss>

080015d6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80015d6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80015d8:	f842 3b04 	str.w	r3, [r2], #4

080015dc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80015dc:	4b09      	ldr	r3, [pc, #36]	; (8001604 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80015de:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80015e0:	d3f9      	bcc.n	80015d6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80015e2:	f7ff fe95 	bl	8001310 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015e6:	f002 f975 	bl	80038d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015ea:	f7ff fcc7 	bl	8000f7c <main>
  bx  lr    
 80015ee:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80015f0:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 80015f4:	080039c4 	.word	0x080039c4
  ldr  r0, =_sdata
 80015f8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80015fc:	20000014 	.word	0x20000014
  ldr  r2, =_sbss
 8001600:	20000014 	.word	0x20000014
  ldr  r3, = _ebss
 8001604:	200000d8 	.word	0x200000d8

08001608 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001608:	e7fe      	b.n	8001608 <ADC_IRQHandler>
	...

0800160c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001610:	4b0e      	ldr	r3, [pc, #56]	; (800164c <HAL_Init+0x40>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a0d      	ldr	r2, [pc, #52]	; (800164c <HAL_Init+0x40>)
 8001616:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800161a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800161c:	4b0b      	ldr	r3, [pc, #44]	; (800164c <HAL_Init+0x40>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a0a      	ldr	r2, [pc, #40]	; (800164c <HAL_Init+0x40>)
 8001622:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001626:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001628:	4b08      	ldr	r3, [pc, #32]	; (800164c <HAL_Init+0x40>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a07      	ldr	r2, [pc, #28]	; (800164c <HAL_Init+0x40>)
 800162e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001632:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001634:	2003      	movs	r0, #3
 8001636:	f000 f96f 	bl	8001918 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800163a:	2000      	movs	r0, #0
 800163c:	f000 f808 	bl	8001650 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001640:	f7ff fd7a 	bl	8001138 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001644:	2300      	movs	r3, #0
}
 8001646:	4618      	mov	r0, r3
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	40023c00 	.word	0x40023c00

08001650 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001658:	4b12      	ldr	r3, [pc, #72]	; (80016a4 <HAL_InitTick+0x54>)
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	4b12      	ldr	r3, [pc, #72]	; (80016a8 <HAL_InitTick+0x58>)
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	4619      	mov	r1, r3
 8001662:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001666:	fbb3 f3f1 	udiv	r3, r3, r1
 800166a:	fbb2 f3f3 	udiv	r3, r2, r3
 800166e:	4618      	mov	r0, r3
 8001670:	f000 f995 	bl	800199e <HAL_SYSTICK_Config>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	e00e      	b.n	800169c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2b0f      	cmp	r3, #15
 8001682:	d80a      	bhi.n	800169a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001684:	2200      	movs	r2, #0
 8001686:	6879      	ldr	r1, [r7, #4]
 8001688:	f04f 30ff 	mov.w	r0, #4294967295
 800168c:	f000 f94f 	bl	800192e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001690:	4a06      	ldr	r2, [pc, #24]	; (80016ac <HAL_InitTick+0x5c>)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001696:	2300      	movs	r3, #0
 8001698:	e000      	b.n	800169c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800169a:	2301      	movs	r3, #1
}
 800169c:	4618      	mov	r0, r3
 800169e:	3708      	adds	r7, #8
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	20000008 	.word	0x20000008
 80016a8:	20000010 	.word	0x20000010
 80016ac:	2000000c 	.word	0x2000000c

080016b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016b4:	4b06      	ldr	r3, [pc, #24]	; (80016d0 <HAL_IncTick+0x20>)
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	461a      	mov	r2, r3
 80016ba:	4b06      	ldr	r3, [pc, #24]	; (80016d4 <HAL_IncTick+0x24>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4413      	add	r3, r2
 80016c0:	4a04      	ldr	r2, [pc, #16]	; (80016d4 <HAL_IncTick+0x24>)
 80016c2:	6013      	str	r3, [r2, #0]
}
 80016c4:	bf00      	nop
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop
 80016d0:	20000010 	.word	0x20000010
 80016d4:	200000d4 	.word	0x200000d4

080016d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
  return uwTick;
 80016dc:	4b03      	ldr	r3, [pc, #12]	; (80016ec <HAL_GetTick+0x14>)
 80016de:	681b      	ldr	r3, [r3, #0]
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr
 80016ea:	bf00      	nop
 80016ec:	200000d4 	.word	0x200000d4

080016f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b084      	sub	sp, #16
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016f8:	f7ff ffee 	bl	80016d8 <HAL_GetTick>
 80016fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001708:	d005      	beq.n	8001716 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800170a:	4b09      	ldr	r3, [pc, #36]	; (8001730 <HAL_Delay+0x40>)
 800170c:	781b      	ldrb	r3, [r3, #0]
 800170e:	461a      	mov	r2, r3
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	4413      	add	r3, r2
 8001714:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001716:	bf00      	nop
 8001718:	f7ff ffde 	bl	80016d8 <HAL_GetTick>
 800171c:	4602      	mov	r2, r0
 800171e:	68bb      	ldr	r3, [r7, #8]
 8001720:	1ad3      	subs	r3, r2, r3
 8001722:	68fa      	ldr	r2, [r7, #12]
 8001724:	429a      	cmp	r2, r3
 8001726:	d8f7      	bhi.n	8001718 <HAL_Delay+0x28>
  {
  }
}
 8001728:	bf00      	nop
 800172a:	3710      	adds	r7, #16
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}
 8001730:	20000010 	.word	0x20000010

08001734 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001734:	b480      	push	{r7}
 8001736:	b085      	sub	sp, #20
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	f003 0307 	and.w	r3, r3, #7
 8001742:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001744:	4b0c      	ldr	r3, [pc, #48]	; (8001778 <__NVIC_SetPriorityGrouping+0x44>)
 8001746:	68db      	ldr	r3, [r3, #12]
 8001748:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800174a:	68ba      	ldr	r2, [r7, #8]
 800174c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001750:	4013      	ands	r3, r2
 8001752:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800175c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001760:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001764:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001766:	4a04      	ldr	r2, [pc, #16]	; (8001778 <__NVIC_SetPriorityGrouping+0x44>)
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	60d3      	str	r3, [r2, #12]
}
 800176c:	bf00      	nop
 800176e:	3714      	adds	r7, #20
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr
 8001778:	e000ed00 	.word	0xe000ed00

0800177c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001780:	4b04      	ldr	r3, [pc, #16]	; (8001794 <__NVIC_GetPriorityGrouping+0x18>)
 8001782:	68db      	ldr	r3, [r3, #12]
 8001784:	0a1b      	lsrs	r3, r3, #8
 8001786:	f003 0307 	and.w	r3, r3, #7
}
 800178a:	4618      	mov	r0, r3
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr
 8001794:	e000ed00 	.word	0xe000ed00

08001798 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001798:	b480      	push	{r7}
 800179a:	b083      	sub	sp, #12
 800179c:	af00      	add	r7, sp, #0
 800179e:	4603      	mov	r3, r0
 80017a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	db0b      	blt.n	80017c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017aa:	79fb      	ldrb	r3, [r7, #7]
 80017ac:	f003 021f 	and.w	r2, r3, #31
 80017b0:	4907      	ldr	r1, [pc, #28]	; (80017d0 <__NVIC_EnableIRQ+0x38>)
 80017b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b6:	095b      	lsrs	r3, r3, #5
 80017b8:	2001      	movs	r0, #1
 80017ba:	fa00 f202 	lsl.w	r2, r0, r2
 80017be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017c2:	bf00      	nop
 80017c4:	370c      	adds	r7, #12
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	e000e100 	.word	0xe000e100

080017d4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b083      	sub	sp, #12
 80017d8:	af00      	add	r7, sp, #0
 80017da:	4603      	mov	r3, r0
 80017dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	db10      	blt.n	8001808 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017e6:	79fb      	ldrb	r3, [r7, #7]
 80017e8:	f003 021f 	and.w	r2, r3, #31
 80017ec:	4909      	ldr	r1, [pc, #36]	; (8001814 <__NVIC_DisableIRQ+0x40>)
 80017ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f2:	095b      	lsrs	r3, r3, #5
 80017f4:	2001      	movs	r0, #1
 80017f6:	fa00 f202 	lsl.w	r2, r0, r2
 80017fa:	3320      	adds	r3, #32
 80017fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001800:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001804:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8001808:	bf00      	nop
 800180a:	370c      	adds	r7, #12
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr
 8001814:	e000e100 	.word	0xe000e100

08001818 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001818:	b480      	push	{r7}
 800181a:	b083      	sub	sp, #12
 800181c:	af00      	add	r7, sp, #0
 800181e:	4603      	mov	r3, r0
 8001820:	6039      	str	r1, [r7, #0]
 8001822:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001824:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001828:	2b00      	cmp	r3, #0
 800182a:	db0a      	blt.n	8001842 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	b2da      	uxtb	r2, r3
 8001830:	490c      	ldr	r1, [pc, #48]	; (8001864 <__NVIC_SetPriority+0x4c>)
 8001832:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001836:	0112      	lsls	r2, r2, #4
 8001838:	b2d2      	uxtb	r2, r2
 800183a:	440b      	add	r3, r1
 800183c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001840:	e00a      	b.n	8001858 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	b2da      	uxtb	r2, r3
 8001846:	4908      	ldr	r1, [pc, #32]	; (8001868 <__NVIC_SetPriority+0x50>)
 8001848:	79fb      	ldrb	r3, [r7, #7]
 800184a:	f003 030f 	and.w	r3, r3, #15
 800184e:	3b04      	subs	r3, #4
 8001850:	0112      	lsls	r2, r2, #4
 8001852:	b2d2      	uxtb	r2, r2
 8001854:	440b      	add	r3, r1
 8001856:	761a      	strb	r2, [r3, #24]
}
 8001858:	bf00      	nop
 800185a:	370c      	adds	r7, #12
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr
 8001864:	e000e100 	.word	0xe000e100
 8001868:	e000ed00 	.word	0xe000ed00

0800186c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800186c:	b480      	push	{r7}
 800186e:	b089      	sub	sp, #36	; 0x24
 8001870:	af00      	add	r7, sp, #0
 8001872:	60f8      	str	r0, [r7, #12]
 8001874:	60b9      	str	r1, [r7, #8]
 8001876:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	f003 0307 	and.w	r3, r3, #7
 800187e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001880:	69fb      	ldr	r3, [r7, #28]
 8001882:	f1c3 0307 	rsb	r3, r3, #7
 8001886:	2b04      	cmp	r3, #4
 8001888:	bf28      	it	cs
 800188a:	2304      	movcs	r3, #4
 800188c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	3304      	adds	r3, #4
 8001892:	2b06      	cmp	r3, #6
 8001894:	d902      	bls.n	800189c <NVIC_EncodePriority+0x30>
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	3b03      	subs	r3, #3
 800189a:	e000      	b.n	800189e <NVIC_EncodePriority+0x32>
 800189c:	2300      	movs	r3, #0
 800189e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018a0:	f04f 32ff 	mov.w	r2, #4294967295
 80018a4:	69bb      	ldr	r3, [r7, #24]
 80018a6:	fa02 f303 	lsl.w	r3, r2, r3
 80018aa:	43da      	mvns	r2, r3
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	401a      	ands	r2, r3
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018b4:	f04f 31ff 	mov.w	r1, #4294967295
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	fa01 f303 	lsl.w	r3, r1, r3
 80018be:	43d9      	mvns	r1, r3
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018c4:	4313      	orrs	r3, r2
         );
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	3724      	adds	r7, #36	; 0x24
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr
	...

080018d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	3b01      	subs	r3, #1
 80018e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018e4:	d301      	bcc.n	80018ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018e6:	2301      	movs	r3, #1
 80018e8:	e00f      	b.n	800190a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018ea:	4a0a      	ldr	r2, [pc, #40]	; (8001914 <SysTick_Config+0x40>)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	3b01      	subs	r3, #1
 80018f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018f2:	210f      	movs	r1, #15
 80018f4:	f04f 30ff 	mov.w	r0, #4294967295
 80018f8:	f7ff ff8e 	bl	8001818 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018fc:	4b05      	ldr	r3, [pc, #20]	; (8001914 <SysTick_Config+0x40>)
 80018fe:	2200      	movs	r2, #0
 8001900:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001902:	4b04      	ldr	r3, [pc, #16]	; (8001914 <SysTick_Config+0x40>)
 8001904:	2207      	movs	r2, #7
 8001906:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001908:	2300      	movs	r3, #0
}
 800190a:	4618      	mov	r0, r3
 800190c:	3708      	adds	r7, #8
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	e000e010 	.word	0xe000e010

08001918 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001920:	6878      	ldr	r0, [r7, #4]
 8001922:	f7ff ff07 	bl	8001734 <__NVIC_SetPriorityGrouping>
}
 8001926:	bf00      	nop
 8001928:	3708      	adds	r7, #8
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}

0800192e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800192e:	b580      	push	{r7, lr}
 8001930:	b086      	sub	sp, #24
 8001932:	af00      	add	r7, sp, #0
 8001934:	4603      	mov	r3, r0
 8001936:	60b9      	str	r1, [r7, #8]
 8001938:	607a      	str	r2, [r7, #4]
 800193a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800193c:	2300      	movs	r3, #0
 800193e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001940:	f7ff ff1c 	bl	800177c <__NVIC_GetPriorityGrouping>
 8001944:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001946:	687a      	ldr	r2, [r7, #4]
 8001948:	68b9      	ldr	r1, [r7, #8]
 800194a:	6978      	ldr	r0, [r7, #20]
 800194c:	f7ff ff8e 	bl	800186c <NVIC_EncodePriority>
 8001950:	4602      	mov	r2, r0
 8001952:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001956:	4611      	mov	r1, r2
 8001958:	4618      	mov	r0, r3
 800195a:	f7ff ff5d 	bl	8001818 <__NVIC_SetPriority>
}
 800195e:	bf00      	nop
 8001960:	3718      	adds	r7, #24
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}

08001966 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001966:	b580      	push	{r7, lr}
 8001968:	b082      	sub	sp, #8
 800196a:	af00      	add	r7, sp, #0
 800196c:	4603      	mov	r3, r0
 800196e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001970:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001974:	4618      	mov	r0, r3
 8001976:	f7ff ff0f 	bl	8001798 <__NVIC_EnableIRQ>
}
 800197a:	bf00      	nop
 800197c:	3708      	adds	r7, #8
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}

08001982 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001982:	b580      	push	{r7, lr}
 8001984:	b082      	sub	sp, #8
 8001986:	af00      	add	r7, sp, #0
 8001988:	4603      	mov	r3, r0
 800198a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800198c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001990:	4618      	mov	r0, r3
 8001992:	f7ff ff1f 	bl	80017d4 <__NVIC_DisableIRQ>
}
 8001996:	bf00      	nop
 8001998:	3708      	adds	r7, #8
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}

0800199e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800199e:	b580      	push	{r7, lr}
 80019a0:	b082      	sub	sp, #8
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019a6:	6878      	ldr	r0, [r7, #4]
 80019a8:	f7ff ff94 	bl	80018d4 <SysTick_Config>
 80019ac:	4603      	mov	r3, r0
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3708      	adds	r7, #8
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
	...

080019b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b089      	sub	sp, #36	; 0x24
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
 80019c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80019c2:	2300      	movs	r3, #0
 80019c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80019c6:	2300      	movs	r3, #0
 80019c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80019ca:	2300      	movs	r3, #0
 80019cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019ce:	2300      	movs	r3, #0
 80019d0:	61fb      	str	r3, [r7, #28]
 80019d2:	e159      	b.n	8001c88 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019d4:	2201      	movs	r2, #1
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	fa02 f303 	lsl.w	r3, r2, r3
 80019dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	697a      	ldr	r2, [r7, #20]
 80019e4:	4013      	ands	r3, r2
 80019e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019e8:	693a      	ldr	r2, [r7, #16]
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	429a      	cmp	r2, r3
 80019ee:	f040 8148 	bne.w	8001c82 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	2b01      	cmp	r3, #1
 80019f8:	d00b      	beq.n	8001a12 <HAL_GPIO_Init+0x5a>
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	2b02      	cmp	r3, #2
 8001a00:	d007      	beq.n	8001a12 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a06:	2b11      	cmp	r3, #17
 8001a08:	d003      	beq.n	8001a12 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	2b12      	cmp	r3, #18
 8001a10:	d130      	bne.n	8001a74 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	689b      	ldr	r3, [r3, #8]
 8001a16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a18:	69fb      	ldr	r3, [r7, #28]
 8001a1a:	005b      	lsls	r3, r3, #1
 8001a1c:	2203      	movs	r2, #3
 8001a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a22:	43db      	mvns	r3, r3
 8001a24:	69ba      	ldr	r2, [r7, #24]
 8001a26:	4013      	ands	r3, r2
 8001a28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	68da      	ldr	r2, [r3, #12]
 8001a2e:	69fb      	ldr	r3, [r7, #28]
 8001a30:	005b      	lsls	r3, r3, #1
 8001a32:	fa02 f303 	lsl.w	r3, r2, r3
 8001a36:	69ba      	ldr	r2, [r7, #24]
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	69ba      	ldr	r2, [r7, #24]
 8001a40:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a48:	2201      	movs	r2, #1
 8001a4a:	69fb      	ldr	r3, [r7, #28]
 8001a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a50:	43db      	mvns	r3, r3
 8001a52:	69ba      	ldr	r2, [r7, #24]
 8001a54:	4013      	ands	r3, r2
 8001a56:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	091b      	lsrs	r3, r3, #4
 8001a5e:	f003 0201 	and.w	r2, r3, #1
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	fa02 f303 	lsl.w	r3, r2, r3
 8001a68:	69ba      	ldr	r2, [r7, #24]
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	69ba      	ldr	r2, [r7, #24]
 8001a72:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	68db      	ldr	r3, [r3, #12]
 8001a78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	005b      	lsls	r3, r3, #1
 8001a7e:	2203      	movs	r2, #3
 8001a80:	fa02 f303 	lsl.w	r3, r2, r3
 8001a84:	43db      	mvns	r3, r3
 8001a86:	69ba      	ldr	r2, [r7, #24]
 8001a88:	4013      	ands	r3, r2
 8001a8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	689a      	ldr	r2, [r3, #8]
 8001a90:	69fb      	ldr	r3, [r7, #28]
 8001a92:	005b      	lsls	r3, r3, #1
 8001a94:	fa02 f303 	lsl.w	r3, r2, r3
 8001a98:	69ba      	ldr	r2, [r7, #24]
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	69ba      	ldr	r2, [r7, #24]
 8001aa2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	2b02      	cmp	r3, #2
 8001aaa:	d003      	beq.n	8001ab4 <HAL_GPIO_Init+0xfc>
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	2b12      	cmp	r3, #18
 8001ab2:	d123      	bne.n	8001afc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ab4:	69fb      	ldr	r3, [r7, #28]
 8001ab6:	08da      	lsrs	r2, r3, #3
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	3208      	adds	r2, #8
 8001abc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ac0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	f003 0307 	and.w	r3, r3, #7
 8001ac8:	009b      	lsls	r3, r3, #2
 8001aca:	220f      	movs	r2, #15
 8001acc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad0:	43db      	mvns	r3, r3
 8001ad2:	69ba      	ldr	r2, [r7, #24]
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	691a      	ldr	r2, [r3, #16]
 8001adc:	69fb      	ldr	r3, [r7, #28]
 8001ade:	f003 0307 	and.w	r3, r3, #7
 8001ae2:	009b      	lsls	r3, r3, #2
 8001ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae8:	69ba      	ldr	r2, [r7, #24]
 8001aea:	4313      	orrs	r3, r2
 8001aec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	08da      	lsrs	r2, r3, #3
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	3208      	adds	r2, #8
 8001af6:	69b9      	ldr	r1, [r7, #24]
 8001af8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	005b      	lsls	r3, r3, #1
 8001b06:	2203      	movs	r2, #3
 8001b08:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0c:	43db      	mvns	r3, r3
 8001b0e:	69ba      	ldr	r2, [r7, #24]
 8001b10:	4013      	ands	r3, r2
 8001b12:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f003 0203 	and.w	r2, r3, #3
 8001b1c:	69fb      	ldr	r3, [r7, #28]
 8001b1e:	005b      	lsls	r3, r3, #1
 8001b20:	fa02 f303 	lsl.w	r3, r2, r3
 8001b24:	69ba      	ldr	r2, [r7, #24]
 8001b26:	4313      	orrs	r3, r2
 8001b28:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	69ba      	ldr	r2, [r7, #24]
 8001b2e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	f000 80a2 	beq.w	8001c82 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b3e:	2300      	movs	r3, #0
 8001b40:	60fb      	str	r3, [r7, #12]
 8001b42:	4b56      	ldr	r3, [pc, #344]	; (8001c9c <HAL_GPIO_Init+0x2e4>)
 8001b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b46:	4a55      	ldr	r2, [pc, #340]	; (8001c9c <HAL_GPIO_Init+0x2e4>)
 8001b48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b4c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b4e:	4b53      	ldr	r3, [pc, #332]	; (8001c9c <HAL_GPIO_Init+0x2e4>)
 8001b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b56:	60fb      	str	r3, [r7, #12]
 8001b58:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b5a:	4a51      	ldr	r2, [pc, #324]	; (8001ca0 <HAL_GPIO_Init+0x2e8>)
 8001b5c:	69fb      	ldr	r3, [r7, #28]
 8001b5e:	089b      	lsrs	r3, r3, #2
 8001b60:	3302      	adds	r3, #2
 8001b62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b68:	69fb      	ldr	r3, [r7, #28]
 8001b6a:	f003 0303 	and.w	r3, r3, #3
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	220f      	movs	r2, #15
 8001b72:	fa02 f303 	lsl.w	r3, r2, r3
 8001b76:	43db      	mvns	r3, r3
 8001b78:	69ba      	ldr	r2, [r7, #24]
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	4a48      	ldr	r2, [pc, #288]	; (8001ca4 <HAL_GPIO_Init+0x2ec>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d019      	beq.n	8001bba <HAL_GPIO_Init+0x202>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	4a47      	ldr	r2, [pc, #284]	; (8001ca8 <HAL_GPIO_Init+0x2f0>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d013      	beq.n	8001bb6 <HAL_GPIO_Init+0x1fe>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	4a46      	ldr	r2, [pc, #280]	; (8001cac <HAL_GPIO_Init+0x2f4>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d00d      	beq.n	8001bb2 <HAL_GPIO_Init+0x1fa>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	4a45      	ldr	r2, [pc, #276]	; (8001cb0 <HAL_GPIO_Init+0x2f8>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d007      	beq.n	8001bae <HAL_GPIO_Init+0x1f6>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	4a44      	ldr	r2, [pc, #272]	; (8001cb4 <HAL_GPIO_Init+0x2fc>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d101      	bne.n	8001baa <HAL_GPIO_Init+0x1f2>
 8001ba6:	2304      	movs	r3, #4
 8001ba8:	e008      	b.n	8001bbc <HAL_GPIO_Init+0x204>
 8001baa:	2307      	movs	r3, #7
 8001bac:	e006      	b.n	8001bbc <HAL_GPIO_Init+0x204>
 8001bae:	2303      	movs	r3, #3
 8001bb0:	e004      	b.n	8001bbc <HAL_GPIO_Init+0x204>
 8001bb2:	2302      	movs	r3, #2
 8001bb4:	e002      	b.n	8001bbc <HAL_GPIO_Init+0x204>
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e000      	b.n	8001bbc <HAL_GPIO_Init+0x204>
 8001bba:	2300      	movs	r3, #0
 8001bbc:	69fa      	ldr	r2, [r7, #28]
 8001bbe:	f002 0203 	and.w	r2, r2, #3
 8001bc2:	0092      	lsls	r2, r2, #2
 8001bc4:	4093      	lsls	r3, r2
 8001bc6:	69ba      	ldr	r2, [r7, #24]
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001bcc:	4934      	ldr	r1, [pc, #208]	; (8001ca0 <HAL_GPIO_Init+0x2e8>)
 8001bce:	69fb      	ldr	r3, [r7, #28]
 8001bd0:	089b      	lsrs	r3, r3, #2
 8001bd2:	3302      	adds	r3, #2
 8001bd4:	69ba      	ldr	r2, [r7, #24]
 8001bd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bda:	4b37      	ldr	r3, [pc, #220]	; (8001cb8 <HAL_GPIO_Init+0x300>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	43db      	mvns	r3, r3
 8001be4:	69ba      	ldr	r2, [r7, #24]
 8001be6:	4013      	ands	r3, r2
 8001be8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d003      	beq.n	8001bfe <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001bf6:	69ba      	ldr	r2, [r7, #24]
 8001bf8:	693b      	ldr	r3, [r7, #16]
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001bfe:	4a2e      	ldr	r2, [pc, #184]	; (8001cb8 <HAL_GPIO_Init+0x300>)
 8001c00:	69bb      	ldr	r3, [r7, #24]
 8001c02:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001c04:	4b2c      	ldr	r3, [pc, #176]	; (8001cb8 <HAL_GPIO_Init+0x300>)
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	43db      	mvns	r3, r3
 8001c0e:	69ba      	ldr	r2, [r7, #24]
 8001c10:	4013      	ands	r3, r2
 8001c12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d003      	beq.n	8001c28 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001c20:	69ba      	ldr	r2, [r7, #24]
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	4313      	orrs	r3, r2
 8001c26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c28:	4a23      	ldr	r2, [pc, #140]	; (8001cb8 <HAL_GPIO_Init+0x300>)
 8001c2a:	69bb      	ldr	r3, [r7, #24]
 8001c2c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c2e:	4b22      	ldr	r3, [pc, #136]	; (8001cb8 <HAL_GPIO_Init+0x300>)
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	43db      	mvns	r3, r3
 8001c38:	69ba      	ldr	r2, [r7, #24]
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d003      	beq.n	8001c52 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001c4a:	69ba      	ldr	r2, [r7, #24]
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c52:	4a19      	ldr	r2, [pc, #100]	; (8001cb8 <HAL_GPIO_Init+0x300>)
 8001c54:	69bb      	ldr	r3, [r7, #24]
 8001c56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c58:	4b17      	ldr	r3, [pc, #92]	; (8001cb8 <HAL_GPIO_Init+0x300>)
 8001c5a:	68db      	ldr	r3, [r3, #12]
 8001c5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	43db      	mvns	r3, r3
 8001c62:	69ba      	ldr	r2, [r7, #24]
 8001c64:	4013      	ands	r3, r2
 8001c66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d003      	beq.n	8001c7c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001c74:	69ba      	ldr	r2, [r7, #24]
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c7c:	4a0e      	ldr	r2, [pc, #56]	; (8001cb8 <HAL_GPIO_Init+0x300>)
 8001c7e:	69bb      	ldr	r3, [r7, #24]
 8001c80:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	3301      	adds	r3, #1
 8001c86:	61fb      	str	r3, [r7, #28]
 8001c88:	69fb      	ldr	r3, [r7, #28]
 8001c8a:	2b0f      	cmp	r3, #15
 8001c8c:	f67f aea2 	bls.w	80019d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c90:	bf00      	nop
 8001c92:	3724      	adds	r7, #36	; 0x24
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr
 8001c9c:	40023800 	.word	0x40023800
 8001ca0:	40013800 	.word	0x40013800
 8001ca4:	40020000 	.word	0x40020000
 8001ca8:	40020400 	.word	0x40020400
 8001cac:	40020800 	.word	0x40020800
 8001cb0:	40020c00 	.word	0x40020c00
 8001cb4:	40021000 	.word	0x40021000
 8001cb8:	40013c00 	.word	0x40013c00

08001cbc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b085      	sub	sp, #20
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
 8001cc4:	460b      	mov	r3, r1
 8001cc6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	691a      	ldr	r2, [r3, #16]
 8001ccc:	887b      	ldrh	r3, [r7, #2]
 8001cce:	4013      	ands	r3, r2
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d002      	beq.n	8001cda <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	73fb      	strb	r3, [r7, #15]
 8001cd8:	e001      	b.n	8001cde <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001cde:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3714      	adds	r7, #20
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr

08001cec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b083      	sub	sp, #12
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
 8001cf4:	460b      	mov	r3, r1
 8001cf6:	807b      	strh	r3, [r7, #2]
 8001cf8:	4613      	mov	r3, r2
 8001cfa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001cfc:	787b      	ldrb	r3, [r7, #1]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d003      	beq.n	8001d0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d02:	887a      	ldrh	r2, [r7, #2]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d08:	e003      	b.n	8001d12 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d0a:	887b      	ldrh	r3, [r7, #2]
 8001d0c:	041a      	lsls	r2, r3, #16
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	619a      	str	r2, [r3, #24]
}
 8001d12:	bf00      	nop
 8001d14:	370c      	adds	r7, #12
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr
	...

08001d20 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	4603      	mov	r3, r0
 8001d28:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001d2a:	4b08      	ldr	r3, [pc, #32]	; (8001d4c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d2c:	695a      	ldr	r2, [r3, #20]
 8001d2e:	88fb      	ldrh	r3, [r7, #6]
 8001d30:	4013      	ands	r3, r2
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d006      	beq.n	8001d44 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001d36:	4a05      	ldr	r2, [pc, #20]	; (8001d4c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d38:	88fb      	ldrh	r3, [r7, #6]
 8001d3a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001d3c:	88fb      	ldrh	r3, [r7, #6]
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f7ff faae 	bl	80012a0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001d44:	bf00      	nop
 8001d46:	3708      	adds	r7, #8
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	40013c00 	.word	0x40013c00

08001d50 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b086      	sub	sp, #24
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d101      	bne.n	8001d62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e25b      	b.n	800221a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 0301 	and.w	r3, r3, #1
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d075      	beq.n	8001e5a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d6e:	4ba3      	ldr	r3, [pc, #652]	; (8001ffc <HAL_RCC_OscConfig+0x2ac>)
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	f003 030c 	and.w	r3, r3, #12
 8001d76:	2b04      	cmp	r3, #4
 8001d78:	d00c      	beq.n	8001d94 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d7a:	4ba0      	ldr	r3, [pc, #640]	; (8001ffc <HAL_RCC_OscConfig+0x2ac>)
 8001d7c:	689b      	ldr	r3, [r3, #8]
 8001d7e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d82:	2b08      	cmp	r3, #8
 8001d84:	d112      	bne.n	8001dac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d86:	4b9d      	ldr	r3, [pc, #628]	; (8001ffc <HAL_RCC_OscConfig+0x2ac>)
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d8e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d92:	d10b      	bne.n	8001dac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d94:	4b99      	ldr	r3, [pc, #612]	; (8001ffc <HAL_RCC_OscConfig+0x2ac>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d05b      	beq.n	8001e58 <HAL_RCC_OscConfig+0x108>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d157      	bne.n	8001e58 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001da8:	2301      	movs	r3, #1
 8001daa:	e236      	b.n	800221a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001db4:	d106      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x74>
 8001db6:	4b91      	ldr	r3, [pc, #580]	; (8001ffc <HAL_RCC_OscConfig+0x2ac>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a90      	ldr	r2, [pc, #576]	; (8001ffc <HAL_RCC_OscConfig+0x2ac>)
 8001dbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dc0:	6013      	str	r3, [r2, #0]
 8001dc2:	e01d      	b.n	8001e00 <HAL_RCC_OscConfig+0xb0>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001dcc:	d10c      	bne.n	8001de8 <HAL_RCC_OscConfig+0x98>
 8001dce:	4b8b      	ldr	r3, [pc, #556]	; (8001ffc <HAL_RCC_OscConfig+0x2ac>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a8a      	ldr	r2, [pc, #552]	; (8001ffc <HAL_RCC_OscConfig+0x2ac>)
 8001dd4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001dd8:	6013      	str	r3, [r2, #0]
 8001dda:	4b88      	ldr	r3, [pc, #544]	; (8001ffc <HAL_RCC_OscConfig+0x2ac>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a87      	ldr	r2, [pc, #540]	; (8001ffc <HAL_RCC_OscConfig+0x2ac>)
 8001de0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001de4:	6013      	str	r3, [r2, #0]
 8001de6:	e00b      	b.n	8001e00 <HAL_RCC_OscConfig+0xb0>
 8001de8:	4b84      	ldr	r3, [pc, #528]	; (8001ffc <HAL_RCC_OscConfig+0x2ac>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a83      	ldr	r2, [pc, #524]	; (8001ffc <HAL_RCC_OscConfig+0x2ac>)
 8001dee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001df2:	6013      	str	r3, [r2, #0]
 8001df4:	4b81      	ldr	r3, [pc, #516]	; (8001ffc <HAL_RCC_OscConfig+0x2ac>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a80      	ldr	r2, [pc, #512]	; (8001ffc <HAL_RCC_OscConfig+0x2ac>)
 8001dfa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dfe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d013      	beq.n	8001e30 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e08:	f7ff fc66 	bl	80016d8 <HAL_GetTick>
 8001e0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e0e:	e008      	b.n	8001e22 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e10:	f7ff fc62 	bl	80016d8 <HAL_GetTick>
 8001e14:	4602      	mov	r2, r0
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	2b64      	cmp	r3, #100	; 0x64
 8001e1c:	d901      	bls.n	8001e22 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	e1fb      	b.n	800221a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e22:	4b76      	ldr	r3, [pc, #472]	; (8001ffc <HAL_RCC_OscConfig+0x2ac>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d0f0      	beq.n	8001e10 <HAL_RCC_OscConfig+0xc0>
 8001e2e:	e014      	b.n	8001e5a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e30:	f7ff fc52 	bl	80016d8 <HAL_GetTick>
 8001e34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e36:	e008      	b.n	8001e4a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e38:	f7ff fc4e 	bl	80016d8 <HAL_GetTick>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	1ad3      	subs	r3, r2, r3
 8001e42:	2b64      	cmp	r3, #100	; 0x64
 8001e44:	d901      	bls.n	8001e4a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e46:	2303      	movs	r3, #3
 8001e48:	e1e7      	b.n	800221a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e4a:	4b6c      	ldr	r3, [pc, #432]	; (8001ffc <HAL_RCC_OscConfig+0x2ac>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d1f0      	bne.n	8001e38 <HAL_RCC_OscConfig+0xe8>
 8001e56:	e000      	b.n	8001e5a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f003 0302 	and.w	r3, r3, #2
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d063      	beq.n	8001f2e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e66:	4b65      	ldr	r3, [pc, #404]	; (8001ffc <HAL_RCC_OscConfig+0x2ac>)
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	f003 030c 	and.w	r3, r3, #12
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d00b      	beq.n	8001e8a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e72:	4b62      	ldr	r3, [pc, #392]	; (8001ffc <HAL_RCC_OscConfig+0x2ac>)
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e7a:	2b08      	cmp	r3, #8
 8001e7c:	d11c      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e7e:	4b5f      	ldr	r3, [pc, #380]	; (8001ffc <HAL_RCC_OscConfig+0x2ac>)
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d116      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e8a:	4b5c      	ldr	r3, [pc, #368]	; (8001ffc <HAL_RCC_OscConfig+0x2ac>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f003 0302 	and.w	r3, r3, #2
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d005      	beq.n	8001ea2 <HAL_RCC_OscConfig+0x152>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	68db      	ldr	r3, [r3, #12]
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	d001      	beq.n	8001ea2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e1bb      	b.n	800221a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ea2:	4b56      	ldr	r3, [pc, #344]	; (8001ffc <HAL_RCC_OscConfig+0x2ac>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	691b      	ldr	r3, [r3, #16]
 8001eae:	00db      	lsls	r3, r3, #3
 8001eb0:	4952      	ldr	r1, [pc, #328]	; (8001ffc <HAL_RCC_OscConfig+0x2ac>)
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001eb6:	e03a      	b.n	8001f2e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d020      	beq.n	8001f02 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ec0:	4b4f      	ldr	r3, [pc, #316]	; (8002000 <HAL_RCC_OscConfig+0x2b0>)
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ec6:	f7ff fc07 	bl	80016d8 <HAL_GetTick>
 8001eca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ecc:	e008      	b.n	8001ee0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ece:	f7ff fc03 	bl	80016d8 <HAL_GetTick>
 8001ed2:	4602      	mov	r2, r0
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	1ad3      	subs	r3, r2, r3
 8001ed8:	2b02      	cmp	r3, #2
 8001eda:	d901      	bls.n	8001ee0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001edc:	2303      	movs	r3, #3
 8001ede:	e19c      	b.n	800221a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ee0:	4b46      	ldr	r3, [pc, #280]	; (8001ffc <HAL_RCC_OscConfig+0x2ac>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f003 0302 	and.w	r3, r3, #2
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d0f0      	beq.n	8001ece <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eec:	4b43      	ldr	r3, [pc, #268]	; (8001ffc <HAL_RCC_OscConfig+0x2ac>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	691b      	ldr	r3, [r3, #16]
 8001ef8:	00db      	lsls	r3, r3, #3
 8001efa:	4940      	ldr	r1, [pc, #256]	; (8001ffc <HAL_RCC_OscConfig+0x2ac>)
 8001efc:	4313      	orrs	r3, r2
 8001efe:	600b      	str	r3, [r1, #0]
 8001f00:	e015      	b.n	8001f2e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f02:	4b3f      	ldr	r3, [pc, #252]	; (8002000 <HAL_RCC_OscConfig+0x2b0>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f08:	f7ff fbe6 	bl	80016d8 <HAL_GetTick>
 8001f0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f0e:	e008      	b.n	8001f22 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f10:	f7ff fbe2 	bl	80016d8 <HAL_GetTick>
 8001f14:	4602      	mov	r2, r0
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	2b02      	cmp	r3, #2
 8001f1c:	d901      	bls.n	8001f22 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	e17b      	b.n	800221a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f22:	4b36      	ldr	r3, [pc, #216]	; (8001ffc <HAL_RCC_OscConfig+0x2ac>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f003 0302 	and.w	r3, r3, #2
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d1f0      	bne.n	8001f10 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f003 0308 	and.w	r3, r3, #8
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d030      	beq.n	8001f9c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	695b      	ldr	r3, [r3, #20]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d016      	beq.n	8001f70 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f42:	4b30      	ldr	r3, [pc, #192]	; (8002004 <HAL_RCC_OscConfig+0x2b4>)
 8001f44:	2201      	movs	r2, #1
 8001f46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f48:	f7ff fbc6 	bl	80016d8 <HAL_GetTick>
 8001f4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f4e:	e008      	b.n	8001f62 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f50:	f7ff fbc2 	bl	80016d8 <HAL_GetTick>
 8001f54:	4602      	mov	r2, r0
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	2b02      	cmp	r3, #2
 8001f5c:	d901      	bls.n	8001f62 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001f5e:	2303      	movs	r3, #3
 8001f60:	e15b      	b.n	800221a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f62:	4b26      	ldr	r3, [pc, #152]	; (8001ffc <HAL_RCC_OscConfig+0x2ac>)
 8001f64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f66:	f003 0302 	and.w	r3, r3, #2
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d0f0      	beq.n	8001f50 <HAL_RCC_OscConfig+0x200>
 8001f6e:	e015      	b.n	8001f9c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f70:	4b24      	ldr	r3, [pc, #144]	; (8002004 <HAL_RCC_OscConfig+0x2b4>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f76:	f7ff fbaf 	bl	80016d8 <HAL_GetTick>
 8001f7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f7c:	e008      	b.n	8001f90 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f7e:	f7ff fbab 	bl	80016d8 <HAL_GetTick>
 8001f82:	4602      	mov	r2, r0
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	1ad3      	subs	r3, r2, r3
 8001f88:	2b02      	cmp	r3, #2
 8001f8a:	d901      	bls.n	8001f90 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001f8c:	2303      	movs	r3, #3
 8001f8e:	e144      	b.n	800221a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f90:	4b1a      	ldr	r3, [pc, #104]	; (8001ffc <HAL_RCC_OscConfig+0x2ac>)
 8001f92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f94:	f003 0302 	and.w	r3, r3, #2
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d1f0      	bne.n	8001f7e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f003 0304 	and.w	r3, r3, #4
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	f000 80a0 	beq.w	80020ea <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001faa:	2300      	movs	r3, #0
 8001fac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fae:	4b13      	ldr	r3, [pc, #76]	; (8001ffc <HAL_RCC_OscConfig+0x2ac>)
 8001fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d10f      	bne.n	8001fda <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fba:	2300      	movs	r3, #0
 8001fbc:	60bb      	str	r3, [r7, #8]
 8001fbe:	4b0f      	ldr	r3, [pc, #60]	; (8001ffc <HAL_RCC_OscConfig+0x2ac>)
 8001fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc2:	4a0e      	ldr	r2, [pc, #56]	; (8001ffc <HAL_RCC_OscConfig+0x2ac>)
 8001fc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fc8:	6413      	str	r3, [r2, #64]	; 0x40
 8001fca:	4b0c      	ldr	r3, [pc, #48]	; (8001ffc <HAL_RCC_OscConfig+0x2ac>)
 8001fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fd2:	60bb      	str	r3, [r7, #8]
 8001fd4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fda:	4b0b      	ldr	r3, [pc, #44]	; (8002008 <HAL_RCC_OscConfig+0x2b8>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d121      	bne.n	800202a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fe6:	4b08      	ldr	r3, [pc, #32]	; (8002008 <HAL_RCC_OscConfig+0x2b8>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a07      	ldr	r2, [pc, #28]	; (8002008 <HAL_RCC_OscConfig+0x2b8>)
 8001fec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ff0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ff2:	f7ff fb71 	bl	80016d8 <HAL_GetTick>
 8001ff6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ff8:	e011      	b.n	800201e <HAL_RCC_OscConfig+0x2ce>
 8001ffa:	bf00      	nop
 8001ffc:	40023800 	.word	0x40023800
 8002000:	42470000 	.word	0x42470000
 8002004:	42470e80 	.word	0x42470e80
 8002008:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800200c:	f7ff fb64 	bl	80016d8 <HAL_GetTick>
 8002010:	4602      	mov	r2, r0
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	1ad3      	subs	r3, r2, r3
 8002016:	2b02      	cmp	r3, #2
 8002018:	d901      	bls.n	800201e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800201a:	2303      	movs	r3, #3
 800201c:	e0fd      	b.n	800221a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800201e:	4b81      	ldr	r3, [pc, #516]	; (8002224 <HAL_RCC_OscConfig+0x4d4>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002026:	2b00      	cmp	r3, #0
 8002028:	d0f0      	beq.n	800200c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	2b01      	cmp	r3, #1
 8002030:	d106      	bne.n	8002040 <HAL_RCC_OscConfig+0x2f0>
 8002032:	4b7d      	ldr	r3, [pc, #500]	; (8002228 <HAL_RCC_OscConfig+0x4d8>)
 8002034:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002036:	4a7c      	ldr	r2, [pc, #496]	; (8002228 <HAL_RCC_OscConfig+0x4d8>)
 8002038:	f043 0301 	orr.w	r3, r3, #1
 800203c:	6713      	str	r3, [r2, #112]	; 0x70
 800203e:	e01c      	b.n	800207a <HAL_RCC_OscConfig+0x32a>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	2b05      	cmp	r3, #5
 8002046:	d10c      	bne.n	8002062 <HAL_RCC_OscConfig+0x312>
 8002048:	4b77      	ldr	r3, [pc, #476]	; (8002228 <HAL_RCC_OscConfig+0x4d8>)
 800204a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800204c:	4a76      	ldr	r2, [pc, #472]	; (8002228 <HAL_RCC_OscConfig+0x4d8>)
 800204e:	f043 0304 	orr.w	r3, r3, #4
 8002052:	6713      	str	r3, [r2, #112]	; 0x70
 8002054:	4b74      	ldr	r3, [pc, #464]	; (8002228 <HAL_RCC_OscConfig+0x4d8>)
 8002056:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002058:	4a73      	ldr	r2, [pc, #460]	; (8002228 <HAL_RCC_OscConfig+0x4d8>)
 800205a:	f043 0301 	orr.w	r3, r3, #1
 800205e:	6713      	str	r3, [r2, #112]	; 0x70
 8002060:	e00b      	b.n	800207a <HAL_RCC_OscConfig+0x32a>
 8002062:	4b71      	ldr	r3, [pc, #452]	; (8002228 <HAL_RCC_OscConfig+0x4d8>)
 8002064:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002066:	4a70      	ldr	r2, [pc, #448]	; (8002228 <HAL_RCC_OscConfig+0x4d8>)
 8002068:	f023 0301 	bic.w	r3, r3, #1
 800206c:	6713      	str	r3, [r2, #112]	; 0x70
 800206e:	4b6e      	ldr	r3, [pc, #440]	; (8002228 <HAL_RCC_OscConfig+0x4d8>)
 8002070:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002072:	4a6d      	ldr	r2, [pc, #436]	; (8002228 <HAL_RCC_OscConfig+0x4d8>)
 8002074:	f023 0304 	bic.w	r3, r3, #4
 8002078:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d015      	beq.n	80020ae <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002082:	f7ff fb29 	bl	80016d8 <HAL_GetTick>
 8002086:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002088:	e00a      	b.n	80020a0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800208a:	f7ff fb25 	bl	80016d8 <HAL_GetTick>
 800208e:	4602      	mov	r2, r0
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	1ad3      	subs	r3, r2, r3
 8002094:	f241 3288 	movw	r2, #5000	; 0x1388
 8002098:	4293      	cmp	r3, r2
 800209a:	d901      	bls.n	80020a0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800209c:	2303      	movs	r3, #3
 800209e:	e0bc      	b.n	800221a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020a0:	4b61      	ldr	r3, [pc, #388]	; (8002228 <HAL_RCC_OscConfig+0x4d8>)
 80020a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020a4:	f003 0302 	and.w	r3, r3, #2
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d0ee      	beq.n	800208a <HAL_RCC_OscConfig+0x33a>
 80020ac:	e014      	b.n	80020d8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020ae:	f7ff fb13 	bl	80016d8 <HAL_GetTick>
 80020b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020b4:	e00a      	b.n	80020cc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020b6:	f7ff fb0f 	bl	80016d8 <HAL_GetTick>
 80020ba:	4602      	mov	r2, r0
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	1ad3      	subs	r3, r2, r3
 80020c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d901      	bls.n	80020cc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80020c8:	2303      	movs	r3, #3
 80020ca:	e0a6      	b.n	800221a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020cc:	4b56      	ldr	r3, [pc, #344]	; (8002228 <HAL_RCC_OscConfig+0x4d8>)
 80020ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020d0:	f003 0302 	and.w	r3, r3, #2
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d1ee      	bne.n	80020b6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80020d8:	7dfb      	ldrb	r3, [r7, #23]
 80020da:	2b01      	cmp	r3, #1
 80020dc:	d105      	bne.n	80020ea <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020de:	4b52      	ldr	r3, [pc, #328]	; (8002228 <HAL_RCC_OscConfig+0x4d8>)
 80020e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e2:	4a51      	ldr	r2, [pc, #324]	; (8002228 <HAL_RCC_OscConfig+0x4d8>)
 80020e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020e8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	699b      	ldr	r3, [r3, #24]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	f000 8092 	beq.w	8002218 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80020f4:	4b4c      	ldr	r3, [pc, #304]	; (8002228 <HAL_RCC_OscConfig+0x4d8>)
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	f003 030c 	and.w	r3, r3, #12
 80020fc:	2b08      	cmp	r3, #8
 80020fe:	d05c      	beq.n	80021ba <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	699b      	ldr	r3, [r3, #24]
 8002104:	2b02      	cmp	r3, #2
 8002106:	d141      	bne.n	800218c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002108:	4b48      	ldr	r3, [pc, #288]	; (800222c <HAL_RCC_OscConfig+0x4dc>)
 800210a:	2200      	movs	r2, #0
 800210c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800210e:	f7ff fae3 	bl	80016d8 <HAL_GetTick>
 8002112:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002114:	e008      	b.n	8002128 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002116:	f7ff fadf 	bl	80016d8 <HAL_GetTick>
 800211a:	4602      	mov	r2, r0
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	1ad3      	subs	r3, r2, r3
 8002120:	2b02      	cmp	r3, #2
 8002122:	d901      	bls.n	8002128 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002124:	2303      	movs	r3, #3
 8002126:	e078      	b.n	800221a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002128:	4b3f      	ldr	r3, [pc, #252]	; (8002228 <HAL_RCC_OscConfig+0x4d8>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002130:	2b00      	cmp	r3, #0
 8002132:	d1f0      	bne.n	8002116 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	69da      	ldr	r2, [r3, #28]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6a1b      	ldr	r3, [r3, #32]
 800213c:	431a      	orrs	r2, r3
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002142:	019b      	lsls	r3, r3, #6
 8002144:	431a      	orrs	r2, r3
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800214a:	085b      	lsrs	r3, r3, #1
 800214c:	3b01      	subs	r3, #1
 800214e:	041b      	lsls	r3, r3, #16
 8002150:	431a      	orrs	r2, r3
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002156:	061b      	lsls	r3, r3, #24
 8002158:	4933      	ldr	r1, [pc, #204]	; (8002228 <HAL_RCC_OscConfig+0x4d8>)
 800215a:	4313      	orrs	r3, r2
 800215c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800215e:	4b33      	ldr	r3, [pc, #204]	; (800222c <HAL_RCC_OscConfig+0x4dc>)
 8002160:	2201      	movs	r2, #1
 8002162:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002164:	f7ff fab8 	bl	80016d8 <HAL_GetTick>
 8002168:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800216a:	e008      	b.n	800217e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800216c:	f7ff fab4 	bl	80016d8 <HAL_GetTick>
 8002170:	4602      	mov	r2, r0
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	2b02      	cmp	r3, #2
 8002178:	d901      	bls.n	800217e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800217a:	2303      	movs	r3, #3
 800217c:	e04d      	b.n	800221a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800217e:	4b2a      	ldr	r3, [pc, #168]	; (8002228 <HAL_RCC_OscConfig+0x4d8>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002186:	2b00      	cmp	r3, #0
 8002188:	d0f0      	beq.n	800216c <HAL_RCC_OscConfig+0x41c>
 800218a:	e045      	b.n	8002218 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800218c:	4b27      	ldr	r3, [pc, #156]	; (800222c <HAL_RCC_OscConfig+0x4dc>)
 800218e:	2200      	movs	r2, #0
 8002190:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002192:	f7ff faa1 	bl	80016d8 <HAL_GetTick>
 8002196:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002198:	e008      	b.n	80021ac <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800219a:	f7ff fa9d 	bl	80016d8 <HAL_GetTick>
 800219e:	4602      	mov	r2, r0
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	1ad3      	subs	r3, r2, r3
 80021a4:	2b02      	cmp	r3, #2
 80021a6:	d901      	bls.n	80021ac <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80021a8:	2303      	movs	r3, #3
 80021aa:	e036      	b.n	800221a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021ac:	4b1e      	ldr	r3, [pc, #120]	; (8002228 <HAL_RCC_OscConfig+0x4d8>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d1f0      	bne.n	800219a <HAL_RCC_OscConfig+0x44a>
 80021b8:	e02e      	b.n	8002218 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	699b      	ldr	r3, [r3, #24]
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d101      	bne.n	80021c6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e029      	b.n	800221a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80021c6:	4b18      	ldr	r3, [pc, #96]	; (8002228 <HAL_RCC_OscConfig+0x4d8>)
 80021c8:	689b      	ldr	r3, [r3, #8]
 80021ca:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	69db      	ldr	r3, [r3, #28]
 80021d6:	429a      	cmp	r2, r3
 80021d8:	d11c      	bne.n	8002214 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021e4:	429a      	cmp	r2, r3
 80021e6:	d115      	bne.n	8002214 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80021e8:	68fa      	ldr	r2, [r7, #12]
 80021ea:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80021ee:	4013      	ands	r3, r2
 80021f0:	687a      	ldr	r2, [r7, #4]
 80021f2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d10d      	bne.n	8002214 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002202:	429a      	cmp	r2, r3
 8002204:	d106      	bne.n	8002214 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002210:	429a      	cmp	r2, r3
 8002212:	d001      	beq.n	8002218 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002214:	2301      	movs	r3, #1
 8002216:	e000      	b.n	800221a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002218:	2300      	movs	r3, #0
}
 800221a:	4618      	mov	r0, r3
 800221c:	3718      	adds	r7, #24
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	40007000 	.word	0x40007000
 8002228:	40023800 	.word	0x40023800
 800222c:	42470060 	.word	0x42470060

08002230 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b084      	sub	sp, #16
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
 8002238:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d101      	bne.n	8002244 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	e0cc      	b.n	80023de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002244:	4b68      	ldr	r3, [pc, #416]	; (80023e8 <HAL_RCC_ClockConfig+0x1b8>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f003 030f 	and.w	r3, r3, #15
 800224c:	683a      	ldr	r2, [r7, #0]
 800224e:	429a      	cmp	r2, r3
 8002250:	d90c      	bls.n	800226c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002252:	4b65      	ldr	r3, [pc, #404]	; (80023e8 <HAL_RCC_ClockConfig+0x1b8>)
 8002254:	683a      	ldr	r2, [r7, #0]
 8002256:	b2d2      	uxtb	r2, r2
 8002258:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800225a:	4b63      	ldr	r3, [pc, #396]	; (80023e8 <HAL_RCC_ClockConfig+0x1b8>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 030f 	and.w	r3, r3, #15
 8002262:	683a      	ldr	r2, [r7, #0]
 8002264:	429a      	cmp	r2, r3
 8002266:	d001      	beq.n	800226c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002268:	2301      	movs	r3, #1
 800226a:	e0b8      	b.n	80023de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f003 0302 	and.w	r3, r3, #2
 8002274:	2b00      	cmp	r3, #0
 8002276:	d020      	beq.n	80022ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f003 0304 	and.w	r3, r3, #4
 8002280:	2b00      	cmp	r3, #0
 8002282:	d005      	beq.n	8002290 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002284:	4b59      	ldr	r3, [pc, #356]	; (80023ec <HAL_RCC_ClockConfig+0x1bc>)
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	4a58      	ldr	r2, [pc, #352]	; (80023ec <HAL_RCC_ClockConfig+0x1bc>)
 800228a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800228e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 0308 	and.w	r3, r3, #8
 8002298:	2b00      	cmp	r3, #0
 800229a:	d005      	beq.n	80022a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800229c:	4b53      	ldr	r3, [pc, #332]	; (80023ec <HAL_RCC_ClockConfig+0x1bc>)
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	4a52      	ldr	r2, [pc, #328]	; (80023ec <HAL_RCC_ClockConfig+0x1bc>)
 80022a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80022a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022a8:	4b50      	ldr	r3, [pc, #320]	; (80023ec <HAL_RCC_ClockConfig+0x1bc>)
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	494d      	ldr	r1, [pc, #308]	; (80023ec <HAL_RCC_ClockConfig+0x1bc>)
 80022b6:	4313      	orrs	r3, r2
 80022b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 0301 	and.w	r3, r3, #1
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d044      	beq.n	8002350 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	2b01      	cmp	r3, #1
 80022cc:	d107      	bne.n	80022de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022ce:	4b47      	ldr	r3, [pc, #284]	; (80023ec <HAL_RCC_ClockConfig+0x1bc>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d119      	bne.n	800230e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e07f      	b.n	80023de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	2b02      	cmp	r3, #2
 80022e4:	d003      	beq.n	80022ee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022ea:	2b03      	cmp	r3, #3
 80022ec:	d107      	bne.n	80022fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022ee:	4b3f      	ldr	r3, [pc, #252]	; (80023ec <HAL_RCC_ClockConfig+0x1bc>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d109      	bne.n	800230e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	e06f      	b.n	80023de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022fe:	4b3b      	ldr	r3, [pc, #236]	; (80023ec <HAL_RCC_ClockConfig+0x1bc>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 0302 	and.w	r3, r3, #2
 8002306:	2b00      	cmp	r3, #0
 8002308:	d101      	bne.n	800230e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e067      	b.n	80023de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800230e:	4b37      	ldr	r3, [pc, #220]	; (80023ec <HAL_RCC_ClockConfig+0x1bc>)
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	f023 0203 	bic.w	r2, r3, #3
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	4934      	ldr	r1, [pc, #208]	; (80023ec <HAL_RCC_ClockConfig+0x1bc>)
 800231c:	4313      	orrs	r3, r2
 800231e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002320:	f7ff f9da 	bl	80016d8 <HAL_GetTick>
 8002324:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002326:	e00a      	b.n	800233e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002328:	f7ff f9d6 	bl	80016d8 <HAL_GetTick>
 800232c:	4602      	mov	r2, r0
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	f241 3288 	movw	r2, #5000	; 0x1388
 8002336:	4293      	cmp	r3, r2
 8002338:	d901      	bls.n	800233e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800233a:	2303      	movs	r3, #3
 800233c:	e04f      	b.n	80023de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800233e:	4b2b      	ldr	r3, [pc, #172]	; (80023ec <HAL_RCC_ClockConfig+0x1bc>)
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	f003 020c 	and.w	r2, r3, #12
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	429a      	cmp	r2, r3
 800234e:	d1eb      	bne.n	8002328 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002350:	4b25      	ldr	r3, [pc, #148]	; (80023e8 <HAL_RCC_ClockConfig+0x1b8>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 030f 	and.w	r3, r3, #15
 8002358:	683a      	ldr	r2, [r7, #0]
 800235a:	429a      	cmp	r2, r3
 800235c:	d20c      	bcs.n	8002378 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800235e:	4b22      	ldr	r3, [pc, #136]	; (80023e8 <HAL_RCC_ClockConfig+0x1b8>)
 8002360:	683a      	ldr	r2, [r7, #0]
 8002362:	b2d2      	uxtb	r2, r2
 8002364:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002366:	4b20      	ldr	r3, [pc, #128]	; (80023e8 <HAL_RCC_ClockConfig+0x1b8>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 030f 	and.w	r3, r3, #15
 800236e:	683a      	ldr	r2, [r7, #0]
 8002370:	429a      	cmp	r2, r3
 8002372:	d001      	beq.n	8002378 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	e032      	b.n	80023de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 0304 	and.w	r3, r3, #4
 8002380:	2b00      	cmp	r3, #0
 8002382:	d008      	beq.n	8002396 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002384:	4b19      	ldr	r3, [pc, #100]	; (80023ec <HAL_RCC_ClockConfig+0x1bc>)
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	4916      	ldr	r1, [pc, #88]	; (80023ec <HAL_RCC_ClockConfig+0x1bc>)
 8002392:	4313      	orrs	r3, r2
 8002394:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 0308 	and.w	r3, r3, #8
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d009      	beq.n	80023b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023a2:	4b12      	ldr	r3, [pc, #72]	; (80023ec <HAL_RCC_ClockConfig+0x1bc>)
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	691b      	ldr	r3, [r3, #16]
 80023ae:	00db      	lsls	r3, r3, #3
 80023b0:	490e      	ldr	r1, [pc, #56]	; (80023ec <HAL_RCC_ClockConfig+0x1bc>)
 80023b2:	4313      	orrs	r3, r2
 80023b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80023b6:	f000 f821 	bl	80023fc <HAL_RCC_GetSysClockFreq>
 80023ba:	4601      	mov	r1, r0
 80023bc:	4b0b      	ldr	r3, [pc, #44]	; (80023ec <HAL_RCC_ClockConfig+0x1bc>)
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	091b      	lsrs	r3, r3, #4
 80023c2:	f003 030f 	and.w	r3, r3, #15
 80023c6:	4a0a      	ldr	r2, [pc, #40]	; (80023f0 <HAL_RCC_ClockConfig+0x1c0>)
 80023c8:	5cd3      	ldrb	r3, [r2, r3]
 80023ca:	fa21 f303 	lsr.w	r3, r1, r3
 80023ce:	4a09      	ldr	r2, [pc, #36]	; (80023f4 <HAL_RCC_ClockConfig+0x1c4>)
 80023d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80023d2:	4b09      	ldr	r3, [pc, #36]	; (80023f8 <HAL_RCC_ClockConfig+0x1c8>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4618      	mov	r0, r3
 80023d8:	f7ff f93a 	bl	8001650 <HAL_InitTick>

  return HAL_OK;
 80023dc:	2300      	movs	r3, #0
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3710      	adds	r7, #16
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	40023c00 	.word	0x40023c00
 80023ec:	40023800 	.word	0x40023800
 80023f0:	0800399c 	.word	0x0800399c
 80023f4:	20000008 	.word	0x20000008
 80023f8:	2000000c 	.word	0x2000000c

080023fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023fe:	b085      	sub	sp, #20
 8002400:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002402:	2300      	movs	r3, #0
 8002404:	607b      	str	r3, [r7, #4]
 8002406:	2300      	movs	r3, #0
 8002408:	60fb      	str	r3, [r7, #12]
 800240a:	2300      	movs	r3, #0
 800240c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800240e:	2300      	movs	r3, #0
 8002410:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002412:	4b63      	ldr	r3, [pc, #396]	; (80025a0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	f003 030c 	and.w	r3, r3, #12
 800241a:	2b04      	cmp	r3, #4
 800241c:	d007      	beq.n	800242e <HAL_RCC_GetSysClockFreq+0x32>
 800241e:	2b08      	cmp	r3, #8
 8002420:	d008      	beq.n	8002434 <HAL_RCC_GetSysClockFreq+0x38>
 8002422:	2b00      	cmp	r3, #0
 8002424:	f040 80b4 	bne.w	8002590 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002428:	4b5e      	ldr	r3, [pc, #376]	; (80025a4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800242a:	60bb      	str	r3, [r7, #8]
       break;
 800242c:	e0b3      	b.n	8002596 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800242e:	4b5e      	ldr	r3, [pc, #376]	; (80025a8 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002430:	60bb      	str	r3, [r7, #8]
      break;
 8002432:	e0b0      	b.n	8002596 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002434:	4b5a      	ldr	r3, [pc, #360]	; (80025a0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800243c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800243e:	4b58      	ldr	r3, [pc, #352]	; (80025a0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002446:	2b00      	cmp	r3, #0
 8002448:	d04a      	beq.n	80024e0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800244a:	4b55      	ldr	r3, [pc, #340]	; (80025a0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	099b      	lsrs	r3, r3, #6
 8002450:	f04f 0400 	mov.w	r4, #0
 8002454:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002458:	f04f 0200 	mov.w	r2, #0
 800245c:	ea03 0501 	and.w	r5, r3, r1
 8002460:	ea04 0602 	and.w	r6, r4, r2
 8002464:	4629      	mov	r1, r5
 8002466:	4632      	mov	r2, r6
 8002468:	f04f 0300 	mov.w	r3, #0
 800246c:	f04f 0400 	mov.w	r4, #0
 8002470:	0154      	lsls	r4, r2, #5
 8002472:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002476:	014b      	lsls	r3, r1, #5
 8002478:	4619      	mov	r1, r3
 800247a:	4622      	mov	r2, r4
 800247c:	1b49      	subs	r1, r1, r5
 800247e:	eb62 0206 	sbc.w	r2, r2, r6
 8002482:	f04f 0300 	mov.w	r3, #0
 8002486:	f04f 0400 	mov.w	r4, #0
 800248a:	0194      	lsls	r4, r2, #6
 800248c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002490:	018b      	lsls	r3, r1, #6
 8002492:	1a5b      	subs	r3, r3, r1
 8002494:	eb64 0402 	sbc.w	r4, r4, r2
 8002498:	f04f 0100 	mov.w	r1, #0
 800249c:	f04f 0200 	mov.w	r2, #0
 80024a0:	00e2      	lsls	r2, r4, #3
 80024a2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80024a6:	00d9      	lsls	r1, r3, #3
 80024a8:	460b      	mov	r3, r1
 80024aa:	4614      	mov	r4, r2
 80024ac:	195b      	adds	r3, r3, r5
 80024ae:	eb44 0406 	adc.w	r4, r4, r6
 80024b2:	f04f 0100 	mov.w	r1, #0
 80024b6:	f04f 0200 	mov.w	r2, #0
 80024ba:	0262      	lsls	r2, r4, #9
 80024bc:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80024c0:	0259      	lsls	r1, r3, #9
 80024c2:	460b      	mov	r3, r1
 80024c4:	4614      	mov	r4, r2
 80024c6:	4618      	mov	r0, r3
 80024c8:	4621      	mov	r1, r4
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	f04f 0400 	mov.w	r4, #0
 80024d0:	461a      	mov	r2, r3
 80024d2:	4623      	mov	r3, r4
 80024d4:	f7fd fe90 	bl	80001f8 <__aeabi_uldivmod>
 80024d8:	4603      	mov	r3, r0
 80024da:	460c      	mov	r4, r1
 80024dc:	60fb      	str	r3, [r7, #12]
 80024de:	e049      	b.n	8002574 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024e0:	4b2f      	ldr	r3, [pc, #188]	; (80025a0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	099b      	lsrs	r3, r3, #6
 80024e6:	f04f 0400 	mov.w	r4, #0
 80024ea:	f240 11ff 	movw	r1, #511	; 0x1ff
 80024ee:	f04f 0200 	mov.w	r2, #0
 80024f2:	ea03 0501 	and.w	r5, r3, r1
 80024f6:	ea04 0602 	and.w	r6, r4, r2
 80024fa:	4629      	mov	r1, r5
 80024fc:	4632      	mov	r2, r6
 80024fe:	f04f 0300 	mov.w	r3, #0
 8002502:	f04f 0400 	mov.w	r4, #0
 8002506:	0154      	lsls	r4, r2, #5
 8002508:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800250c:	014b      	lsls	r3, r1, #5
 800250e:	4619      	mov	r1, r3
 8002510:	4622      	mov	r2, r4
 8002512:	1b49      	subs	r1, r1, r5
 8002514:	eb62 0206 	sbc.w	r2, r2, r6
 8002518:	f04f 0300 	mov.w	r3, #0
 800251c:	f04f 0400 	mov.w	r4, #0
 8002520:	0194      	lsls	r4, r2, #6
 8002522:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002526:	018b      	lsls	r3, r1, #6
 8002528:	1a5b      	subs	r3, r3, r1
 800252a:	eb64 0402 	sbc.w	r4, r4, r2
 800252e:	f04f 0100 	mov.w	r1, #0
 8002532:	f04f 0200 	mov.w	r2, #0
 8002536:	00e2      	lsls	r2, r4, #3
 8002538:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800253c:	00d9      	lsls	r1, r3, #3
 800253e:	460b      	mov	r3, r1
 8002540:	4614      	mov	r4, r2
 8002542:	195b      	adds	r3, r3, r5
 8002544:	eb44 0406 	adc.w	r4, r4, r6
 8002548:	f04f 0100 	mov.w	r1, #0
 800254c:	f04f 0200 	mov.w	r2, #0
 8002550:	02a2      	lsls	r2, r4, #10
 8002552:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002556:	0299      	lsls	r1, r3, #10
 8002558:	460b      	mov	r3, r1
 800255a:	4614      	mov	r4, r2
 800255c:	4618      	mov	r0, r3
 800255e:	4621      	mov	r1, r4
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	f04f 0400 	mov.w	r4, #0
 8002566:	461a      	mov	r2, r3
 8002568:	4623      	mov	r3, r4
 800256a:	f7fd fe45 	bl	80001f8 <__aeabi_uldivmod>
 800256e:	4603      	mov	r3, r0
 8002570:	460c      	mov	r4, r1
 8002572:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002574:	4b0a      	ldr	r3, [pc, #40]	; (80025a0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	0c1b      	lsrs	r3, r3, #16
 800257a:	f003 0303 	and.w	r3, r3, #3
 800257e:	3301      	adds	r3, #1
 8002580:	005b      	lsls	r3, r3, #1
 8002582:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002584:	68fa      	ldr	r2, [r7, #12]
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	fbb2 f3f3 	udiv	r3, r2, r3
 800258c:	60bb      	str	r3, [r7, #8]
      break;
 800258e:	e002      	b.n	8002596 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002590:	4b04      	ldr	r3, [pc, #16]	; (80025a4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002592:	60bb      	str	r3, [r7, #8]
      break;
 8002594:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002596:	68bb      	ldr	r3, [r7, #8]
}
 8002598:	4618      	mov	r0, r3
 800259a:	3714      	adds	r7, #20
 800259c:	46bd      	mov	sp, r7
 800259e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80025a0:	40023800 	.word	0x40023800
 80025a4:	00f42400 	.word	0x00f42400
 80025a8:	007a1200 	.word	0x007a1200

080025ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025ac:	b480      	push	{r7}
 80025ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025b0:	4b03      	ldr	r3, [pc, #12]	; (80025c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80025b2:	681b      	ldr	r3, [r3, #0]
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr
 80025be:	bf00      	nop
 80025c0:	20000008 	.word	0x20000008

080025c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80025c8:	f7ff fff0 	bl	80025ac <HAL_RCC_GetHCLKFreq>
 80025cc:	4601      	mov	r1, r0
 80025ce:	4b05      	ldr	r3, [pc, #20]	; (80025e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	0a9b      	lsrs	r3, r3, #10
 80025d4:	f003 0307 	and.w	r3, r3, #7
 80025d8:	4a03      	ldr	r2, [pc, #12]	; (80025e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80025da:	5cd3      	ldrb	r3, [r2, r3]
 80025dc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	40023800 	.word	0x40023800
 80025e8:	080039ac 	.word	0x080039ac

080025ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80025f0:	f7ff ffdc 	bl	80025ac <HAL_RCC_GetHCLKFreq>
 80025f4:	4601      	mov	r1, r0
 80025f6:	4b05      	ldr	r3, [pc, #20]	; (800260c <HAL_RCC_GetPCLK2Freq+0x20>)
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	0b5b      	lsrs	r3, r3, #13
 80025fc:	f003 0307 	and.w	r3, r3, #7
 8002600:	4a03      	ldr	r2, [pc, #12]	; (8002610 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002602:	5cd3      	ldrb	r3, [r2, r3]
 8002604:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002608:	4618      	mov	r0, r3
 800260a:	bd80      	pop	{r7, pc}
 800260c:	40023800 	.word	0x40023800
 8002610:	080039ac 	.word	0x080039ac

08002614 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b082      	sub	sp, #8
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d101      	bne.n	8002626 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e01d      	b.n	8002662 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800262c:	b2db      	uxtb	r3, r3
 800262e:	2b00      	cmp	r3, #0
 8002630:	d106      	bne.n	8002640 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2200      	movs	r2, #0
 8002636:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800263a:	6878      	ldr	r0, [r7, #4]
 800263c:	f7fe fef2 	bl	8001424 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2202      	movs	r2, #2
 8002644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	3304      	adds	r3, #4
 8002650:	4619      	mov	r1, r3
 8002652:	4610      	mov	r0, r2
 8002654:	f000 fa3a 	bl	8002acc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2201      	movs	r2, #1
 800265c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002660:	2300      	movs	r3, #0
}
 8002662:	4618      	mov	r0, r3
 8002664:	3708      	adds	r7, #8
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}

0800266a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800266a:	b580      	push	{r7, lr}
 800266c:	b082      	sub	sp, #8
 800266e:	af00      	add	r7, sp, #0
 8002670:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d101      	bne.n	800267c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	e01d      	b.n	80026b8 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002682:	b2db      	uxtb	r3, r3
 8002684:	2b00      	cmp	r3, #0
 8002686:	d106      	bne.n	8002696 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2200      	movs	r2, #0
 800268c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002690:	6878      	ldr	r0, [r7, #4]
 8002692:	f000 f815 	bl	80026c0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2202      	movs	r2, #2
 800269a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	3304      	adds	r3, #4
 80026a6:	4619      	mov	r1, r3
 80026a8:	4610      	mov	r0, r2
 80026aa:	f000 fa0f 	bl	8002acc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2201      	movs	r2, #1
 80026b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80026b6:	2300      	movs	r3, #0
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	3708      	adds	r7, #8
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}

080026c0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b083      	sub	sp, #12
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80026c8:	bf00      	nop
 80026ca:	370c      	adds	r7, #12
 80026cc:	46bd      	mov	sp, r7
 80026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d2:	4770      	bx	lr

080026d4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b084      	sub	sp, #16
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
 80026dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	2201      	movs	r2, #1
 80026e4:	6839      	ldr	r1, [r7, #0]
 80026e6:	4618      	mov	r0, r3
 80026e8:	f000 fc96 	bl	8003018 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a10      	ldr	r2, [pc, #64]	; (8002734 <HAL_TIM_PWM_Start+0x60>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d107      	bne.n	8002706 <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002704:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	f003 0307 	and.w	r3, r3, #7
 8002710:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	2b06      	cmp	r3, #6
 8002716:	d007      	beq.n	8002728 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f042 0201 	orr.w	r2, r2, #1
 8002726:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002728:	2300      	movs	r3, #0
}
 800272a:	4618      	mov	r0, r3
 800272c:	3710      	adds	r7, #16
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop
 8002734:	40010000 	.word	0x40010000

08002738 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b082      	sub	sp, #8
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
 8002740:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	2200      	movs	r2, #0
 8002748:	6839      	ldr	r1, [r7, #0]
 800274a:	4618      	mov	r0, r3
 800274c:	f000 fc64 	bl	8003018 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a1d      	ldr	r2, [pc, #116]	; (80027cc <HAL_TIM_PWM_Stop+0x94>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d117      	bne.n	800278a <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	6a1a      	ldr	r2, [r3, #32]
 8002760:	f241 1311 	movw	r3, #4369	; 0x1111
 8002764:	4013      	ands	r3, r2
 8002766:	2b00      	cmp	r3, #0
 8002768:	d10f      	bne.n	800278a <HAL_TIM_PWM_Stop+0x52>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	6a1a      	ldr	r2, [r3, #32]
 8002770:	f240 4344 	movw	r3, #1092	; 0x444
 8002774:	4013      	ands	r3, r2
 8002776:	2b00      	cmp	r3, #0
 8002778:	d107      	bne.n	800278a <HAL_TIM_PWM_Stop+0x52>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002788:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	6a1a      	ldr	r2, [r3, #32]
 8002790:	f241 1311 	movw	r3, #4369	; 0x1111
 8002794:	4013      	ands	r3, r2
 8002796:	2b00      	cmp	r3, #0
 8002798:	d10f      	bne.n	80027ba <HAL_TIM_PWM_Stop+0x82>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	6a1a      	ldr	r2, [r3, #32]
 80027a0:	f240 4344 	movw	r3, #1092	; 0x444
 80027a4:	4013      	ands	r3, r2
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d107      	bne.n	80027ba <HAL_TIM_PWM_Stop+0x82>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f022 0201 	bic.w	r2, r2, #1
 80027b8:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2201      	movs	r2, #1
 80027be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80027c2:	2300      	movs	r3, #0
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	3708      	adds	r7, #8
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}
 80027cc:	40010000 	.word	0x40010000

080027d0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b084      	sub	sp, #16
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	60f8      	str	r0, [r7, #12]
 80027d8:	60b9      	str	r1, [r7, #8]
 80027da:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d101      	bne.n	80027ea <HAL_TIM_PWM_ConfigChannel+0x1a>
 80027e6:	2302      	movs	r3, #2
 80027e8:	e0b4      	b.n	8002954 <HAL_TIM_PWM_ConfigChannel+0x184>
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	2201      	movs	r2, #1
 80027ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	2202      	movs	r2, #2
 80027f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2b0c      	cmp	r3, #12
 80027fe:	f200 809f 	bhi.w	8002940 <HAL_TIM_PWM_ConfigChannel+0x170>
 8002802:	a201      	add	r2, pc, #4	; (adr r2, 8002808 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8002804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002808:	0800283d 	.word	0x0800283d
 800280c:	08002941 	.word	0x08002941
 8002810:	08002941 	.word	0x08002941
 8002814:	08002941 	.word	0x08002941
 8002818:	0800287d 	.word	0x0800287d
 800281c:	08002941 	.word	0x08002941
 8002820:	08002941 	.word	0x08002941
 8002824:	08002941 	.word	0x08002941
 8002828:	080028bf 	.word	0x080028bf
 800282c:	08002941 	.word	0x08002941
 8002830:	08002941 	.word	0x08002941
 8002834:	08002941 	.word	0x08002941
 8002838:	080028ff 	.word	0x080028ff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	68b9      	ldr	r1, [r7, #8]
 8002842:	4618      	mov	r0, r3
 8002844:	f000 f9c2 	bl	8002bcc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	699a      	ldr	r2, [r3, #24]
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f042 0208 	orr.w	r2, r2, #8
 8002856:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	699a      	ldr	r2, [r3, #24]
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f022 0204 	bic.w	r2, r2, #4
 8002866:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	6999      	ldr	r1, [r3, #24]
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	691a      	ldr	r2, [r3, #16]
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	430a      	orrs	r2, r1
 8002878:	619a      	str	r2, [r3, #24]
      break;
 800287a:	e062      	b.n	8002942 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	68b9      	ldr	r1, [r7, #8]
 8002882:	4618      	mov	r0, r3
 8002884:	f000 fa08 	bl	8002c98 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	699a      	ldr	r2, [r3, #24]
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002896:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	699a      	ldr	r2, [r3, #24]
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	6999      	ldr	r1, [r3, #24]
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	691b      	ldr	r3, [r3, #16]
 80028b2:	021a      	lsls	r2, r3, #8
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	430a      	orrs	r2, r1
 80028ba:	619a      	str	r2, [r3, #24]
      break;
 80028bc:	e041      	b.n	8002942 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	68b9      	ldr	r1, [r7, #8]
 80028c4:	4618      	mov	r0, r3
 80028c6:	f000 fa53 	bl	8002d70 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	69da      	ldr	r2, [r3, #28]
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f042 0208 	orr.w	r2, r2, #8
 80028d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	69da      	ldr	r2, [r3, #28]
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f022 0204 	bic.w	r2, r2, #4
 80028e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	69d9      	ldr	r1, [r3, #28]
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	691a      	ldr	r2, [r3, #16]
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	430a      	orrs	r2, r1
 80028fa:	61da      	str	r2, [r3, #28]
      break;
 80028fc:	e021      	b.n	8002942 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	68b9      	ldr	r1, [r7, #8]
 8002904:	4618      	mov	r0, r3
 8002906:	f000 fa9d 	bl	8002e44 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	69da      	ldr	r2, [r3, #28]
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002918:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	69da      	ldr	r2, [r3, #28]
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002928:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	69d9      	ldr	r1, [r3, #28]
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	691b      	ldr	r3, [r3, #16]
 8002934:	021a      	lsls	r2, r3, #8
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	430a      	orrs	r2, r1
 800293c:	61da      	str	r2, [r3, #28]
      break;
 800293e:	e000      	b.n	8002942 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8002940:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2201      	movs	r2, #1
 8002946:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	2200      	movs	r2, #0
 800294e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002952:	2300      	movs	r3, #0
}
 8002954:	4618      	mov	r0, r3
 8002956:	3710      	adds	r7, #16
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}

0800295c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b084      	sub	sp, #16
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
 8002964:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800296c:	2b01      	cmp	r3, #1
 800296e:	d101      	bne.n	8002974 <HAL_TIM_ConfigClockSource+0x18>
 8002970:	2302      	movs	r3, #2
 8002972:	e0a6      	b.n	8002ac2 <HAL_TIM_ConfigClockSource+0x166>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2201      	movs	r2, #1
 8002978:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2202      	movs	r2, #2
 8002980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002992:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800299a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	68fa      	ldr	r2, [r7, #12]
 80029a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	2b40      	cmp	r3, #64	; 0x40
 80029aa:	d067      	beq.n	8002a7c <HAL_TIM_ConfigClockSource+0x120>
 80029ac:	2b40      	cmp	r3, #64	; 0x40
 80029ae:	d80b      	bhi.n	80029c8 <HAL_TIM_ConfigClockSource+0x6c>
 80029b0:	2b10      	cmp	r3, #16
 80029b2:	d073      	beq.n	8002a9c <HAL_TIM_ConfigClockSource+0x140>
 80029b4:	2b10      	cmp	r3, #16
 80029b6:	d802      	bhi.n	80029be <HAL_TIM_ConfigClockSource+0x62>
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d06f      	beq.n	8002a9c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80029bc:	e078      	b.n	8002ab0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80029be:	2b20      	cmp	r3, #32
 80029c0:	d06c      	beq.n	8002a9c <HAL_TIM_ConfigClockSource+0x140>
 80029c2:	2b30      	cmp	r3, #48	; 0x30
 80029c4:	d06a      	beq.n	8002a9c <HAL_TIM_ConfigClockSource+0x140>
      break;
 80029c6:	e073      	b.n	8002ab0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80029c8:	2b70      	cmp	r3, #112	; 0x70
 80029ca:	d00d      	beq.n	80029e8 <HAL_TIM_ConfigClockSource+0x8c>
 80029cc:	2b70      	cmp	r3, #112	; 0x70
 80029ce:	d804      	bhi.n	80029da <HAL_TIM_ConfigClockSource+0x7e>
 80029d0:	2b50      	cmp	r3, #80	; 0x50
 80029d2:	d033      	beq.n	8002a3c <HAL_TIM_ConfigClockSource+0xe0>
 80029d4:	2b60      	cmp	r3, #96	; 0x60
 80029d6:	d041      	beq.n	8002a5c <HAL_TIM_ConfigClockSource+0x100>
      break;
 80029d8:	e06a      	b.n	8002ab0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80029da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029de:	d066      	beq.n	8002aae <HAL_TIM_ConfigClockSource+0x152>
 80029e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029e4:	d017      	beq.n	8002a16 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80029e6:	e063      	b.n	8002ab0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6818      	ldr	r0, [r3, #0]
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	6899      	ldr	r1, [r3, #8]
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	685a      	ldr	r2, [r3, #4]
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	68db      	ldr	r3, [r3, #12]
 80029f8:	f000 faee 	bl	8002fd8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002a0a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	68fa      	ldr	r2, [r7, #12]
 8002a12:	609a      	str	r2, [r3, #8]
      break;
 8002a14:	e04c      	b.n	8002ab0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6818      	ldr	r0, [r3, #0]
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	6899      	ldr	r1, [r3, #8]
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	685a      	ldr	r2, [r3, #4]
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	68db      	ldr	r3, [r3, #12]
 8002a26:	f000 fad7 	bl	8002fd8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	689a      	ldr	r2, [r3, #8]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a38:	609a      	str	r2, [r3, #8]
      break;
 8002a3a:	e039      	b.n	8002ab0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6818      	ldr	r0, [r3, #0]
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	6859      	ldr	r1, [r3, #4]
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	68db      	ldr	r3, [r3, #12]
 8002a48:	461a      	mov	r2, r3
 8002a4a:	f000 fa4b 	bl	8002ee4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	2150      	movs	r1, #80	; 0x50
 8002a54:	4618      	mov	r0, r3
 8002a56:	f000 faa4 	bl	8002fa2 <TIM_ITRx_SetConfig>
      break;
 8002a5a:	e029      	b.n	8002ab0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6818      	ldr	r0, [r3, #0]
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	6859      	ldr	r1, [r3, #4]
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	68db      	ldr	r3, [r3, #12]
 8002a68:	461a      	mov	r2, r3
 8002a6a:	f000 fa6a 	bl	8002f42 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	2160      	movs	r1, #96	; 0x60
 8002a74:	4618      	mov	r0, r3
 8002a76:	f000 fa94 	bl	8002fa2 <TIM_ITRx_SetConfig>
      break;
 8002a7a:	e019      	b.n	8002ab0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6818      	ldr	r0, [r3, #0]
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	6859      	ldr	r1, [r3, #4]
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	68db      	ldr	r3, [r3, #12]
 8002a88:	461a      	mov	r2, r3
 8002a8a:	f000 fa2b 	bl	8002ee4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	2140      	movs	r1, #64	; 0x40
 8002a94:	4618      	mov	r0, r3
 8002a96:	f000 fa84 	bl	8002fa2 <TIM_ITRx_SetConfig>
      break;
 8002a9a:	e009      	b.n	8002ab0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4619      	mov	r1, r3
 8002aa6:	4610      	mov	r0, r2
 8002aa8:	f000 fa7b 	bl	8002fa2 <TIM_ITRx_SetConfig>
      break;
 8002aac:	e000      	b.n	8002ab0 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002aae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2200      	movs	r2, #0
 8002abc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ac0:	2300      	movs	r3, #0
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3710      	adds	r7, #16
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}
	...

08002acc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b085      	sub	sp, #20
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
 8002ad4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	4a34      	ldr	r2, [pc, #208]	; (8002bb0 <TIM_Base_SetConfig+0xe4>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d00f      	beq.n	8002b04 <TIM_Base_SetConfig+0x38>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002aea:	d00b      	beq.n	8002b04 <TIM_Base_SetConfig+0x38>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	4a31      	ldr	r2, [pc, #196]	; (8002bb4 <TIM_Base_SetConfig+0xe8>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d007      	beq.n	8002b04 <TIM_Base_SetConfig+0x38>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	4a30      	ldr	r2, [pc, #192]	; (8002bb8 <TIM_Base_SetConfig+0xec>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d003      	beq.n	8002b04 <TIM_Base_SetConfig+0x38>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	4a2f      	ldr	r2, [pc, #188]	; (8002bbc <TIM_Base_SetConfig+0xf0>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d108      	bne.n	8002b16 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	68fa      	ldr	r2, [r7, #12]
 8002b12:	4313      	orrs	r3, r2
 8002b14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	4a25      	ldr	r2, [pc, #148]	; (8002bb0 <TIM_Base_SetConfig+0xe4>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d01b      	beq.n	8002b56 <TIM_Base_SetConfig+0x8a>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b24:	d017      	beq.n	8002b56 <TIM_Base_SetConfig+0x8a>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	4a22      	ldr	r2, [pc, #136]	; (8002bb4 <TIM_Base_SetConfig+0xe8>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d013      	beq.n	8002b56 <TIM_Base_SetConfig+0x8a>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	4a21      	ldr	r2, [pc, #132]	; (8002bb8 <TIM_Base_SetConfig+0xec>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d00f      	beq.n	8002b56 <TIM_Base_SetConfig+0x8a>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	4a20      	ldr	r2, [pc, #128]	; (8002bbc <TIM_Base_SetConfig+0xf0>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d00b      	beq.n	8002b56 <TIM_Base_SetConfig+0x8a>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	4a1f      	ldr	r2, [pc, #124]	; (8002bc0 <TIM_Base_SetConfig+0xf4>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d007      	beq.n	8002b56 <TIM_Base_SetConfig+0x8a>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	4a1e      	ldr	r2, [pc, #120]	; (8002bc4 <TIM_Base_SetConfig+0xf8>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d003      	beq.n	8002b56 <TIM_Base_SetConfig+0x8a>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	4a1d      	ldr	r2, [pc, #116]	; (8002bc8 <TIM_Base_SetConfig+0xfc>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d108      	bne.n	8002b68 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	68db      	ldr	r3, [r3, #12]
 8002b62:	68fa      	ldr	r2, [r7, #12]
 8002b64:	4313      	orrs	r3, r2
 8002b66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	695b      	ldr	r3, [r3, #20]
 8002b72:	4313      	orrs	r3, r2
 8002b74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	68fa      	ldr	r2, [r7, #12]
 8002b7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	689a      	ldr	r2, [r3, #8]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	4a08      	ldr	r2, [pc, #32]	; (8002bb0 <TIM_Base_SetConfig+0xe4>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d103      	bne.n	8002b9c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	691a      	ldr	r2, [r3, #16]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	615a      	str	r2, [r3, #20]
}
 8002ba2:	bf00      	nop
 8002ba4:	3714      	adds	r7, #20
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr
 8002bae:	bf00      	nop
 8002bb0:	40010000 	.word	0x40010000
 8002bb4:	40000400 	.word	0x40000400
 8002bb8:	40000800 	.word	0x40000800
 8002bbc:	40000c00 	.word	0x40000c00
 8002bc0:	40014000 	.word	0x40014000
 8002bc4:	40014400 	.word	0x40014400
 8002bc8:	40014800 	.word	0x40014800

08002bcc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b087      	sub	sp, #28
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
 8002bd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6a1b      	ldr	r3, [r3, #32]
 8002bda:	f023 0201 	bic.w	r2, r3, #1
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6a1b      	ldr	r3, [r3, #32]
 8002be6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	699b      	ldr	r3, [r3, #24]
 8002bf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	f023 0303 	bic.w	r3, r3, #3
 8002c02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	68fa      	ldr	r2, [r7, #12]
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	f023 0302 	bic.w	r3, r3, #2
 8002c14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	697a      	ldr	r2, [r7, #20]
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	4a1c      	ldr	r2, [pc, #112]	; (8002c94 <TIM_OC1_SetConfig+0xc8>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d10c      	bne.n	8002c42 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	f023 0308 	bic.w	r3, r3, #8
 8002c2e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	68db      	ldr	r3, [r3, #12]
 8002c34:	697a      	ldr	r2, [r7, #20]
 8002c36:	4313      	orrs	r3, r2
 8002c38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	f023 0304 	bic.w	r3, r3, #4
 8002c40:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	4a13      	ldr	r2, [pc, #76]	; (8002c94 <TIM_OC1_SetConfig+0xc8>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d111      	bne.n	8002c6e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002c58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	695b      	ldr	r3, [r3, #20]
 8002c5e:	693a      	ldr	r2, [r7, #16]
 8002c60:	4313      	orrs	r3, r2
 8002c62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	699b      	ldr	r3, [r3, #24]
 8002c68:	693a      	ldr	r2, [r7, #16]
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	693a      	ldr	r2, [r7, #16]
 8002c72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	68fa      	ldr	r2, [r7, #12]
 8002c78:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	685a      	ldr	r2, [r3, #4]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	697a      	ldr	r2, [r7, #20]
 8002c86:	621a      	str	r2, [r3, #32]
}
 8002c88:	bf00      	nop
 8002c8a:	371c      	adds	r7, #28
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr
 8002c94:	40010000 	.word	0x40010000

08002c98 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b087      	sub	sp, #28
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
 8002ca0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6a1b      	ldr	r3, [r3, #32]
 8002ca6:	f023 0210 	bic.w	r2, r3, #16
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6a1b      	ldr	r3, [r3, #32]
 8002cb2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	699b      	ldr	r3, [r3, #24]
 8002cbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002cc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	021b      	lsls	r3, r3, #8
 8002cd6:	68fa      	ldr	r2, [r7, #12]
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	f023 0320 	bic.w	r3, r3, #32
 8002ce2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	011b      	lsls	r3, r3, #4
 8002cea:	697a      	ldr	r2, [r7, #20]
 8002cec:	4313      	orrs	r3, r2
 8002cee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	4a1e      	ldr	r2, [pc, #120]	; (8002d6c <TIM_OC2_SetConfig+0xd4>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d10d      	bne.n	8002d14 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002cfe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	68db      	ldr	r3, [r3, #12]
 8002d04:	011b      	lsls	r3, r3, #4
 8002d06:	697a      	ldr	r2, [r7, #20]
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d12:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	4a15      	ldr	r2, [pc, #84]	; (8002d6c <TIM_OC2_SetConfig+0xd4>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d113      	bne.n	8002d44 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002d22:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002d2a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	695b      	ldr	r3, [r3, #20]
 8002d30:	009b      	lsls	r3, r3, #2
 8002d32:	693a      	ldr	r2, [r7, #16]
 8002d34:	4313      	orrs	r3, r2
 8002d36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	699b      	ldr	r3, [r3, #24]
 8002d3c:	009b      	lsls	r3, r3, #2
 8002d3e:	693a      	ldr	r2, [r7, #16]
 8002d40:	4313      	orrs	r3, r2
 8002d42:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	693a      	ldr	r2, [r7, #16]
 8002d48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	68fa      	ldr	r2, [r7, #12]
 8002d4e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	685a      	ldr	r2, [r3, #4]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	697a      	ldr	r2, [r7, #20]
 8002d5c:	621a      	str	r2, [r3, #32]
}
 8002d5e:	bf00      	nop
 8002d60:	371c      	adds	r7, #28
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr
 8002d6a:	bf00      	nop
 8002d6c:	40010000 	.word	0x40010000

08002d70 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b087      	sub	sp, #28
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
 8002d78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6a1b      	ldr	r3, [r3, #32]
 8002d7e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6a1b      	ldr	r3, [r3, #32]
 8002d8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	69db      	ldr	r3, [r3, #28]
 8002d96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	f023 0303 	bic.w	r3, r3, #3
 8002da6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	68fa      	ldr	r2, [r7, #12]
 8002dae:	4313      	orrs	r3, r2
 8002db0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002db8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	021b      	lsls	r3, r3, #8
 8002dc0:	697a      	ldr	r2, [r7, #20]
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	4a1d      	ldr	r2, [pc, #116]	; (8002e40 <TIM_OC3_SetConfig+0xd0>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d10d      	bne.n	8002dea <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002dd4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	68db      	ldr	r3, [r3, #12]
 8002dda:	021b      	lsls	r3, r3, #8
 8002ddc:	697a      	ldr	r2, [r7, #20]
 8002dde:	4313      	orrs	r3, r2
 8002de0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002de8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	4a14      	ldr	r2, [pc, #80]	; (8002e40 <TIM_OC3_SetConfig+0xd0>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d113      	bne.n	8002e1a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002df8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002e00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	695b      	ldr	r3, [r3, #20]
 8002e06:	011b      	lsls	r3, r3, #4
 8002e08:	693a      	ldr	r2, [r7, #16]
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	699b      	ldr	r3, [r3, #24]
 8002e12:	011b      	lsls	r3, r3, #4
 8002e14:	693a      	ldr	r2, [r7, #16]
 8002e16:	4313      	orrs	r3, r2
 8002e18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	693a      	ldr	r2, [r7, #16]
 8002e1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	68fa      	ldr	r2, [r7, #12]
 8002e24:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	685a      	ldr	r2, [r3, #4]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	697a      	ldr	r2, [r7, #20]
 8002e32:	621a      	str	r2, [r3, #32]
}
 8002e34:	bf00      	nop
 8002e36:	371c      	adds	r7, #28
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3e:	4770      	bx	lr
 8002e40:	40010000 	.word	0x40010000

08002e44 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b087      	sub	sp, #28
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
 8002e4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6a1b      	ldr	r3, [r3, #32]
 8002e52:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6a1b      	ldr	r3, [r3, #32]
 8002e5e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	69db      	ldr	r3, [r3, #28]
 8002e6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	021b      	lsls	r3, r3, #8
 8002e82:	68fa      	ldr	r2, [r7, #12]
 8002e84:	4313      	orrs	r3, r2
 8002e86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002e8e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	031b      	lsls	r3, r3, #12
 8002e96:	693a      	ldr	r2, [r7, #16]
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	4a10      	ldr	r2, [pc, #64]	; (8002ee0 <TIM_OC4_SetConfig+0x9c>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d109      	bne.n	8002eb8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002eaa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	695b      	ldr	r3, [r3, #20]
 8002eb0:	019b      	lsls	r3, r3, #6
 8002eb2:	697a      	ldr	r2, [r7, #20]
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	697a      	ldr	r2, [r7, #20]
 8002ebc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	68fa      	ldr	r2, [r7, #12]
 8002ec2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	685a      	ldr	r2, [r3, #4]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	693a      	ldr	r2, [r7, #16]
 8002ed0:	621a      	str	r2, [r3, #32]
}
 8002ed2:	bf00      	nop
 8002ed4:	371c      	adds	r7, #28
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002edc:	4770      	bx	lr
 8002ede:	bf00      	nop
 8002ee0:	40010000 	.word	0x40010000

08002ee4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b087      	sub	sp, #28
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	60f8      	str	r0, [r7, #12]
 8002eec:	60b9      	str	r1, [r7, #8]
 8002eee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	6a1b      	ldr	r3, [r3, #32]
 8002ef4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	6a1b      	ldr	r3, [r3, #32]
 8002efa:	f023 0201 	bic.w	r2, r3, #1
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	699b      	ldr	r3, [r3, #24]
 8002f06:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	011b      	lsls	r3, r3, #4
 8002f14:	693a      	ldr	r2, [r7, #16]
 8002f16:	4313      	orrs	r3, r2
 8002f18:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	f023 030a 	bic.w	r3, r3, #10
 8002f20:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002f22:	697a      	ldr	r2, [r7, #20]
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	4313      	orrs	r3, r2
 8002f28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	693a      	ldr	r2, [r7, #16]
 8002f2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	697a      	ldr	r2, [r7, #20]
 8002f34:	621a      	str	r2, [r3, #32]
}
 8002f36:	bf00      	nop
 8002f38:	371c      	adds	r7, #28
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f40:	4770      	bx	lr

08002f42 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f42:	b480      	push	{r7}
 8002f44:	b087      	sub	sp, #28
 8002f46:	af00      	add	r7, sp, #0
 8002f48:	60f8      	str	r0, [r7, #12]
 8002f4a:	60b9      	str	r1, [r7, #8]
 8002f4c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	6a1b      	ldr	r3, [r3, #32]
 8002f52:	f023 0210 	bic.w	r2, r3, #16
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	699b      	ldr	r3, [r3, #24]
 8002f5e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	6a1b      	ldr	r3, [r3, #32]
 8002f64:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002f6c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	031b      	lsls	r3, r3, #12
 8002f72:	697a      	ldr	r2, [r7, #20]
 8002f74:	4313      	orrs	r3, r2
 8002f76:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002f7e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	011b      	lsls	r3, r3, #4
 8002f84:	693a      	ldr	r2, [r7, #16]
 8002f86:	4313      	orrs	r3, r2
 8002f88:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	697a      	ldr	r2, [r7, #20]
 8002f8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	693a      	ldr	r2, [r7, #16]
 8002f94:	621a      	str	r2, [r3, #32]
}
 8002f96:	bf00      	nop
 8002f98:	371c      	adds	r7, #28
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr

08002fa2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002fa2:	b480      	push	{r7}
 8002fa4:	b085      	sub	sp, #20
 8002fa6:	af00      	add	r7, sp, #0
 8002fa8:	6078      	str	r0, [r7, #4]
 8002faa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fb8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002fba:	683a      	ldr	r2, [r7, #0]
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	f043 0307 	orr.w	r3, r3, #7
 8002fc4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	68fa      	ldr	r2, [r7, #12]
 8002fca:	609a      	str	r2, [r3, #8]
}
 8002fcc:	bf00      	nop
 8002fce:	3714      	adds	r7, #20
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd6:	4770      	bx	lr

08002fd8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b087      	sub	sp, #28
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	60f8      	str	r0, [r7, #12]
 8002fe0:	60b9      	str	r1, [r7, #8]
 8002fe2:	607a      	str	r2, [r7, #4]
 8002fe4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ff2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	021a      	lsls	r2, r3, #8
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	431a      	orrs	r2, r3
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	4313      	orrs	r3, r2
 8003000:	697a      	ldr	r2, [r7, #20]
 8003002:	4313      	orrs	r3, r2
 8003004:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	697a      	ldr	r2, [r7, #20]
 800300a:	609a      	str	r2, [r3, #8]
}
 800300c:	bf00      	nop
 800300e:	371c      	adds	r7, #28
 8003010:	46bd      	mov	sp, r7
 8003012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003016:	4770      	bx	lr

08003018 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003018:	b480      	push	{r7}
 800301a:	b087      	sub	sp, #28
 800301c:	af00      	add	r7, sp, #0
 800301e:	60f8      	str	r0, [r7, #12]
 8003020:	60b9      	str	r1, [r7, #8]
 8003022:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	f003 031f 	and.w	r3, r3, #31
 800302a:	2201      	movs	r2, #1
 800302c:	fa02 f303 	lsl.w	r3, r2, r3
 8003030:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	6a1a      	ldr	r2, [r3, #32]
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	43db      	mvns	r3, r3
 800303a:	401a      	ands	r2, r3
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	6a1a      	ldr	r2, [r3, #32]
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	f003 031f 	and.w	r3, r3, #31
 800304a:	6879      	ldr	r1, [r7, #4]
 800304c:	fa01 f303 	lsl.w	r3, r1, r3
 8003050:	431a      	orrs	r2, r3
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	621a      	str	r2, [r3, #32]
}
 8003056:	bf00      	nop
 8003058:	371c      	adds	r7, #28
 800305a:	46bd      	mov	sp, r7
 800305c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003060:	4770      	bx	lr
	...

08003064 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003064:	b480      	push	{r7}
 8003066:	b085      	sub	sp, #20
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
 800306c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003074:	2b01      	cmp	r3, #1
 8003076:	d101      	bne.n	800307c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003078:	2302      	movs	r3, #2
 800307a:	e050      	b.n	800311e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2201      	movs	r2, #1
 8003080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2202      	movs	r2, #2
 8003088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	68fa      	ldr	r2, [r7, #12]
 80030aa:	4313      	orrs	r3, r2
 80030ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	68fa      	ldr	r2, [r7, #12]
 80030b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a1c      	ldr	r2, [pc, #112]	; (800312c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d018      	beq.n	80030f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030c8:	d013      	beq.n	80030f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a18      	ldr	r2, [pc, #96]	; (8003130 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d00e      	beq.n	80030f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a16      	ldr	r2, [pc, #88]	; (8003134 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d009      	beq.n	80030f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a15      	ldr	r2, [pc, #84]	; (8003138 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d004      	beq.n	80030f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a13      	ldr	r2, [pc, #76]	; (800313c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d10c      	bne.n	800310c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80030f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	68ba      	ldr	r2, [r7, #8]
 8003100:	4313      	orrs	r3, r2
 8003102:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	68ba      	ldr	r2, [r7, #8]
 800310a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2201      	movs	r2, #1
 8003110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2200      	movs	r2, #0
 8003118:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800311c:	2300      	movs	r3, #0
}
 800311e:	4618      	mov	r0, r3
 8003120:	3714      	adds	r7, #20
 8003122:	46bd      	mov	sp, r7
 8003124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003128:	4770      	bx	lr
 800312a:	bf00      	nop
 800312c:	40010000 	.word	0x40010000
 8003130:	40000400 	.word	0x40000400
 8003134:	40000800 	.word	0x40000800
 8003138:	40000c00 	.word	0x40000c00
 800313c:	40014000 	.word	0x40014000

08003140 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b082      	sub	sp, #8
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d101      	bne.n	8003152 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e03f      	b.n	80031d2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003158:	b2db      	uxtb	r3, r3
 800315a:	2b00      	cmp	r3, #0
 800315c:	d106      	bne.n	800316c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2200      	movs	r2, #0
 8003162:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003166:	6878      	ldr	r0, [r7, #4]
 8003168:	f7fe f9de 	bl	8001528 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2224      	movs	r2, #36	; 0x24
 8003170:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	68da      	ldr	r2, [r3, #12]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003182:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003184:	6878      	ldr	r0, [r7, #4]
 8003186:	f000 f829 	bl	80031dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	691a      	ldr	r2, [r3, #16]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003198:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	695a      	ldr	r2, [r3, #20]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80031a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	68da      	ldr	r2, [r3, #12]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80031b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2200      	movs	r2, #0
 80031be:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2220      	movs	r2, #32
 80031c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2220      	movs	r2, #32
 80031cc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80031d0:	2300      	movs	r3, #0
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	3708      	adds	r7, #8
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}
	...

080031dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80031dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80031e0:	b085      	sub	sp, #20
 80031e2:	af00      	add	r7, sp, #0
 80031e4:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	691b      	ldr	r3, [r3, #16]
 80031ec:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	68da      	ldr	r2, [r3, #12]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	430a      	orrs	r2, r1
 80031fa:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	689a      	ldr	r2, [r3, #8]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	691b      	ldr	r3, [r3, #16]
 8003204:	431a      	orrs	r2, r3
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	695b      	ldr	r3, [r3, #20]
 800320a:	431a      	orrs	r2, r3
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	69db      	ldr	r3, [r3, #28]
 8003210:	4313      	orrs	r3, r2
 8003212:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	68db      	ldr	r3, [r3, #12]
 800321a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800321e:	f023 030c 	bic.w	r3, r3, #12
 8003222:	687a      	ldr	r2, [r7, #4]
 8003224:	6812      	ldr	r2, [r2, #0]
 8003226:	68f9      	ldr	r1, [r7, #12]
 8003228:	430b      	orrs	r3, r1
 800322a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	695b      	ldr	r3, [r3, #20]
 8003232:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	699a      	ldr	r2, [r3, #24]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	430a      	orrs	r2, r1
 8003240:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	69db      	ldr	r3, [r3, #28]
 8003246:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800324a:	f040 818b 	bne.w	8003564 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4ac1      	ldr	r2, [pc, #772]	; (8003558 <UART_SetConfig+0x37c>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d005      	beq.n	8003264 <UART_SetConfig+0x88>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4abf      	ldr	r2, [pc, #764]	; (800355c <UART_SetConfig+0x380>)
 800325e:	4293      	cmp	r3, r2
 8003260:	f040 80bd 	bne.w	80033de <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003264:	f7ff f9c2 	bl	80025ec <HAL_RCC_GetPCLK2Freq>
 8003268:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	461d      	mov	r5, r3
 800326e:	f04f 0600 	mov.w	r6, #0
 8003272:	46a8      	mov	r8, r5
 8003274:	46b1      	mov	r9, r6
 8003276:	eb18 0308 	adds.w	r3, r8, r8
 800327a:	eb49 0409 	adc.w	r4, r9, r9
 800327e:	4698      	mov	r8, r3
 8003280:	46a1      	mov	r9, r4
 8003282:	eb18 0805 	adds.w	r8, r8, r5
 8003286:	eb49 0906 	adc.w	r9, r9, r6
 800328a:	f04f 0100 	mov.w	r1, #0
 800328e:	f04f 0200 	mov.w	r2, #0
 8003292:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003296:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800329a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800329e:	4688      	mov	r8, r1
 80032a0:	4691      	mov	r9, r2
 80032a2:	eb18 0005 	adds.w	r0, r8, r5
 80032a6:	eb49 0106 	adc.w	r1, r9, r6
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	461d      	mov	r5, r3
 80032b0:	f04f 0600 	mov.w	r6, #0
 80032b4:	196b      	adds	r3, r5, r5
 80032b6:	eb46 0406 	adc.w	r4, r6, r6
 80032ba:	461a      	mov	r2, r3
 80032bc:	4623      	mov	r3, r4
 80032be:	f7fc ff9b 	bl	80001f8 <__aeabi_uldivmod>
 80032c2:	4603      	mov	r3, r0
 80032c4:	460c      	mov	r4, r1
 80032c6:	461a      	mov	r2, r3
 80032c8:	4ba5      	ldr	r3, [pc, #660]	; (8003560 <UART_SetConfig+0x384>)
 80032ca:	fba3 2302 	umull	r2, r3, r3, r2
 80032ce:	095b      	lsrs	r3, r3, #5
 80032d0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	461d      	mov	r5, r3
 80032d8:	f04f 0600 	mov.w	r6, #0
 80032dc:	46a9      	mov	r9, r5
 80032de:	46b2      	mov	sl, r6
 80032e0:	eb19 0309 	adds.w	r3, r9, r9
 80032e4:	eb4a 040a 	adc.w	r4, sl, sl
 80032e8:	4699      	mov	r9, r3
 80032ea:	46a2      	mov	sl, r4
 80032ec:	eb19 0905 	adds.w	r9, r9, r5
 80032f0:	eb4a 0a06 	adc.w	sl, sl, r6
 80032f4:	f04f 0100 	mov.w	r1, #0
 80032f8:	f04f 0200 	mov.w	r2, #0
 80032fc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003300:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003304:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003308:	4689      	mov	r9, r1
 800330a:	4692      	mov	sl, r2
 800330c:	eb19 0005 	adds.w	r0, r9, r5
 8003310:	eb4a 0106 	adc.w	r1, sl, r6
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	461d      	mov	r5, r3
 800331a:	f04f 0600 	mov.w	r6, #0
 800331e:	196b      	adds	r3, r5, r5
 8003320:	eb46 0406 	adc.w	r4, r6, r6
 8003324:	461a      	mov	r2, r3
 8003326:	4623      	mov	r3, r4
 8003328:	f7fc ff66 	bl	80001f8 <__aeabi_uldivmod>
 800332c:	4603      	mov	r3, r0
 800332e:	460c      	mov	r4, r1
 8003330:	461a      	mov	r2, r3
 8003332:	4b8b      	ldr	r3, [pc, #556]	; (8003560 <UART_SetConfig+0x384>)
 8003334:	fba3 1302 	umull	r1, r3, r3, r2
 8003338:	095b      	lsrs	r3, r3, #5
 800333a:	2164      	movs	r1, #100	; 0x64
 800333c:	fb01 f303 	mul.w	r3, r1, r3
 8003340:	1ad3      	subs	r3, r2, r3
 8003342:	00db      	lsls	r3, r3, #3
 8003344:	3332      	adds	r3, #50	; 0x32
 8003346:	4a86      	ldr	r2, [pc, #536]	; (8003560 <UART_SetConfig+0x384>)
 8003348:	fba2 2303 	umull	r2, r3, r2, r3
 800334c:	095b      	lsrs	r3, r3, #5
 800334e:	005b      	lsls	r3, r3, #1
 8003350:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003354:	4498      	add	r8, r3
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	461d      	mov	r5, r3
 800335a:	f04f 0600 	mov.w	r6, #0
 800335e:	46a9      	mov	r9, r5
 8003360:	46b2      	mov	sl, r6
 8003362:	eb19 0309 	adds.w	r3, r9, r9
 8003366:	eb4a 040a 	adc.w	r4, sl, sl
 800336a:	4699      	mov	r9, r3
 800336c:	46a2      	mov	sl, r4
 800336e:	eb19 0905 	adds.w	r9, r9, r5
 8003372:	eb4a 0a06 	adc.w	sl, sl, r6
 8003376:	f04f 0100 	mov.w	r1, #0
 800337a:	f04f 0200 	mov.w	r2, #0
 800337e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003382:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003386:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800338a:	4689      	mov	r9, r1
 800338c:	4692      	mov	sl, r2
 800338e:	eb19 0005 	adds.w	r0, r9, r5
 8003392:	eb4a 0106 	adc.w	r1, sl, r6
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	461d      	mov	r5, r3
 800339c:	f04f 0600 	mov.w	r6, #0
 80033a0:	196b      	adds	r3, r5, r5
 80033a2:	eb46 0406 	adc.w	r4, r6, r6
 80033a6:	461a      	mov	r2, r3
 80033a8:	4623      	mov	r3, r4
 80033aa:	f7fc ff25 	bl	80001f8 <__aeabi_uldivmod>
 80033ae:	4603      	mov	r3, r0
 80033b0:	460c      	mov	r4, r1
 80033b2:	461a      	mov	r2, r3
 80033b4:	4b6a      	ldr	r3, [pc, #424]	; (8003560 <UART_SetConfig+0x384>)
 80033b6:	fba3 1302 	umull	r1, r3, r3, r2
 80033ba:	095b      	lsrs	r3, r3, #5
 80033bc:	2164      	movs	r1, #100	; 0x64
 80033be:	fb01 f303 	mul.w	r3, r1, r3
 80033c2:	1ad3      	subs	r3, r2, r3
 80033c4:	00db      	lsls	r3, r3, #3
 80033c6:	3332      	adds	r3, #50	; 0x32
 80033c8:	4a65      	ldr	r2, [pc, #404]	; (8003560 <UART_SetConfig+0x384>)
 80033ca:	fba2 2303 	umull	r2, r3, r2, r3
 80033ce:	095b      	lsrs	r3, r3, #5
 80033d0:	f003 0207 	and.w	r2, r3, #7
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4442      	add	r2, r8
 80033da:	609a      	str	r2, [r3, #8]
 80033dc:	e26f      	b.n	80038be <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80033de:	f7ff f8f1 	bl	80025c4 <HAL_RCC_GetPCLK1Freq>
 80033e2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	461d      	mov	r5, r3
 80033e8:	f04f 0600 	mov.w	r6, #0
 80033ec:	46a8      	mov	r8, r5
 80033ee:	46b1      	mov	r9, r6
 80033f0:	eb18 0308 	adds.w	r3, r8, r8
 80033f4:	eb49 0409 	adc.w	r4, r9, r9
 80033f8:	4698      	mov	r8, r3
 80033fa:	46a1      	mov	r9, r4
 80033fc:	eb18 0805 	adds.w	r8, r8, r5
 8003400:	eb49 0906 	adc.w	r9, r9, r6
 8003404:	f04f 0100 	mov.w	r1, #0
 8003408:	f04f 0200 	mov.w	r2, #0
 800340c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003410:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003414:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003418:	4688      	mov	r8, r1
 800341a:	4691      	mov	r9, r2
 800341c:	eb18 0005 	adds.w	r0, r8, r5
 8003420:	eb49 0106 	adc.w	r1, r9, r6
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	461d      	mov	r5, r3
 800342a:	f04f 0600 	mov.w	r6, #0
 800342e:	196b      	adds	r3, r5, r5
 8003430:	eb46 0406 	adc.w	r4, r6, r6
 8003434:	461a      	mov	r2, r3
 8003436:	4623      	mov	r3, r4
 8003438:	f7fc fede 	bl	80001f8 <__aeabi_uldivmod>
 800343c:	4603      	mov	r3, r0
 800343e:	460c      	mov	r4, r1
 8003440:	461a      	mov	r2, r3
 8003442:	4b47      	ldr	r3, [pc, #284]	; (8003560 <UART_SetConfig+0x384>)
 8003444:	fba3 2302 	umull	r2, r3, r3, r2
 8003448:	095b      	lsrs	r3, r3, #5
 800344a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	461d      	mov	r5, r3
 8003452:	f04f 0600 	mov.w	r6, #0
 8003456:	46a9      	mov	r9, r5
 8003458:	46b2      	mov	sl, r6
 800345a:	eb19 0309 	adds.w	r3, r9, r9
 800345e:	eb4a 040a 	adc.w	r4, sl, sl
 8003462:	4699      	mov	r9, r3
 8003464:	46a2      	mov	sl, r4
 8003466:	eb19 0905 	adds.w	r9, r9, r5
 800346a:	eb4a 0a06 	adc.w	sl, sl, r6
 800346e:	f04f 0100 	mov.w	r1, #0
 8003472:	f04f 0200 	mov.w	r2, #0
 8003476:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800347a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800347e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003482:	4689      	mov	r9, r1
 8003484:	4692      	mov	sl, r2
 8003486:	eb19 0005 	adds.w	r0, r9, r5
 800348a:	eb4a 0106 	adc.w	r1, sl, r6
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	461d      	mov	r5, r3
 8003494:	f04f 0600 	mov.w	r6, #0
 8003498:	196b      	adds	r3, r5, r5
 800349a:	eb46 0406 	adc.w	r4, r6, r6
 800349e:	461a      	mov	r2, r3
 80034a0:	4623      	mov	r3, r4
 80034a2:	f7fc fea9 	bl	80001f8 <__aeabi_uldivmod>
 80034a6:	4603      	mov	r3, r0
 80034a8:	460c      	mov	r4, r1
 80034aa:	461a      	mov	r2, r3
 80034ac:	4b2c      	ldr	r3, [pc, #176]	; (8003560 <UART_SetConfig+0x384>)
 80034ae:	fba3 1302 	umull	r1, r3, r3, r2
 80034b2:	095b      	lsrs	r3, r3, #5
 80034b4:	2164      	movs	r1, #100	; 0x64
 80034b6:	fb01 f303 	mul.w	r3, r1, r3
 80034ba:	1ad3      	subs	r3, r2, r3
 80034bc:	00db      	lsls	r3, r3, #3
 80034be:	3332      	adds	r3, #50	; 0x32
 80034c0:	4a27      	ldr	r2, [pc, #156]	; (8003560 <UART_SetConfig+0x384>)
 80034c2:	fba2 2303 	umull	r2, r3, r2, r3
 80034c6:	095b      	lsrs	r3, r3, #5
 80034c8:	005b      	lsls	r3, r3, #1
 80034ca:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80034ce:	4498      	add	r8, r3
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	461d      	mov	r5, r3
 80034d4:	f04f 0600 	mov.w	r6, #0
 80034d8:	46a9      	mov	r9, r5
 80034da:	46b2      	mov	sl, r6
 80034dc:	eb19 0309 	adds.w	r3, r9, r9
 80034e0:	eb4a 040a 	adc.w	r4, sl, sl
 80034e4:	4699      	mov	r9, r3
 80034e6:	46a2      	mov	sl, r4
 80034e8:	eb19 0905 	adds.w	r9, r9, r5
 80034ec:	eb4a 0a06 	adc.w	sl, sl, r6
 80034f0:	f04f 0100 	mov.w	r1, #0
 80034f4:	f04f 0200 	mov.w	r2, #0
 80034f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80034fc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003500:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003504:	4689      	mov	r9, r1
 8003506:	4692      	mov	sl, r2
 8003508:	eb19 0005 	adds.w	r0, r9, r5
 800350c:	eb4a 0106 	adc.w	r1, sl, r6
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	461d      	mov	r5, r3
 8003516:	f04f 0600 	mov.w	r6, #0
 800351a:	196b      	adds	r3, r5, r5
 800351c:	eb46 0406 	adc.w	r4, r6, r6
 8003520:	461a      	mov	r2, r3
 8003522:	4623      	mov	r3, r4
 8003524:	f7fc fe68 	bl	80001f8 <__aeabi_uldivmod>
 8003528:	4603      	mov	r3, r0
 800352a:	460c      	mov	r4, r1
 800352c:	461a      	mov	r2, r3
 800352e:	4b0c      	ldr	r3, [pc, #48]	; (8003560 <UART_SetConfig+0x384>)
 8003530:	fba3 1302 	umull	r1, r3, r3, r2
 8003534:	095b      	lsrs	r3, r3, #5
 8003536:	2164      	movs	r1, #100	; 0x64
 8003538:	fb01 f303 	mul.w	r3, r1, r3
 800353c:	1ad3      	subs	r3, r2, r3
 800353e:	00db      	lsls	r3, r3, #3
 8003540:	3332      	adds	r3, #50	; 0x32
 8003542:	4a07      	ldr	r2, [pc, #28]	; (8003560 <UART_SetConfig+0x384>)
 8003544:	fba2 2303 	umull	r2, r3, r2, r3
 8003548:	095b      	lsrs	r3, r3, #5
 800354a:	f003 0207 	and.w	r2, r3, #7
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4442      	add	r2, r8
 8003554:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003556:	e1b2      	b.n	80038be <UART_SetConfig+0x6e2>
 8003558:	40011000 	.word	0x40011000
 800355c:	40011400 	.word	0x40011400
 8003560:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4ad7      	ldr	r2, [pc, #860]	; (80038c8 <UART_SetConfig+0x6ec>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d005      	beq.n	800357a <UART_SetConfig+0x39e>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4ad6      	ldr	r2, [pc, #856]	; (80038cc <UART_SetConfig+0x6f0>)
 8003574:	4293      	cmp	r3, r2
 8003576:	f040 80d1 	bne.w	800371c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800357a:	f7ff f837 	bl	80025ec <HAL_RCC_GetPCLK2Freq>
 800357e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	469a      	mov	sl, r3
 8003584:	f04f 0b00 	mov.w	fp, #0
 8003588:	46d0      	mov	r8, sl
 800358a:	46d9      	mov	r9, fp
 800358c:	eb18 0308 	adds.w	r3, r8, r8
 8003590:	eb49 0409 	adc.w	r4, r9, r9
 8003594:	4698      	mov	r8, r3
 8003596:	46a1      	mov	r9, r4
 8003598:	eb18 080a 	adds.w	r8, r8, sl
 800359c:	eb49 090b 	adc.w	r9, r9, fp
 80035a0:	f04f 0100 	mov.w	r1, #0
 80035a4:	f04f 0200 	mov.w	r2, #0
 80035a8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80035ac:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80035b0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80035b4:	4688      	mov	r8, r1
 80035b6:	4691      	mov	r9, r2
 80035b8:	eb1a 0508 	adds.w	r5, sl, r8
 80035bc:	eb4b 0609 	adc.w	r6, fp, r9
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	4619      	mov	r1, r3
 80035c6:	f04f 0200 	mov.w	r2, #0
 80035ca:	f04f 0300 	mov.w	r3, #0
 80035ce:	f04f 0400 	mov.w	r4, #0
 80035d2:	0094      	lsls	r4, r2, #2
 80035d4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80035d8:	008b      	lsls	r3, r1, #2
 80035da:	461a      	mov	r2, r3
 80035dc:	4623      	mov	r3, r4
 80035de:	4628      	mov	r0, r5
 80035e0:	4631      	mov	r1, r6
 80035e2:	f7fc fe09 	bl	80001f8 <__aeabi_uldivmod>
 80035e6:	4603      	mov	r3, r0
 80035e8:	460c      	mov	r4, r1
 80035ea:	461a      	mov	r2, r3
 80035ec:	4bb8      	ldr	r3, [pc, #736]	; (80038d0 <UART_SetConfig+0x6f4>)
 80035ee:	fba3 2302 	umull	r2, r3, r3, r2
 80035f2:	095b      	lsrs	r3, r3, #5
 80035f4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	469b      	mov	fp, r3
 80035fc:	f04f 0c00 	mov.w	ip, #0
 8003600:	46d9      	mov	r9, fp
 8003602:	46e2      	mov	sl, ip
 8003604:	eb19 0309 	adds.w	r3, r9, r9
 8003608:	eb4a 040a 	adc.w	r4, sl, sl
 800360c:	4699      	mov	r9, r3
 800360e:	46a2      	mov	sl, r4
 8003610:	eb19 090b 	adds.w	r9, r9, fp
 8003614:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003618:	f04f 0100 	mov.w	r1, #0
 800361c:	f04f 0200 	mov.w	r2, #0
 8003620:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003624:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003628:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800362c:	4689      	mov	r9, r1
 800362e:	4692      	mov	sl, r2
 8003630:	eb1b 0509 	adds.w	r5, fp, r9
 8003634:	eb4c 060a 	adc.w	r6, ip, sl
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	4619      	mov	r1, r3
 800363e:	f04f 0200 	mov.w	r2, #0
 8003642:	f04f 0300 	mov.w	r3, #0
 8003646:	f04f 0400 	mov.w	r4, #0
 800364a:	0094      	lsls	r4, r2, #2
 800364c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003650:	008b      	lsls	r3, r1, #2
 8003652:	461a      	mov	r2, r3
 8003654:	4623      	mov	r3, r4
 8003656:	4628      	mov	r0, r5
 8003658:	4631      	mov	r1, r6
 800365a:	f7fc fdcd 	bl	80001f8 <__aeabi_uldivmod>
 800365e:	4603      	mov	r3, r0
 8003660:	460c      	mov	r4, r1
 8003662:	461a      	mov	r2, r3
 8003664:	4b9a      	ldr	r3, [pc, #616]	; (80038d0 <UART_SetConfig+0x6f4>)
 8003666:	fba3 1302 	umull	r1, r3, r3, r2
 800366a:	095b      	lsrs	r3, r3, #5
 800366c:	2164      	movs	r1, #100	; 0x64
 800366e:	fb01 f303 	mul.w	r3, r1, r3
 8003672:	1ad3      	subs	r3, r2, r3
 8003674:	011b      	lsls	r3, r3, #4
 8003676:	3332      	adds	r3, #50	; 0x32
 8003678:	4a95      	ldr	r2, [pc, #596]	; (80038d0 <UART_SetConfig+0x6f4>)
 800367a:	fba2 2303 	umull	r2, r3, r2, r3
 800367e:	095b      	lsrs	r3, r3, #5
 8003680:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003684:	4498      	add	r8, r3
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	469b      	mov	fp, r3
 800368a:	f04f 0c00 	mov.w	ip, #0
 800368e:	46d9      	mov	r9, fp
 8003690:	46e2      	mov	sl, ip
 8003692:	eb19 0309 	adds.w	r3, r9, r9
 8003696:	eb4a 040a 	adc.w	r4, sl, sl
 800369a:	4699      	mov	r9, r3
 800369c:	46a2      	mov	sl, r4
 800369e:	eb19 090b 	adds.w	r9, r9, fp
 80036a2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80036a6:	f04f 0100 	mov.w	r1, #0
 80036aa:	f04f 0200 	mov.w	r2, #0
 80036ae:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80036b2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80036b6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80036ba:	4689      	mov	r9, r1
 80036bc:	4692      	mov	sl, r2
 80036be:	eb1b 0509 	adds.w	r5, fp, r9
 80036c2:	eb4c 060a 	adc.w	r6, ip, sl
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	4619      	mov	r1, r3
 80036cc:	f04f 0200 	mov.w	r2, #0
 80036d0:	f04f 0300 	mov.w	r3, #0
 80036d4:	f04f 0400 	mov.w	r4, #0
 80036d8:	0094      	lsls	r4, r2, #2
 80036da:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80036de:	008b      	lsls	r3, r1, #2
 80036e0:	461a      	mov	r2, r3
 80036e2:	4623      	mov	r3, r4
 80036e4:	4628      	mov	r0, r5
 80036e6:	4631      	mov	r1, r6
 80036e8:	f7fc fd86 	bl	80001f8 <__aeabi_uldivmod>
 80036ec:	4603      	mov	r3, r0
 80036ee:	460c      	mov	r4, r1
 80036f0:	461a      	mov	r2, r3
 80036f2:	4b77      	ldr	r3, [pc, #476]	; (80038d0 <UART_SetConfig+0x6f4>)
 80036f4:	fba3 1302 	umull	r1, r3, r3, r2
 80036f8:	095b      	lsrs	r3, r3, #5
 80036fa:	2164      	movs	r1, #100	; 0x64
 80036fc:	fb01 f303 	mul.w	r3, r1, r3
 8003700:	1ad3      	subs	r3, r2, r3
 8003702:	011b      	lsls	r3, r3, #4
 8003704:	3332      	adds	r3, #50	; 0x32
 8003706:	4a72      	ldr	r2, [pc, #456]	; (80038d0 <UART_SetConfig+0x6f4>)
 8003708:	fba2 2303 	umull	r2, r3, r2, r3
 800370c:	095b      	lsrs	r3, r3, #5
 800370e:	f003 020f 	and.w	r2, r3, #15
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4442      	add	r2, r8
 8003718:	609a      	str	r2, [r3, #8]
 800371a:	e0d0      	b.n	80038be <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800371c:	f7fe ff52 	bl	80025c4 <HAL_RCC_GetPCLK1Freq>
 8003720:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	469a      	mov	sl, r3
 8003726:	f04f 0b00 	mov.w	fp, #0
 800372a:	46d0      	mov	r8, sl
 800372c:	46d9      	mov	r9, fp
 800372e:	eb18 0308 	adds.w	r3, r8, r8
 8003732:	eb49 0409 	adc.w	r4, r9, r9
 8003736:	4698      	mov	r8, r3
 8003738:	46a1      	mov	r9, r4
 800373a:	eb18 080a 	adds.w	r8, r8, sl
 800373e:	eb49 090b 	adc.w	r9, r9, fp
 8003742:	f04f 0100 	mov.w	r1, #0
 8003746:	f04f 0200 	mov.w	r2, #0
 800374a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800374e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003752:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003756:	4688      	mov	r8, r1
 8003758:	4691      	mov	r9, r2
 800375a:	eb1a 0508 	adds.w	r5, sl, r8
 800375e:	eb4b 0609 	adc.w	r6, fp, r9
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	4619      	mov	r1, r3
 8003768:	f04f 0200 	mov.w	r2, #0
 800376c:	f04f 0300 	mov.w	r3, #0
 8003770:	f04f 0400 	mov.w	r4, #0
 8003774:	0094      	lsls	r4, r2, #2
 8003776:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800377a:	008b      	lsls	r3, r1, #2
 800377c:	461a      	mov	r2, r3
 800377e:	4623      	mov	r3, r4
 8003780:	4628      	mov	r0, r5
 8003782:	4631      	mov	r1, r6
 8003784:	f7fc fd38 	bl	80001f8 <__aeabi_uldivmod>
 8003788:	4603      	mov	r3, r0
 800378a:	460c      	mov	r4, r1
 800378c:	461a      	mov	r2, r3
 800378e:	4b50      	ldr	r3, [pc, #320]	; (80038d0 <UART_SetConfig+0x6f4>)
 8003790:	fba3 2302 	umull	r2, r3, r3, r2
 8003794:	095b      	lsrs	r3, r3, #5
 8003796:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	469b      	mov	fp, r3
 800379e:	f04f 0c00 	mov.w	ip, #0
 80037a2:	46d9      	mov	r9, fp
 80037a4:	46e2      	mov	sl, ip
 80037a6:	eb19 0309 	adds.w	r3, r9, r9
 80037aa:	eb4a 040a 	adc.w	r4, sl, sl
 80037ae:	4699      	mov	r9, r3
 80037b0:	46a2      	mov	sl, r4
 80037b2:	eb19 090b 	adds.w	r9, r9, fp
 80037b6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80037ba:	f04f 0100 	mov.w	r1, #0
 80037be:	f04f 0200 	mov.w	r2, #0
 80037c2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80037c6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80037ca:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80037ce:	4689      	mov	r9, r1
 80037d0:	4692      	mov	sl, r2
 80037d2:	eb1b 0509 	adds.w	r5, fp, r9
 80037d6:	eb4c 060a 	adc.w	r6, ip, sl
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	4619      	mov	r1, r3
 80037e0:	f04f 0200 	mov.w	r2, #0
 80037e4:	f04f 0300 	mov.w	r3, #0
 80037e8:	f04f 0400 	mov.w	r4, #0
 80037ec:	0094      	lsls	r4, r2, #2
 80037ee:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80037f2:	008b      	lsls	r3, r1, #2
 80037f4:	461a      	mov	r2, r3
 80037f6:	4623      	mov	r3, r4
 80037f8:	4628      	mov	r0, r5
 80037fa:	4631      	mov	r1, r6
 80037fc:	f7fc fcfc 	bl	80001f8 <__aeabi_uldivmod>
 8003800:	4603      	mov	r3, r0
 8003802:	460c      	mov	r4, r1
 8003804:	461a      	mov	r2, r3
 8003806:	4b32      	ldr	r3, [pc, #200]	; (80038d0 <UART_SetConfig+0x6f4>)
 8003808:	fba3 1302 	umull	r1, r3, r3, r2
 800380c:	095b      	lsrs	r3, r3, #5
 800380e:	2164      	movs	r1, #100	; 0x64
 8003810:	fb01 f303 	mul.w	r3, r1, r3
 8003814:	1ad3      	subs	r3, r2, r3
 8003816:	011b      	lsls	r3, r3, #4
 8003818:	3332      	adds	r3, #50	; 0x32
 800381a:	4a2d      	ldr	r2, [pc, #180]	; (80038d0 <UART_SetConfig+0x6f4>)
 800381c:	fba2 2303 	umull	r2, r3, r2, r3
 8003820:	095b      	lsrs	r3, r3, #5
 8003822:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003826:	4498      	add	r8, r3
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	469b      	mov	fp, r3
 800382c:	f04f 0c00 	mov.w	ip, #0
 8003830:	46d9      	mov	r9, fp
 8003832:	46e2      	mov	sl, ip
 8003834:	eb19 0309 	adds.w	r3, r9, r9
 8003838:	eb4a 040a 	adc.w	r4, sl, sl
 800383c:	4699      	mov	r9, r3
 800383e:	46a2      	mov	sl, r4
 8003840:	eb19 090b 	adds.w	r9, r9, fp
 8003844:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003848:	f04f 0100 	mov.w	r1, #0
 800384c:	f04f 0200 	mov.w	r2, #0
 8003850:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003854:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003858:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800385c:	4689      	mov	r9, r1
 800385e:	4692      	mov	sl, r2
 8003860:	eb1b 0509 	adds.w	r5, fp, r9
 8003864:	eb4c 060a 	adc.w	r6, ip, sl
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	4619      	mov	r1, r3
 800386e:	f04f 0200 	mov.w	r2, #0
 8003872:	f04f 0300 	mov.w	r3, #0
 8003876:	f04f 0400 	mov.w	r4, #0
 800387a:	0094      	lsls	r4, r2, #2
 800387c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003880:	008b      	lsls	r3, r1, #2
 8003882:	461a      	mov	r2, r3
 8003884:	4623      	mov	r3, r4
 8003886:	4628      	mov	r0, r5
 8003888:	4631      	mov	r1, r6
 800388a:	f7fc fcb5 	bl	80001f8 <__aeabi_uldivmod>
 800388e:	4603      	mov	r3, r0
 8003890:	460c      	mov	r4, r1
 8003892:	461a      	mov	r2, r3
 8003894:	4b0e      	ldr	r3, [pc, #56]	; (80038d0 <UART_SetConfig+0x6f4>)
 8003896:	fba3 1302 	umull	r1, r3, r3, r2
 800389a:	095b      	lsrs	r3, r3, #5
 800389c:	2164      	movs	r1, #100	; 0x64
 800389e:	fb01 f303 	mul.w	r3, r1, r3
 80038a2:	1ad3      	subs	r3, r2, r3
 80038a4:	011b      	lsls	r3, r3, #4
 80038a6:	3332      	adds	r3, #50	; 0x32
 80038a8:	4a09      	ldr	r2, [pc, #36]	; (80038d0 <UART_SetConfig+0x6f4>)
 80038aa:	fba2 2303 	umull	r2, r3, r2, r3
 80038ae:	095b      	lsrs	r3, r3, #5
 80038b0:	f003 020f 	and.w	r2, r3, #15
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4442      	add	r2, r8
 80038ba:	609a      	str	r2, [r3, #8]
}
 80038bc:	e7ff      	b.n	80038be <UART_SetConfig+0x6e2>
 80038be:	bf00      	nop
 80038c0:	3714      	adds	r7, #20
 80038c2:	46bd      	mov	sp, r7
 80038c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80038c8:	40011000 	.word	0x40011000
 80038cc:	40011400 	.word	0x40011400
 80038d0:	51eb851f 	.word	0x51eb851f

080038d4 <__libc_init_array>:
 80038d4:	b570      	push	{r4, r5, r6, lr}
 80038d6:	4e0d      	ldr	r6, [pc, #52]	; (800390c <__libc_init_array+0x38>)
 80038d8:	4c0d      	ldr	r4, [pc, #52]	; (8003910 <__libc_init_array+0x3c>)
 80038da:	1ba4      	subs	r4, r4, r6
 80038dc:	10a4      	asrs	r4, r4, #2
 80038de:	2500      	movs	r5, #0
 80038e0:	42a5      	cmp	r5, r4
 80038e2:	d109      	bne.n	80038f8 <__libc_init_array+0x24>
 80038e4:	4e0b      	ldr	r6, [pc, #44]	; (8003914 <__libc_init_array+0x40>)
 80038e6:	4c0c      	ldr	r4, [pc, #48]	; (8003918 <__libc_init_array+0x44>)
 80038e8:	f000 f820 	bl	800392c <_init>
 80038ec:	1ba4      	subs	r4, r4, r6
 80038ee:	10a4      	asrs	r4, r4, #2
 80038f0:	2500      	movs	r5, #0
 80038f2:	42a5      	cmp	r5, r4
 80038f4:	d105      	bne.n	8003902 <__libc_init_array+0x2e>
 80038f6:	bd70      	pop	{r4, r5, r6, pc}
 80038f8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80038fc:	4798      	blx	r3
 80038fe:	3501      	adds	r5, #1
 8003900:	e7ee      	b.n	80038e0 <__libc_init_array+0xc>
 8003902:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003906:	4798      	blx	r3
 8003908:	3501      	adds	r5, #1
 800390a:	e7f2      	b.n	80038f2 <__libc_init_array+0x1e>
 800390c:	080039bc 	.word	0x080039bc
 8003910:	080039bc 	.word	0x080039bc
 8003914:	080039bc 	.word	0x080039bc
 8003918:	080039c0 	.word	0x080039c0

0800391c <memset>:
 800391c:	4402      	add	r2, r0
 800391e:	4603      	mov	r3, r0
 8003920:	4293      	cmp	r3, r2
 8003922:	d100      	bne.n	8003926 <memset+0xa>
 8003924:	4770      	bx	lr
 8003926:	f803 1b01 	strb.w	r1, [r3], #1
 800392a:	e7f9      	b.n	8003920 <memset+0x4>

0800392c <_init>:
 800392c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800392e:	bf00      	nop
 8003930:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003932:	bc08      	pop	{r3}
 8003934:	469e      	mov	lr, r3
 8003936:	4770      	bx	lr

08003938 <_fini>:
 8003938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800393a:	bf00      	nop
 800393c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800393e:	bc08      	pop	{r3}
 8003940:	469e      	mov	lr, r3
 8003942:	4770      	bx	lr
